// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.length($.$$index(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  $index: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib3$_current",
  get$current: function() {
    return this._liblib3$_current;
  },
  moveNext$0: function() {
    this._liblib3$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib3$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.JsStringBuffer = {"": "Object;_contents",
  get$length: function() {
    return $.length(this._contents);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  clear$0: function() {
    this._contents = "";
  },
  toString$0: function() {
    return this._contents;
  }
};

$$.Collection = {"": "Iterable;",
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  clear$0: function() {
    $.IterableMixinWorkaround_removeMatching(this, new $.Collection_clear_anon());
  },
  $isCollection: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.JsStringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$$lt(t1.i_1, t2.length) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
      if ($.$$gt(t1.i_1, 0) === true)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
      return this.toString$0$bailout1(2, t1, t2);
    actualParameters = $.toString(t1.sb_0);
    t1.sb_0 = $.JsStringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add(t3, t2[i]);
    }
    formalParameters = $.toString(t1.sb_0);
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.JsStringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSArrayJSString(t2); $.$$lt(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
            if ($.$$gt(t1.i_1, 0) === true)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.toString(t1.sb_0);
          t1.sb_0 = $.JsStringBuffer$("");
          for (t3 = $.getInterceptor$JSArrayJSString(t2), i = 0; $.CONSTANT5.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.toString(t1.sb_0);
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  }
};

$$.FormatException = {"": "Object;",
  toString$0: function() {
    return "FormatException: " + this.message;
  }
};

$$.IllegalJSRegExpException = {"": "FormatException;message"};

$$.ExpectException = {"": "Object;message",
  toString$0: function() {
    return this.message;
  }
};

$$.Iterable = {"": "Object;",
  map$1: function(f) {
    return $.MappedIterable$(this, f);
  },
  mappedBy$1: function(f) {
    return this.map$1(f);
  },
  contains$1: function(element) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      if ($.$$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  get$length: function() {
    var it, count;
    it = this.get$iterator();
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return this.get$iterator().moveNext$0() !== true;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$._OptionsImpl = {"": "Object;_arguments",
  get$arguments: function() {
    if (this._arguments == null) {
      var t1 = $._OptionsImpl__nativeArguments;
      this._arguments = $.getRange(t1, 0, $.length(t1));
    }
    return this._arguments;
  }
};

$$.Stopwatch = {"": "Object;_liblib1$_start,_stop",
  start$0: function() {
    var t1, t3, t5;
    if (this.get$isRunning() === true)
      return;
    if (this._liblib1$_start == null)
      this._liblib1$_start = $.Primitives_numMicroseconds();
    else {
      t1 = $.Primitives_numMicroseconds();
      t3 = this._stop;
      t5 = this._liblib1$_start;
      if (typeof t3 !== "number")
        return this.start$0$bailout(2, t1, t3);
      if (typeof t5 !== "number")
        return this.start$0$bailout(3, t1, t3, t5);
      if (typeof t1 !== "number")
        return this.start$0$bailout(1, t1);
      this._liblib1$_start = t1 - (t3 - t5);
      this._stop = null;
    }
  },
  start$0$bailout: function(state0, t1, t3, t5) {
    switch (state0) {
      case 0:
        if (this.get$isRunning() === true)
          return;
      default:
        if (state0 === 0 && this._liblib1$_start == null)
          this._liblib1$_start = $.Primitives_numMicroseconds();
        else
          switch (state0) {
            case 0:
              t1 = $.Primitives_numMicroseconds();
            case 1:
              state0 = 0;
              t3 = this._stop;
            case 2:
              state0 = 0;
              t5 = this._liblib1$_start;
            case 3:
              state0 = 0;
              this._liblib1$_start = $.$$sub(t1, $.$$sub(t3, t5));
              this._stop = null;
          }
    }
  },
  stop$0: function() {
    if (this.get$isRunning() !== true)
      return;
    this._stop = $.Primitives_numMicroseconds();
  },
  get$elapsedTicks: function() {
    var t1, t2;
    t1 = this._liblib1$_start;
    if (t1 == null)
      return 0;
    t2 = this._stop;
    return t2 == null ? $.$$sub($.Stopwatch__now(), this._liblib1$_start) : $.$$sub(t2, t1);
  },
  get$elapsedMilliseconds: function() {
    var t1, t3;
    t1 = this.get$elapsedTicks();
    if (typeof t1 !== "number")
      return this.get$elapsedMilliseconds$bailout(1, t1);
    t1 *= 1000;
    t3 = this.get$frequency();
    if (typeof t3 !== "number")
      return this.get$elapsedMilliseconds$bailout(2, t1, t3);
    return $.CONSTANT4.$tdiv(t1, t3);
  },
  get$elapsedMilliseconds$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.get$elapsedTicks();
      case 1:
        state0 = 0;
        t1 = $.$$mul(t1, 1000);
        t3 = this.get$frequency();
      case 2:
        state0 = 0;
        return $.$$tdiv(t1, t3);
    }
  },
  get$frequency: function() {
    return $.Stopwatch__frequency();
  },
  get$isRunning: function() {
    return !(this._liblib1$_start == null) && this._stop == null;
  }
};

$$.ObjectInterceptor = {"": "Object;",
  $mod: function(receiver, a0) {
    return receiver.$mod(a0);
  },
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  $div: function(receiver, a0) {
    return receiver.$div(a0);
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  $le: function(receiver, a0) {
    return receiver.$le(a0);
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  $shr: function(receiver, a0) {
    return receiver.$shr(a0);
  },
  abs$0: function(receiver) {
    return receiver.abs$0();
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  codeUnitAt$1: function(receiver, a0) {
    return receiver.codeUnitAt$1(a0);
  },
  compareTo$1: function(receiver, a0) {
    return receiver.compareTo$1(a0);
  },
  get$contains: function(receiver) {
    return receiver.get$contains();
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  get$isNegative: function(receiver) {
    return receiver.get$isNegative();
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  map$1: function(receiver, a0) {
    return receiver.map$1(a0);
  },
  mappedBy$1: function(receiver, a0) {
    return receiver.mappedBy$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  removeMatching$1: function(receiver, a0) {
    return receiver.removeMatching$1(a0);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  setRange$3: function(receiver, a0, a1, a2) {
    return receiver.setRange$3(a0, a1, a2);
  },
  sort$1: function(receiver, a0) {
    return receiver.sort$1(a0);
  },
  split$1: function(receiver, a0) {
    return receiver.split$1(a0);
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  toDouble$0: function(receiver) {
    return receiver.toDouble$0();
  },
  toSet$0: function(receiver) {
    return receiver.toSet$0();
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  trim$0: function(receiver) {
    return receiver.trim$0();
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  $negate: function(receiver) {
    return receiver.$negate();
  },
  $or: function(receiver, a0) {
    return receiver.$or(a0);
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  removeAll$1: function(receiver, elements) {
    $.IterableMixinWorkaround_removeAllList(receiver, elements);
  },
  removeMatching$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeMatchingList(receiver, test);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, 0, null);
  },
  mappedBy$1: function(receiver, f) {
    return $.IterableMixinWorkaround_mappedByList(receiver, f);
  },
  getRange$2: function(receiver, start, $length) {
    var t1, end;
    if (0 === $length)
      return [];
    $.checkNull(start);
    $.checkNull($length);
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    t1 = $length < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + $length;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value($length));
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    return receiver.slice(start, end);
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    var t1;
    $.checkMutable(receiver, "set range");
    if ($.$$eq($length, 0) === true)
      return;
    $.checkNull(start);
    $.checkNull($length);
    $.checkNull(from);
    $.checkNull(startFrom);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    if (!(typeof startFrom === "number" && Math.floor(startFrom) === startFrom))
      throw $.$$throw($.ArgumentError$(startFrom));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiver.length)
      throw $.$$throw($.RangeError$value(t1));
    $.Arrays_copy(from, startFrom, receiver, start, $length);
  },
  setRange$3: function($receiver, start, length, from) {
    return this.setRange$4($receiver, start, length, from, 0);
  },
  sort$1: function(receiver, compare) {
    $.checkMutable(receiver, "sort");
    $.IterableMixinWorkaround_sortList(receiver, compare);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toSet$0: function(receiver) {
    return $.HashSet_HashSet$from(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: true,
  $isCollection: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if ($.$$eq(this.get$isNegative(receiver), bIsNegative) === true)
          return 0;
        if (this.get$isNegative(receiver) === true)
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver) === true) {
      if (this.get$isNaN(b) === true)
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  toDouble$0: function(receiver) {
    return receiver;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isJSNumber: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    return this.codeUnitAt$1(receiver, index);
  },
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.Bound_contains_JSString(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    t3 = this._keys.length;
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.$$eq(existingKey, key) === true)
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, key, 0, hash, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, key, t1, hash, numberOfProbes0, insertionIndex) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.hashCode(key);
      case 1:
        state0 = 0;
        hash = $.$$and(t1, this._keys.length - 1);
        numberOfProbes = 1;
        insertionIndex = -1;
      case 2:
        var numberOfProbes, existingKey;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.$$eq(existingKey, key) === true)
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    hash = $.$$and($.hashCode(key), this._keys.length - 1);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var newNumberOfEntries, capacity, t1;
    newNumberOfEntries = $.$$add(this._numberOfEntries, 1);
    if ($.$$ge(newNumberOfEntries, this._loadLimit) === true) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof newNumberOfEntries !== "number")
      throw $.iae(newNumberOfEntries);
    t1 = this._numberOfDeleted;
    if (t1 > capacity - newNumberOfEntries - t1)
      this._grow$1(capacity);
  },
  _grow$1: function(newCapacity) {
    var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
    capacity = this._keys.length;
    this._loadLimit = $.$$tdiv($.$$mul(newCapacity, 3), 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT3)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var t1, $length, t2, t3, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._keys;
    $length = t1.length;
    for (t2 = this._values, t3 = t2.length, i = 0; i < $length; ++i) {
      t1[i] = null;
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
  },
  $indexSet: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT3) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.$$indexSet$bailout(1, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout: function(state0, key, value, t1, index) {
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT3))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.$$add(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  $index: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.$$index$bailout(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index) {
    var t1;
    if ($.$$lt(index, 0) === true)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, t3, value;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.remove$1$bailout(1, index);
    if (index >= 0) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.remove$1$bailout(2, index, t1);
      this._numberOfEntries = t1 - 1;
      t3 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t3.length)
        throw $.ioore(index);
      value = t3[index];
      t3[index] = null;
      t3 = this._keys;
      if (index >= t3.length)
        throw $.ioore(index);
      t3[index] = $.CONSTANT3;
      this._numberOfDeleted = this._numberOfDeleted + 1;
      return value;
    }
    return;
  },
  remove$1$bailout: function(state0, index, t1) {
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
      case 1:
        state0 = 0;
      case 2:
        var t3, value;
        if (state0 === 2 || state0 === 0 && $.$$ge(index, 0) === true)
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 2:
              state0 = 0;
              this._numberOfEntries = $.$$sub(t1, 1);
              t3 = this._values;
              if (index !== (index | 0))
                throw $.iae(index);
              if (index < 0 || index >= t3.length)
                throw $.ioore(index);
              value = t3[index];
              t3[index] = null;
              t3 = this._keys;
              if (index >= t3.length)
                throw $.ioore(index);
              t3[index] = $.CONSTANT3;
              this._numberOfDeleted = this._numberOfDeleted + 1;
              return value;
          }
        return;
    }
  },
  get$isEmpty: function() {
    return $.$$eq(this._numberOfEntries, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this);
  },
  containsKey$1: function(key) {
    return $.$$eq(this._probeForLookup$1(key), -1) !== true;
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  $isMap: true
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, $length, t3, newIndex, t2, key;
    t1 = this._map;
    $length = $.length(t1.get$_keys());
    if (typeof $length !== "number")
      return this.moveNext$0$bailout(1, $length, t1);
    t3 = this._index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(2, $length, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_keys(); newIndex < $length;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
        return this.moveNext$0$bailout(3, $length, t1, t2, newIndex, $.CONSTANT4);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT3)) {
        this._liblib$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = $length;
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, $length, t1, t3, newIndex, t2) {
    switch (state0) {
      case 0:
        t1 = this._map;
        $length = $.length(t1.get$_keys());
      case 1:
        state0 = 0;
        t3 = this._index;
      case 2:
        state0 = 0;
        newIndex = $.$$add(t3, 1);
      case 3:
        var key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor$JSNumber(newIndex);
                if (!(t2.$lt(newIndex, $length) === true))
                  break L0;
                t3 = t1.get$_keys();
              case 3:
                state0 = 0;
                key = $.$$index(t3, newIndex);
                if (!(key == null) && !(key === $.CONSTANT3)) {
                  this._liblib$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
                  this._index = newIndex;
                  return true;
                }
                newIndex = t2.$add(newIndex, 1);
            }
        this._index = $length;
        this._liblib$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_index,_liblib$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.$$index(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_liblib$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_liblib$_list,_map",
  $indexSet: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
        return this.$$indexSet$bailout(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._liblib$_list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      t3 = this._liblib$_list.lastEntry$0();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
        return this.$$indexSet$bailout(2, key, 0, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  $$indexSet$bailout: function(state0, key, value, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.$$index(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._liblib$_list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              $.$$indexSet(t1, key, this._liblib$_list.lastEntry$0());
          }
    }
  },
  $index: function(key) {
    var entry = $.$$index(this._map, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  get$values: function() {
    return $.MappedIterable$(this._liblib$_list, new $._LinkedHashMapImpl_values_anon());
  },
  forEach$1: function(f) {
    this._liblib$_list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    return $.length(this._map);
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  clear$0: function() {
    $.clear(this._map);
    this._liblib$_list.clear$0();
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._liblib$_list = $.DoubleLinkedQueue$();
  },
  $isMap: true
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  append$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this, this._next);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Collection;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addFirst$1: function(value) {
    this._sentinel.append$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.$$eq(entry.get$element(), o) === true) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAllList(this, elements);
  },
  removeMatching$1: function(test) {
    var entry, next;
    entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel); entry = next) {
      next = entry.get$_next();
      if (test.call$1(entry.get$element()) === true)
        entry.remove$0();
    }
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  $isCollection: true
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.$indexSet(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return this._backingMap.containsKey$1(value);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    return this._backingMap.get$isEmpty();
  },
  get$length: function() {
    return this._backingMap.get$length();
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  $isCollection: true
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT3)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT3;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    return $.MappedIterator$($.iterator(this._iterable), this._f);
  },
  get$length: function() {
    return $.length(this._iterable);
  },
  get$isEmpty: function() {
    return $.isEmpty(this._iterable);
  }
};

$$.MappedIterator = {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._current = this._f$1(t1.get$current());
      return true;
    } else {
      this._current = null;
      return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.MappedListIterable = {"": "Iterable;_list,_start,_end,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$_startIndex: function() {
    var t1, t2, t3;
    t1 = this._start;
    t2 = this._list;
    t3 = $.getInterceptor$JSArrayJSString(t2);
    if ($.$$le(t1, t3.get$length(t2)) === true)
      return t1;
    return t3.get$length(t2);
  },
  get$_endIndex: function() {
    var t1 = this._end;
    if (t1 == null || $.$$gt(t1, $.length(this._list)) === true)
      return $.length(this._list);
    return t1;
  },
  get$iterator: function() {
    return $.MappedListIterator$(this._list, this._f, this.get$_startIndex(), this.get$_endIndex());
  },
  forEach$1: function(action) {
    var t1, t3, $length, i, n;
    t1 = this._list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.forEach$1$bailout1(1, action, t1);
    t3 = $.getInterceptor$JSArrayJSString(t1);
    $length = t1.length;
    i = this.get$_startIndex();
    if (typeof i !== "number")
      return this.forEach$1$bailout1(2, action, t1, t3, $length, i);
    n = this.get$_endIndex();
    if (typeof n !== "number")
      return this.forEach$1$bailout1(3, action, t1, t3, $length, i, n);
    for (; i < n; ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(this._f$1(t1[i]));
      if (t1.length !== $length)
        throw $.$$throw($.ConcurrentModificationError$(t1));
    }
  },
  forEach$1$bailout1: function(state0, action, t1, t3, $length, i, n) {
    switch (state0) {
      case 0:
        t1 = this._list;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        $length = t3.get$length(t1);
        i = this.get$_startIndex();
      case 2:
        state0 = 0;
        n = this.get$_endIndex();
      case 3:
        var t2;
        state0 = 0;
        for (; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, n) === true; i = t2.$add(i, 1)) {
          action.call$1(this._f$1(t3.$index(t1, i)));
          if ($.$$eq(t3.get$length(t1), $length) !== true)
            throw $.$$throw($.ConcurrentModificationError$(t1));
        }
    }
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$_startIndex(), this.get$_endIndex());
  },
  get$length: function() {
    var t1, t3;
    t1 = this.get$_endIndex();
    t3 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.get$length$bailout1(1, t1);
    if (typeof t3 !== "number")
      return this.get$length$bailout1(2, t1, t3);
    return t1 - t3;
  },
  get$length$bailout1: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.get$_endIndex();
      case 1:
        state0 = 0;
        t3 = this.get$_startIndex();
      case 2:
        state0 = 0;
        return $.$$sub(t1, t3);
    }
  },
  contains$1: function(element) {
    var t1, t3, $length, i, n;
    t1 = this._list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.contains$1$bailout1(1, element, t1);
    t3 = $.getInterceptor$JSArrayJSString(t1);
    $length = t1.length;
    i = this.get$_startIndex();
    if (typeof i !== "number")
      return this.contains$1$bailout1(2, element, t1, t3, $length, i);
    n = this.get$_endIndex();
    if (typeof n !== "number")
      return this.contains$1$bailout1(3, element, t1, t3, $length, i, n);
    for (; i < n; ++i) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$$eq(this._f$1(t1[i]), element) === true)
        return true;
      if (t1.length !== $length)
        throw $.$$throw($.ConcurrentModificationError$(t1));
    }
    return false;
  },
  contains$1$bailout1: function(state0, element, t1, t3, $length, i, n) {
    switch (state0) {
      case 0:
        t1 = this._list;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        $length = t3.get$length(t1);
        i = this.get$_startIndex();
      case 2:
        state0 = 0;
        n = this.get$_endIndex();
      case 3:
        var t2;
        state0 = 0;
        for (; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, n) === true; i = t2.$add(i, 1)) {
          if ($.$$eq(this._f$1(t3.$index(t1, i)), element) === true)
            return true;
          if ($.$$eq(t3.get$length(t1), $length) !== true)
            throw $.$$throw($.ConcurrentModificationError$(t1));
        }
        return false;
    }
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  map$1: function(f) {
    return $.MappedListIterable$(this._list, new $.MappedListIterable_map_anon(this, f), this._start, this._end);
  },
  mappedBy$1: function(f) {
    return this.map$1(f);
  },
  MappedListIterable$4: function(_list, _f, _start, _end) {
    var t1 = this._end;
    if (!(t1 == null) && $.$$lt(t1, this._start) === true)
      throw $.$$throw($.ArgumentError$("End (" + $.S(t1) + ") before start (" + $.S(this._start) + ")"));
  }
};

$$.MappedListIterator = {"": "Object;_list,_f,_endIndex,_length,_liblib0$_index,_current",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t3, t4, t2, t6;
    t1 = this._list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.moveNext$0$bailout(1, t1);
    t3 = $.getInterceptor$JSArrayJSString(t1);
    t4 = t1.length;
    if (!(t4 === this._length))
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._liblib0$_index;
    t6 = this._endIndex;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t3, t2);
    if (typeof t6 !== "number")
      return this.moveNext$0$bailout(3, t1, t3, t2, t6);
    if (t2 >= t6) {
      this._current = null;
      return false;
    }
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t4)
      throw $.ioore(t2);
    this._current = this._f$1(t1[t2]);
    t3 = this._liblib0$_index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(4, 0, 0, t3);
    this._liblib0$_index = t3 + 1;
    return true;
  },
  moveNext$0$bailout: function(state0, t1, t3, t2, t5) {
    switch (state0) {
      case 0:
        t1 = this._list;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        if ($.$$eq(t3.get$length(t1), this._length) !== true)
          throw $.$$throw($.ConcurrentModificationError$(t1));
        t2 = this._liblib0$_index;
      case 2:
        state0 = 0;
        t5 = this._endIndex;
      case 3:
        state0 = 0;
        if ($.$$ge(t2, t5) === true) {
          this._current = null;
          return false;
        }
        this._current = this._f$1(t3.$index(t1, this._liblib0$_index));
        t2 = this._liblib0$_index;
      case 4:
        state0 = 0;
        this._liblib0$_index = $.$$add(t2, 1);
        return true;
    }
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function() {
    return $.WhereIterator$($.CONSTANT0.get$iterator(this._iterable), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ListBase = {"": "Collection;",
  get$iterator: function() {
    return $.ListIterator$(this);
  },
  forEach$1: function(f) {
    var i;
    for (i = 0; $.CONSTANT5.$lt(i, this.get$length()); ++i)
      f.call$1(this.$index(i));
  },
  contains$1: function(value) {
    var i, t1;
    i = 0;
    while (true) {
      t1 = this.get$length();
      if (typeof t1 !== "number")
        return this.contains$1$bailout1(1, value, t1, i);
      if (!(i < t1))
        break;
      if ($.$$eq(this.$index(i), value) === true)
        return true;
      ++i;
    }
    return false;
  },
  contains$1$bailout1: function(state0, value, t1, i) {
    switch (state0) {
      case 0:
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.get$length();
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L0;
                if ($.$$eq(this.$index(i), value) === true)
                  return true;
                ++i;
            }
        return false;
    }
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  get$isEmpty: function() {
    return $.$$eq(this.get$length(), 0);
  },
  indexOf$2: function(value, start) {
    var i, t1;
    if (typeof start !== "number")
      return this.indexOf$2$bailout(1, value, start);
    i = start;
    while (true) {
      t1 = this.get$length();
      if (typeof t1 !== "number")
        return this.indexOf$2$bailout(2, value, 0, i, t1);
      if (!(i < t1))
        break;
      if ($.$$eq(this.$index(i), value) === true)
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$2$bailout: function(state0, value, start, i, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        i = start;
      case 2:
        var t3;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.get$length();
              case 2:
                state0 = 0;
                t3 = $.getInterceptor$JSNumber(i);
                if (!(t3.$lt(i, t1) === true))
                  break L0;
                if ($.$$eq(this.$index(i), value) === true)
                  return i;
                i = t3.$add(i, 1);
            }
        return -1;
    }
  },
  indexOf$1: function(value) {
    return this.indexOf$2(value, 0);
  },
  getRange$2: function(start, $length) {
    var result, i;
    if (typeof $length !== "number")
      return this.getRange$2$bailout(1, start, $length);
    result = [];
    for (i = 0; i < $length; ++i)
      result.push(this.$index(start + i));
    return result;
  },
  getRange$2$bailout: function(state0, start, $length) {
    var result, i;
    result = [];
    for (i = 0; $.CONSTANT5.$lt(i, $length); ++i)
      result.push(this.$index(start + i));
    return result;
  },
  map$1: function(f) {
    return $.MappedIterable$(this, f);
  },
  mappedBy$1: function(f) {
    return $.MappedList$(this, f);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  $isList: true,
  $isCollection: true
};

$$.UnmodifiableListBase = {"": "ListBase;",
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  setRange$4: function(start, $length, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  setRange$3: function(start, length, from) {
    return this.setRange$4(start, length, from, null);
  }
};

$$.ListIterator = {"": "Object;_list,_length,_position,_current",
  moveNext$0: function() {
    var t1, t3, t4, t5, t2, nextPosition;
    t1 = this._list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.moveNext$0$bailout(1, t1);
    t3 = $.getInterceptor$JSArrayJSString(t1);
    t4 = t1.length;
    t5 = this._length;
    if (typeof t5 !== "number")
      return this.moveNext$0$bailout(3, t1, t3, t4, t5);
    if (!(t4 === t5))
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(4, t1, t3, 0, t5, t2);
    nextPosition = t2 + 1;
    if (nextPosition < t5) {
      this._position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      return true;
    }
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t3, t4, t6, t2) {
    switch (state0) {
      case 0:
        t1 = this._list;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        t4 = t3.get$length(t1);
      case 2:
        state0 = 0;
        t6 = this._length;
      case 3:
        state0 = 0;
        if ($.$$eq(t4, t6) !== true)
          throw $.$$throw($.ConcurrentModificationError$(t1));
        t2 = this._position;
      case 4:
        var nextPosition;
        state0 = 0;
        nextPosition = $.$$add(t2, 1);
        if ($.$$lt(nextPosition, t6) === true) {
          this._position = nextPosition;
          this._current = t3.$index(t1, nextPosition);
          return true;
        }
        this._current = null;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.MappedList = {"": "UnmodifiableListBase;_list,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  $index: function(index) {
    var t1 = this._list;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return this._f$1(t1[index]);
  },
  $$index$bailout: function(state0, index, t1) {
    return this._f$1($.$$index(t1, index));
  },
  get$length: function() {
    return $.length(this._list);
  }
};

$$.BenchmarkRunner = {"": "Object;_solveLoops,_steps,_benchmarks,_resultsWriter",
  setupBenchmarks$1: function(filter) {
    var t1, t2, benchmarks;
    t1 = this._solveLoops;
    t2 = this._steps;
    benchmarks = [$.BallDropBench$(t1, t2), $.BallCageBench$(t1, t2), $.CircleStressBench$(t1, t2), $.DominoPlatformBench$(t1, t2), $.DominoTowerBench$(t1, t2)];
    t1 = $.getInterceptor(filter);
    if (filter == null || t1.get$isEmpty(filter) === true)
      $.CONSTANT0.map$1(benchmarks, this.get$_addBenchmark());
    else
      $.mappedBy($.CONSTANT0.where$1(benchmarks, new $.BenchmarkRunner_setupBenchmarks_anon($.mappedBy(t1.split$1(filter, ","), new $.BenchmarkRunner_setupBenchmarks_anon0()))), this.get$_addBenchmark());
  },
  runBenchmarks$0: function() {
    var t1, t2, t3, t4;
    for (t1 = $.CONSTANT0.get$iterator(this._benchmarks), t2 = this._resultsWriter, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;) {
      t4 = t1.get$current();
      $.Primitives_printString("Running " + $.S(t4.get$name()));
      t3.clear$0(t2);
      t4.runBenchmark$1(t2);
      $.Primitives_printString($.S(t2) + "------------------------------------------------");
    }
  },
  _addBenchmark$1: function(benchmark) {
    return this._benchmarks.push(benchmark);
  },
  get$_addBenchmark: function() {
    return new $.BoundClosure$1(this, "_addBenchmark$1");
  }
};

$$.Benchmark = {"": "Object;bodies>",
  resetWorld$0: function() {
    this.bodies = $.List_List(0);
    this.world = $.World$($.Vector$(0, -10), true, $.DefaultWorldPool$());
  },
  _recordResults$4: function(time, resultsWriter, benchmarkIterations, steps) {
    var t1;
    if (typeof time !== "number")
      return this._recordResults$4$bailout(1, time, resultsWriter, benchmarkIterations, steps);
    if (typeof steps !== "number")
      return this._recordResults$4$bailout(1, time, resultsWriter, benchmarkIterations, steps);
    t1 = $.getInterceptor$JSArray(resultsWriter);
    t1.add$1(resultsWriter, this.get$name());
    t1.add$1(resultsWriter, " (" + $.S(steps) + " steps, " + $.S(benchmarkIterations) + " solve loops) : " + $.S(time) + " ms");
    t1.add$1(resultsWriter, "  (" + $.S(steps / (time / 1000)) + " steps/second)");
    t1.add$1(resultsWriter, "\n");
    t1.add$1(resultsWriter, "Checksum: " + $.S(this.get$checksum()));
    t1.add$1(resultsWriter, "\n\n");
  },
  _recordResults$4$bailout: function(state0, time, resultsWriter, benchmarkIterations, steps) {
    var t1 = $.getInterceptor$JSArray(resultsWriter);
    t1.add$1(resultsWriter, this.get$name());
    t1.add$1(resultsWriter, " (" + $.S(steps) + " steps, " + $.S(benchmarkIterations) + " solve loops) : " + $.S(time) + " ms");
    t1.add$1(resultsWriter, "  (" + $.S($.$$div(steps, $.$$div(time, 1000))) + " steps/second)");
    t1.add$1(resultsWriter, "\n");
    t1.add$1(resultsWriter, "Checksum: " + $.S(this.get$checksum()));
    t1.add$1(resultsWriter, "\n\n");
  },
  runBenchmark$1: function(resultsWriter) {
    var t1, t2, t3, t4, t5, t6, watch, i;
    for (t1 = $.iterator(this._steps), t2 = this.solveLoops, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;) {
      t4 = t1.get$current();
      if (typeof t4 !== "number")
        return this.runBenchmark$1$bailout(1, resultsWriter, t3, t2, t4, t1);
      for (t5 = t3.get$iterator(t2); t5.moveNext$0() === true;) {
        t6 = t5.get$current();
        this.initialize$0();
        watch = $.Stopwatch$();
        watch.start$0();
        for (i = 0; i < t4; ++i)
          this.world.step$3(0.016666666666666666, t6, t6);
        watch.stop$0();
        this._recordResults$4(watch.get$elapsedMilliseconds(), resultsWriter, t6, t4);
      }
    }
  },
  runBenchmark$1$bailout: function(state0, resultsWriter, t3, t2, t4, t1) {
    switch (state0) {
      case 0:
        t1 = $.iterator(this._steps);
        t2 = this.solveLoops;
        t3 = $.getInterceptor$JSArray(t2);
      case 1:
        var t5, t6, watch, i;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(t1.moveNext$0() === true))
                  break L0;
                t4 = t1.get$current();
              case 1:
                state0 = 0;
                for (t5 = t3.get$iterator(t2); t5.moveNext$0() === true;) {
                  t6 = t5.get$current();
                  this.initialize$0();
                  watch = $.Stopwatch$();
                  watch.start$0();
                  for (i = 0; $.CONSTANT5.$lt(i, t4); ++i)
                    this.world.step$3(0.016666666666666666, t6, t6);
                  watch.stop$0();
                  this._recordResults$4(watch.get$elapsedMilliseconds(), resultsWriter, t6, t4);
                }
            }
    }
  },
  get$checksum: function() {
    var positionSum, velocitySum, t1, t2;
    positionSum = $.Vector$(0, 0);
    velocitySum = $.Vector$(0, 0);
    for (t1 = $.iterator(this.bodies); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      positionSum.addLocal$1(t2.get$position());
      velocitySum.addLocal$1(t2.get$linearVelocity());
    }
    return $.$$add($.$$add($.$$add(positionSum.x, positionSum.y), velocitySum.x), velocitySum.y);
  }
};

$$.BallCageBench = {"": "Benchmark;bodies,world,solveLoops,_steps",
  get$name: function() {
    return "Ball Cage";
  },
  initialize$0: function() {
    var circleShape, circleFixtureDef, circleBodyDef, t1, borderLimitX, borderLimitY, i, shiftX, shiftY, circleBody, bouncingCircle, activeFixtureDef, activeBodyDef, activeBody;
    this.resetWorld$0();
    circleShape = $.CircleShape$();
    circleShape.radius = 2;
    circleFixtureDef = $.FixtureDef$();
    circleFixtureDef.shape = circleShape;
    circleFixtureDef.friction = 0.9;
    circleFixtureDef.restitution = 1;
    circleBodyDef = $.BodyDef$();
    t1 = circleShape.radius;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    borderLimitX = -20 + 20 * t1;
    borderLimitY = -20 + 20 * t1;
    for (i = 0; i < 10; ++i) {
      t1 = $.$$mul($.$$mul(circleShape.radius, 2), i);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      shiftX = -20 + t1;
      t1 = $.$$mul($.$$mul(circleShape.radius, 2), i);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      shiftY = -20 + t1;
      circleBodyDef.position = $.Vector$(shiftX, -20);
      circleBody = this.world.createBody$1(circleBodyDef);
      $.add(this.bodies, circleBody);
      circleBody.createFixture$1(circleFixtureDef);
      circleBodyDef.position = $.Vector$(shiftX, borderLimitY);
      circleBody = this.world.createBody$1(circleBodyDef);
      $.add(this.bodies, circleBody);
      circleBody.createFixture$1(circleFixtureDef);
      circleBodyDef.position = $.Vector$(-20, shiftY);
      circleBody = this.world.createBody$1(circleBodyDef);
      $.add(this.bodies, circleBody);
      circleBody.createFixture$1(circleFixtureDef);
      circleBodyDef.position = $.Vector$(borderLimitX, shiftY);
      circleBody = this.world.createBody$1(circleBodyDef);
      $.add(this.bodies, circleBody);
      circleBody.createFixture$1(circleFixtureDef);
    }
    bouncingCircle = $.CircleShape$();
    bouncingCircle.radius = 1;
    activeFixtureDef = $.FixtureDef$();
    activeFixtureDef.restitution = 1;
    activeFixtureDef.density = 0.05;
    activeFixtureDef.shape = bouncingCircle;
    activeBodyDef = $.BodyDef$();
    activeBodyDef.linearVelocity = $.Vector$(0, -20);
    activeBodyDef.position = $.Vector$(15, 15);
    activeBodyDef.type = 2;
    activeBodyDef.bullet = true;
    activeBody = this.world.createBody$1(activeBodyDef);
    $.add(this.bodies, activeBody);
    activeBody.createFixture$1(activeFixtureDef);
  }
};

$$.BallDropBench = {"": "Benchmark;bodies,world,solveLoops,_steps",
  initialize$0: function() {
    var fd, cd, bodyDef, ballBody;
    this.resetWorld$0();
    fd = $.FixtureDef$();
    cd = $.CircleShape$();
    cd.radius = 1;
    fd.shape = cd;
    bodyDef = $.BodyDef$();
    bodyDef.type = 2;
    bodyDef.position = $.Vector$(0, 0);
    ballBody = this.world.createBody$1(bodyDef);
    ballBody.createFixture$1(fd);
    $.add(this.bodies, ballBody);
  },
  get$name: function() {
    return "Ball Drop";
  }
};

$$.CircleStressBench = {"": "Benchmark;_joint,bodies,world,solveLoops,_steps",
  get$name: function() {
    return "Circle Stress";
  },
  initialize$0: function() {
    var bd, ground, shape, sd, b, fd, wallDef, rightWall, leftWall, cornerDef, myBod, topDef, topBody, body, i, cd, t1, t2, t3, t4, bodyDef, groundBody, rjd, j, yPos, circ, bod, fd2, myBody;
    this.resetWorld$0();
    bd = $.BodyDef$();
    ground = this.world.createBody$1(bd);
    $.add(this.bodies, ground);
    shape = $.PolygonShape$();
    shape.setAsEdge$2($.Vector$(-40, 0), $.Vector$(40, 0));
    ground.createFixtureFromShape$1(shape);
    sd = $.PolygonShape$();
    sd.setAsBox$2(50, 10);
    bd = $.BodyDef$();
    bd.type = 0;
    bd.position = $.Vector$(0, -10);
    b = this.world.createBody$1(bd);
    $.add(this.bodies, b);
    fd = $.FixtureDef$();
    fd.shape = sd;
    fd.friction = 1;
    b.createFixture$1(fd);
    sd.setAsBox$2(3, 50);
    wallDef = $.BodyDef$();
    wallDef.position = $.Vector$(45, 25);
    rightWall = this.world.createBody$1(wallDef);
    $.add(this.bodies, rightWall);
    rightWall.createFixtureFromShape$1(sd);
    wallDef.position = $.Vector$(-45, 25);
    leftWall = this.world.createBody$1(wallDef);
    $.add(this.bodies, leftWall);
    leftWall.createFixtureFromShape$1(sd);
    cornerDef = $.BodyDef$();
    sd.setAsBox$2(20, 3);
    cornerDef.angle = -0.7853981633974483;
    cornerDef.position = $.Vector$(-35, 8);
    myBod = this.world.createBody$1(cornerDef);
    $.add(this.bodies, myBod);
    myBod.createFixtureFromShape$1(sd);
    cornerDef.angle = 0.7853981633974483;
    cornerDef.position = $.Vector$(35, 8);
    myBod = this.world.createBody$1(cornerDef);
    $.add(this.bodies, myBod);
    myBod.createFixtureFromShape$1(sd);
    sd.setAsBox$2(50, 10);
    topDef = $.BodyDef$();
    topDef.type = 0;
    topDef.angle = 0;
    topDef.position = $.Vector$(0, 75);
    topBody = this.world.createBody$1(topDef);
    $.add(this.bodies, topBody);
    fd.shape = sd;
    fd.friction = 1;
    topBody.createFixture$1(fd);
    bd = $.BodyDef$();
    bd.type = 2;
    bd.position = $.Vector$(0, 10);
    body = this.world.createBody$1(bd);
    $.add(this.bodies, body);
    for (i = 0; i < 5; ++i) {
      fd = $.FixtureDef$();
      cd = $.CircleShape$();
      cd.radius = 1.2;
      fd.shape = cd;
      fd.density = 25;
      fd.friction = 0.1;
      fd.restitution = 0.9;
      t1 = $.CONSTANT5.toDouble$0(5);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = Math.cos($.checkNum(6.283185307179586 * (i / t1)));
      t3 = $.CONSTANT5.toDouble$0(5);
      if (typeof t3 !== "number")
        throw $.iae(t3);
      t4 = Math.sin($.checkNum(6.283185307179586 * (i / t3)));
      cd.position.setCoords$2(6 * t2, 6 * t4);
      body.createFixture$1(fd);
    }
    body.set$bullet(false);
    bodyDef = $.BodyDef$();
    groundBody = this.world.createBody$1(bodyDef);
    rjd = $.RevoluteJointDef$();
    rjd.initialize$3(body, groundBody, body.get$position());
    rjd.motorSpeed = 3.141592653589793;
    rjd.maxMotorTorque = 1000000;
    rjd.enableMotor = true;
    this._joint = this.world.createJoint$1(rjd);
    for (j = 0; j < 8; ++j)
      for (yPos = 50 + j, i = 0; i < 20; ++i) {
        circ = $.CircleShape$();
        bod = $.BodyDef$();
        bod.type = 2;
        circ.radius = 1 + ($.CONSTANT5.$mod(i, 2) === 0 ? 1 : -1) * 0.5 * 0.75;
        fd2 = $.FixtureDef$();
        fd2.shape = circ;
        fd2.density = $.$$mul(circ.radius, 1.5);
        fd2.friction = 0.5;
        fd2.restitution = 0.7;
        bod.position = $.Vector$(-39 + 2 * i, yPos);
        myBody = this.world.createBody$1(bod);
        $.add(this.bodies, myBody);
        myBody.createFixture$1(fd2);
      }
  }
};

$$.DominoPlatformBench = {"": "Benchmark;bodies,world,solveLoops,_steps",
  get$name: function() {
    return "Domino Platforms";
  },
  initialize$0: function() {
    var fd, sd, bd, body, i, t1, t2, t3, j, t4, myBody;
    this.resetWorld$0();
    fd = $.FixtureDef$();
    sd = $.PolygonShape$();
    sd.setAsBox$2(50, 10);
    fd.shape = sd;
    bd = $.BodyDef$();
    bd.position = $.Vector$(0, -10);
    body = this.world.createBody$1(bd);
    body.createFixture$1(fd);
    $.add(this.bodies, body);
    for (i = 0; i < 4; ++i) {
      fd = $.FixtureDef$();
      sd = $.PolygonShape$();
      sd.setAsBox$2(15, 0.125);
      fd.shape = sd;
      bd = $.BodyDef$();
      bd.position = $.Vector$(0, 5 + 5 * i);
      body = this.world.createBody$1(bd);
      body.createFixture$1(fd);
      $.add(this.bodies, body);
    }
    fd = $.FixtureDef$();
    sd = $.PolygonShape$();
    sd.setAsBox$2(0.125, 2);
    fd.shape = sd;
    fd.density = 25;
    bd = $.BodyDef$();
    bd.type = 2;
    for (i = 0; i < 4; ++i)
      for (t1 = i === 2, t2 = 7.3 + 5 * i, t3 = i === 3, j = 0; j < 25; ++j) {
        fd.friction = 0.5;
        bd.position = $.Vector$(-14.75 + j * 1.2291666666666667, t2);
        if (t1 && j === 0) {
          bd.angle = -0.1;
          t4 = bd.position;
          t4.x = $.$$add(t4.x, 0.1);
        } else if (t3 && j === 24) {
          bd.angle = 0.1;
          t4 = bd.position;
          t4.x = $.$$sub(t4.x, 0.1);
        } else
          bd.angle = 0;
        myBody = this.world.createBody$1(bd);
        myBody.createFixture$1(fd);
        $.add(this.bodies, myBody);
      }
  }
};

$$.DominoTowerBench = {"": "Benchmark;dominoDensity,bodies,world,solveLoops,_steps",
  get$name: function() {
    return "Domino Tower";
  },
  makeDomino$4: function(x, y, horizontal, world_) {
    var sd, fd, bd, myBody;
    sd = $.PolygonShape$();
    sd.setAsBox$2(0.1, 0.5);
    fd = $.FixtureDef$();
    fd.shape = sd;
    fd.density = this.dominoDensity;
    bd = $.BodyDef$();
    bd.type = 2;
    fd.friction = 0.1;
    fd.restitution = 0.65;
    bd.position = $.Vector$(x, y);
    bd.angle = horizontal ? 1.5707963267948966 : 0;
    myBody = world_.createBody$1(bd);
    myBody.createFixture$1(fd);
    $.add(this.bodies, myBody);
  },
  initialize$0: function() {
    var sd, bd, body, fd, b, i, currX, j, currY, t1, t2, t3, t4, t5, t6;
    this.resetWorld$0();
    sd = $.PolygonShape$();
    sd.setAsBox$2(50, 10);
    bd = $.BodyDef$();
    bd.position = $.Vector$(0, -10);
    body = this.world.createBody$1(bd);
    body.createFixtureFromShape$1(sd);
    $.add(this.bodies, body);
    this.dominoDensity = 10;
    sd = $.PolygonShape$();
    sd.setAsBox$2(0.7, 0.7);
    fd = $.FixtureDef$();
    fd.density = 35;
    bd = $.BodyDef$();
    bd.type = 2;
    fd.shape = sd;
    fd.friction = 0;
    fd.restitution = 0.85;
    bd.bullet = true;
    bd.position = $.Vector$(30, 50);
    b = this.world.createBody$1(bd);
    $.add(this.bodies, b);
    b.createFixture$1(fd);
    b.set$linearVelocity($.Vector$(-25, -25));
    b.set$angularVelocity(6.7);
    fd.density = 25;
    bd.position = $.Vector$(-30, 25);
    b = this.world.createBody$1(bd);
    $.add(this.bodies, b);
    b.createFixture$1(fd);
    b.set$linearVelocity($.Vector$(35, -10));
    b.set$angularVelocity(-8.3);
    for (i = 0; i < 25; ++i) {
      currX = i * 1.5 * 1 - 18.75;
      this.makeDomino$4(currX, 0.5, false, this.world);
      this.makeDomino$4(currX, 1.1, true, this.world);
    }
    for (currX = 18.75, j = 1; j < 25; ++j) {
      if (j > 3)
        this.dominoDensity = $.$$mul(this.dominoDensity, 0.8);
      currY = 0.5 + 1.386 * j;
      for (t1 = currY + 0.6, t2 = currY - 0.6, t3 = currY - 0.2, t4 = 25 - j, t5 = t4 - 1, t6 = 1.5 * t4 / 2, i = 0; i < t4; ++i) {
        currX = i * 1.5 * 1 - t6;
        this.dominoDensity = $.$$mul(this.dominoDensity, 2.5);
        if (i === 0)
          this.makeDomino$4(currX - 1.25 + 0.1, t3, false, this.world);
        if (i === t5)
          this.makeDomino$4(currX + 1.25 - 0.1, t3, false, this.world);
        this.dominoDensity = $.$$div(this.dominoDensity, 2.5);
        this.makeDomino$4(currX, currY, false, this.world);
        this.makeDomino$4(currX, t1, true, this.world);
        this.makeDomino$4(currX, t2, true, this.world);
      }
    }
  }
};

$$.ArgParser = {"": "Object;_options,_optionNames,_args,_liblib4$_current",
  addOption$8$abbr$allowMultiple$allowed$allowedHelp$callback$defaultsTo$help: function($name, abbr, allowMultiple, allowed, allowedHelp, callback, defaultsTo, help) {
    this._addOption$9$allowMultiple$isFlag($name, abbr, help, allowed, allowedHelp, defaultsTo, callback, allowMultiple, false);
  },
  addOption$2$abbr: function(name, abbr) {
    return this.addOption$8$abbr$allowMultiple$allowed$allowedHelp$callback$defaultsTo$help(name, abbr, false, null, null, null, null, null);
  },
  _addOption$10$allowMultiple$isFlag$negatable: function($name, abbr, help, allowed, allowedHelp, defaultsTo, callback, allowMultiple, isFlag, negatable) {
    var t1, existing;
    t1 = this._options;
    if (t1.containsKey$1($name) === true)
      throw $.$$throw($.ArgumentError$("Duplicate option \"" + $.S($name) + "\"."));
    if (!(abbr == null)) {
      if ($.$$gt($.length(abbr), 1) === true)
        throw $.$$throw($.ArgumentError$("Abbreviation \"" + $.S(abbr) + "\" is longer than one character."));
      existing = this._findByAbbr$1(abbr);
      if (!(existing == null))
        throw $.$$throw($.ArgumentError$("Abbreviation \"" + $.S(abbr) + "\" is already used by \"" + $.S(existing.get$name()) + "\"."));
    }
    t1.$indexSet($name, $._Option$($name, abbr, help, allowed, allowedHelp, defaultsTo, callback, allowMultiple, isFlag, negatable));
    this._optionNames.push($name);
  },
  _addOption$9$allowMultiple$isFlag: function(name, abbr, help, allowed, allowedHelp, defaultsTo, callback, allowMultiple, isFlag) {
    return this._addOption$10$allowMultiple$isFlag$negatable(name, abbr, help, allowed, allowedHelp, defaultsTo, callback, allowMultiple, isFlag, false);
  },
  _findByAbbr$1: function(abbr) {
    var t1, t2;
    for (t1 = $.iterator(this._options.get$values()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if ($.$$eq(t2.get$abbreviation(), abbr) === true)
        return t2;
    }
    return;
  }
};

$$._Option = {"": "Object;name>,abbreviation>,allowed,defaultValue,callback,help,allowedHelp,isFlag,negatable,allowMultiple"};

$$.ContactFilter = {"": "Object;",
  shouldCollide$2: function(fixtureA, fixtureB) {
    var filterA, filterB, t1, t3, t5;
    filterA = fixtureA.get$filter();
    filterB = fixtureB.get$filter();
    t1 = filterA.get$groupIndex();
    if (typeof t1 !== "number")
      return this.shouldCollide$2$bailout(1, t1, filterA, filterB);
    if (!(t1 === 0) && t1 === filterB.get$groupIndex()) {
      t1 = filterA.get$groupIndex();
      if (typeof t1 !== "number")
        return this.shouldCollide$2$bailout(2, t1);
      return t1 > 0;
    }
    t1 = filterA.get$maskBits();
    t3 = filterB.get$categoryBits();
    if (t1 !== (t1 | 0))
      return this.shouldCollide$2$bailout(3, t1, filterA, filterB);
    if (t3 !== (t3 | 0))
      return this.shouldCollide$2$bailout(4, t1, filterA, filterB, t3);
    if ((t1 & t3) >>> 0 !== 0) {
      t1 = filterA.get$categoryBits();
      t3 = filterB.get$maskBits();
      if (t1 !== (t1 | 0))
        return this.shouldCollide$2$bailout(5, t1, 0, filterB);
      if (t3 !== (t3 | 0))
        return this.shouldCollide$2$bailout(6, t1, 0, 0, t3);
      t5 = (t1 & t3) >>> 0 !== 0;
      t1 = t5;
    } else
      t1 = false;
    return t1;
  },
  shouldCollide$2$bailout: function(state0, t1, filterA, filterB, t3) {
    switch (state0) {
      case 0:
        filterA = fixtureA.get$filter();
        filterB = fixtureB.get$filter();
        t1 = filterA.get$groupIndex();
      case 1:
        state0 = 0;
      case 2:
        if (state0 === 2 || state0 === 0 && $.$$eq(t1, 0) !== true && $.$$eq(filterA.get$groupIndex(), filterB.get$groupIndex()) === true)
          switch (state0) {
            case 0:
              t1 = filterA.get$groupIndex();
            case 2:
              state0 = 0;
              return $.$$gt(t1, 0);
          }
        t1 = filterA.get$maskBits();
      case 3:
        state0 = 0;
        t3 = filterB.get$categoryBits();
      case 4:
        state0 = 0;
      default:
        var t5;
        if (state0 === 6 || state0 === 5 || state0 === 0 && $.$$eq($.$$and(t1, t3), 0) !== true)
          switch (state0) {
            case 0:
              t1 = filterA.get$categoryBits();
            case 5:
              state0 = 0;
              t3 = filterB.get$maskBits();
            case 6:
              state0 = 0;
              t5 = $.$$eq($.$$and(t1, t3), 0) !== true;
              t1 = t5;
          }
        else
          t1 = false;
        return t1;
    }
  }
};

$$.ContactImpulse = {"": "Object;normalImpulses>,tangentImpulses>"};

$$.AxisAlignedBox = {"": "Object;lowerBound>,upperBound>",
  setFromCombination$2: function(boxOne, boxTwo) {
    var t1 = $.min(boxOne.get$lowerBound().get$x(), boxTwo.get$lowerBound().get$x());
    this.lowerBound.set$x(t1);
    t1 = $.min(boxOne.get$lowerBound().get$y(), boxTwo.get$lowerBound().get$y());
    this.lowerBound.set$y(t1);
    t1 = $.max(boxOne.get$upperBound().get$x(), boxTwo.get$upperBound().get$x());
    this.upperBound.set$x(t1);
    t1 = $.max(boxOne.get$upperBound().get$y(), boxTwo.get$upperBound().get$y());
    this.upperBound.set$y(t1);
  },
  get$center: function() {
    var c = $.Vector$copy(this.lowerBound);
    c.addLocal$1(this.upperBound);
    c.mulLocal$1(0.5);
    return c;
  },
  contains$1: function(aabb) {
    var t1, t2, t4, t5;
    t1 = this.lowerBound;
    t2 = t1.get$x();
    t4 = aabb.get$lowerBound();
    t5 = t4.get$x();
    if (typeof t2 !== "number")
      return this.contains$1$bailout(1, aabb, t2);
    if (typeof t5 !== "number")
      return this.contains$1$bailout(2, aabb, t2, t5);
    if (t2 > t5) {
      t1 = t1.get$y();
      t4 = t4.get$y();
      if (typeof t1 !== "number")
        return this.contains$1$bailout(3, aabb, t1);
      if (typeof t4 !== "number")
        return this.contains$1$bailout(4, aabb, t1, t4);
      if (t1 > t4) {
        t1 = this.upperBound;
        t2 = t1.get$y();
        t4 = aabb.get$upperBound();
        t5 = t4.get$y();
        if (typeof t2 !== "number")
          return this.contains$1$bailout(5, aabb, t2);
        if (typeof t5 !== "number")
          return this.contains$1$bailout(6, aabb, t2, t5);
        if (t2 < t5) {
          t1 = t1.get$x();
          t4 = t4.get$x();
          if (typeof t1 !== "number")
            return this.contains$1$bailout(7, aabb, t1);
          if (typeof t4 !== "number")
            return this.contains$1$bailout(8, 0, t1, t4);
          t4 = t1 < t4;
          t1 = t4;
        } else
          t1 = false;
      } else
        t1 = false;
    } else
      t1 = false;
    return t1;
  },
  contains$1$bailout: function(state0, aabb, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.lowerBound.get$x();
      case 1:
        state0 = 0;
        t3 = aabb.get$lowerBound().get$x();
      case 2:
        state0 = 0;
      default:
        var t5;
        if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.$$gt(t1, t3) === true)
          switch (state0) {
            case 0:
              t1 = this.lowerBound.get$y();
            case 3:
              state0 = 0;
              t3 = aabb.get$lowerBound().get$y();
            case 4:
              state0 = 0;
            default:
              if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.$$gt(t1, t3) === true)
                switch (state0) {
                  case 0:
                    t1 = this.upperBound.get$y();
                  case 5:
                    state0 = 0;
                    t3 = aabb.get$upperBound().get$y();
                  case 6:
                    state0 = 0;
                  default:
                    if (state0 === 8 || state0 === 7 || state0 === 0 && $.$$lt(t1, t3) === true)
                      switch (state0) {
                        case 0:
                          t1 = this.upperBound.get$x();
                        case 7:
                          state0 = 0;
                          t3 = aabb.get$upperBound().get$x();
                        case 8:
                          state0 = 0;
                          t5 = $.$$lt(t1, t3) === true;
                          t1 = t5;
                      }
                    else
                      t1 = false;
                }
              else
                t1 = false;
          }
        else
          t1 = false;
        return t1;
    }
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  setFrom$1: function(other) {
    this.lowerBound.setFrom$1(other.get$lowerBound());
    this.upperBound.setFrom$1(other.get$upperBound());
  },
  toString$0: function() {
    return $.S(this.lowerBound) + ", " + $.S(this.upperBound);
  },
  AxisAlignedBox$2: function(lowerBound, upperBound) {
    if (this.lowerBound == null)
      this.lowerBound = $.Vector$(0, 0);
    if (this.upperBound == null)
      this.upperBound = $.Vector$(0, 0);
  }
};

$$.Collision = {"": "Object;_pool,cache,input,output,results1,results2,incidentEdge>,localTangent,localNormal>,planePoint,tangent,normal>,normal1,v11,v12,clipPoints1,clipPoints2",
  testOverlap$4: function(shapeA, shapeB, transformA, transformB) {
    var t1, t2, t3, t4;
    t1 = this.input;
    t1.proxyA.setFromShape$1(shapeA);
    t1.proxyB.setFromShape$1(shapeB);
    t1.transformA.setFrom$1(transformA);
    t1.transformB.setFrom$1(transformB);
    t1.useRadii = true;
    t2 = this.cache;
    t2.count = 0;
    t3 = this._pool.distance;
    t4 = this.output;
    t3.distance$3(t4, t2, t1);
    return $.$$lt(t4.distance, 0.000001192);
  },
  collideCircles$5: function(manifold, circle1, xfA, circle2, xfB) {
    var v, pAy, pAx, v1, pBy, dx, dy, distSqr, radius;
    manifold.set$pointCount(0);
    v = circle1.get$position();
    pAy = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), v.get$y()));
    pAx = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), v.get$y()));
    v1 = circle2.get$position();
    pBy = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v1.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v1.get$y()));
    dx = $.$$sub($.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v1.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v1.get$y())), pAx);
    dy = $.$$sub(pBy, pAy);
    distSqr = $.$$add($.$$mul(dx, dx), $.$$mul(dy, dy));
    radius = $.$$add(circle1.get$radius(), circle2.get$radius());
    if ($.$$gt(distSqr, $.$$mul(radius, radius)) === true)
      return;
    manifold.set$type(0);
    manifold.get$localPoint().setFrom$1(circle1.get$position());
    manifold.get$localNormal().setZero$0();
    manifold.set$pointCount(1);
    $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle2.get$position());
    $.$$index(manifold.get$points(), 0).get$id().zero$0();
  },
  collidePolygonAndCircle$5: function(manifold, polygon, xfA, circle, xfB) {
    var v, cy, v1x, v1y, t1, b, b1, t2, cLocaly, cLocalx, radius, vertexCount, vertices, normals, normalIndex, separation, i, vertex, norm, s, vertIndex2, v1, v2, mpoint, temp2X, temp2Y, t3, t4, temp4X, temp4Y, dx, dy, fcx, fcy;
    manifold.set$pointCount(0);
    v = circle.get$position();
    cy = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v.get$y()));
    v1x = $.$$sub($.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v.get$y())), xfA.get$position().get$x());
    v1y = $.$$sub(cy, xfA.get$position().get$y());
    t1 = xfA.get$rotation();
    b = t1.get$col1();
    b1 = t1.get$col2();
    t1 = $.getInterceptor$JSNumber(v1x);
    t2 = $.getInterceptor$JSNumber(v1y);
    cLocaly = $.$$add(t1.$mul(v1x, b1.get$x()), t2.$mul(v1y, b1.get$y()));
    if (typeof cLocaly !== "number")
      return this.collidePolygonAndCircle$5$bailout(1, manifold, polygon, v1y, circle, cLocaly, v1x, b, t1, t2);
    cLocalx = $.$$add(t1.$mul(v1x, b.get$x()), t2.$mul(v1y, b.get$y()));
    if (typeof cLocalx !== "number")
      return this.collidePolygonAndCircle$5$bailout(2, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx);
    radius = $.$$add(polygon.get$radius(), circle.get$radius());
    if (typeof radius !== "number")
      return this.collidePolygonAndCircle$5$bailout(3, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius);
    vertexCount = polygon.get$vertexCount();
    if (typeof vertexCount !== "number")
      return this.collidePolygonAndCircle$5$bailout(4, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius, vertexCount);
    vertices = polygon.get$vertices();
    if (typeof vertices !== "string" && (typeof vertices !== "object" || vertices === null || vertices.constructor !== Array && !vertices.$isJavaScriptIndexingBehavior))
      return this.collidePolygonAndCircle$5$bailout(5, manifold, polygon, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius, vertexCount, vertices);
    normals = polygon.get$normals();
    if (typeof normals !== "string" && (typeof normals !== "object" || normals === null || normals.constructor !== Array && !normals.$isJavaScriptIndexingBehavior))
      return this.collidePolygonAndCircle$5$bailout(6, manifold, 0, 0, circle, cLocaly, 0, 0, 0, 0, cLocalx, radius, vertexCount, vertices, normals);
    for (normalIndex = 0, separation = 1e-12, i = 0; i < vertexCount; ++i) {
      if (i >= vertices.length)
        throw $.ioore(i);
      vertex = vertices[i];
      t1 = vertex.get$x();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = vertex.get$y();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (i >= normals.length)
        throw $.ioore(i);
      norm = normals[i];
      s = $.$$add($.$$mul(norm.get$x(), cLocalx - t1), $.$$mul(norm.get$y(), cLocaly - t2));
      t1 = $.getInterceptor$JSNumber(s);
      if (t1.$gt(s, radius) === true)
        return;
      if (t1.$gt(s, separation) === true) {
        separation = s;
        normalIndex = i;
      }
    }
    vertIndex2 = normalIndex + 1;
    vertIndex2 = vertIndex2 < vertexCount ? vertIndex2 : 0;
    t1 = vertices.length;
    if (normalIndex < 0 || normalIndex >= t1)
      throw $.ioore(normalIndex);
    v1 = vertices[normalIndex];
    if (vertIndex2 < 0 || vertIndex2 >= t1)
      throw $.ioore(vertIndex2);
    v2 = vertices[vertIndex2];
    if ($.$$lt(separation, 1.192e-7) === true) {
      manifold.set$pointCount(1);
      manifold.set$type(1);
      if (normalIndex >= normals.length)
        throw $.ioore(normalIndex);
      norm = normals[normalIndex];
      t1 = norm.get$x();
      manifold.get$localNormal().set$x(t1);
      t1 = norm.get$y();
      manifold.get$localNormal().set$y(t1);
      t1 = $.$$mul($.$$add(v1.get$x(), v2.get$x()), 0.5);
      manifold.get$localPoint().set$x(t1);
      t1 = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
      manifold.get$localPoint().set$y(t1);
      mpoint = $.$$index(manifold.get$points(), 0);
      t1 = circle.get$position().get$x();
      mpoint.get$localPoint().set$x(t1);
      t1 = circle.get$position().get$y();
      mpoint.get$localPoint().set$y(t1);
      mpoint.get$id().zero$0();
      return;
    }
    t1 = v1.get$x();
    if (typeof t1 !== "number")
      throw $.iae(t1);
    t2 = v1.get$y();
    if (typeof t2 !== "number")
      throw $.iae(t2);
    temp2X = $.$$sub(v2.get$x(), t1);
    temp2Y = $.$$sub(v2.get$y(), v1.get$y());
    if (typeof temp2X !== "number")
      throw $.iae(temp2X);
    if (typeof temp2Y !== "number")
      throw $.iae(temp2Y);
    t3 = v2.get$x();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = v2.get$y();
    if (typeof t4 !== "number")
      throw $.iae(t4);
    temp4X = $.$$sub(v1.get$x(), t3);
    temp4Y = $.$$sub(v1.get$y(), v2.get$y());
    if (typeof temp4X !== "number")
      throw $.iae(temp4X);
    if (typeof temp4Y !== "number")
      throw $.iae(temp4Y);
    if ((cLocalx - t1) * temp2X + (cLocaly - t2) * temp2Y <= 0) {
      t1 = v1.get$x();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      dx = cLocalx - t1;
      t1 = v1.get$y();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      dy = cLocaly - t1;
      if (dx * dx + dy * dy > radius * radius)
        return;
      manifold.set$pointCount(1);
      manifold.set$type(1);
      t1 = v1.get$x();
      if (typeof t1 !== "number")
        throw $.iae(t1);
      manifold.get$localNormal().set$x(cLocalx - t1);
      t2 = v1.get$y();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      manifold.get$localNormal().set$y(cLocaly - t2);
      manifold.get$localNormal().normalize$0();
      manifold.get$localPoint().setFrom$1(v1);
      $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
      $.$$index(manifold.get$points(), 0).get$id().zero$0();
    } else {
      t1 = v2.get$x();
      if ((cLocalx - t3) * temp4X + (cLocaly - t4) * temp4Y <= 0) {
        if (typeof t1 !== "number")
          throw $.iae(t1);
        dx = cLocalx - t1;
        t1 = v2.get$y();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        dy = cLocaly - t1;
        if (dx * dx + dy * dy > radius * radius)
          return;
        manifold.set$pointCount(1);
        manifold.set$type(1);
        t1 = v2.get$x();
        if (typeof t1 !== "number")
          throw $.iae(t1);
        manifold.get$localNormal().set$x(cLocalx - t1);
        t2 = v2.get$y();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        manifold.get$localNormal().set$y(cLocaly - t2);
        manifold.get$localNormal().normalize$0();
        manifold.get$localPoint().setFrom$1(v2);
        $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
        $.$$index(manifold.get$points(), 0).get$id().zero$0();
      } else {
        fcx = $.$$mul($.$$add(v1.get$x(), t1), 0.5);
        fcy = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
        if (typeof fcx !== "number")
          throw $.iae(fcx);
        if (typeof fcy !== "number")
          throw $.iae(fcy);
        if (normalIndex >= normals.length)
          throw $.ioore(normalIndex);
        norm = normals[normalIndex];
        t2 = norm.get$x();
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t3 = norm.get$y();
        if (typeof t3 !== "number")
          throw $.iae(t3);
        if ((cLocalx - fcx) * t2 + (cLocaly - fcy) * t3 > radius)
          return;
        manifold.set$pointCount(1);
        manifold.set$type(1);
        t1 = manifold.get$localNormal();
        if (normalIndex >= normals.length)
          throw $.ioore(normalIndex);
        t1.setFrom$1(normals[normalIndex]);
        manifold.get$localPoint().set$x(fcx);
        manifold.get$localPoint().set$y(fcy);
        $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
        $.$$index(manifold.get$points(), 0).get$id().zero$0();
      }
    }
  },
  collidePolygonAndCircle$5$bailout: function(state0, manifold, polygon, v1y, circle, cLocaly, v1x, b, t1, t2, cLocalx, radius, vertexCount, vertices, normals) {
    switch (state0) {
      case 0:
        manifold.set$pointCount(0);
        v = circle.get$position();
        cy = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v.get$y()));
        v1x = $.$$sub($.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v.get$y())), xfA.get$position().get$x());
        v1y = $.$$sub(cy, xfA.get$position().get$y());
        t1 = xfA.get$rotation();
        b = t1.get$col1();
        b1 = t1.get$col2();
        t1 = $.getInterceptor$JSNumber(v1x);
        t2 = $.getInterceptor$JSNumber(v1y);
        cLocaly = $.$$add(t1.$mul(v1x, b1.get$x()), t2.$mul(v1y, b1.get$y()));
      case 1:
        state0 = 0;
        cLocalx = $.$$add(t1.$mul(v1x, b.get$x()), t2.$mul(v1y, b.get$y()));
      case 2:
        state0 = 0;
        radius = $.$$add(polygon.get$radius(), circle.get$radius());
      case 3:
        state0 = 0;
        vertexCount = polygon.get$vertexCount();
      case 4:
        state0 = 0;
        vertices = polygon.get$vertices();
      case 5:
        state0 = 0;
        normals = polygon.get$normals();
      case 6:
        var v, cy, b1, t3, t4, normalIndex, separation, i, vertex, tempx, tempy, norm, s, t5, vertIndex2, v1, v2, mpoint, tempX, tempY, temp2X, temp2Y, u1, temp3X, temp3Y, temp4X, temp4Y, u2, dx, dy, fcx, fcy, tx, ty;
        state0 = 0;
        for (t1 = $.getInterceptor$JSArrayJSString(vertices), t2 = $.getInterceptor$JSNumber(cLocalx), t3 = $.getInterceptor$JSNumber(cLocaly), t4 = $.getInterceptor$JSArrayJSString(normals), normalIndex = 0, separation = 1e-12, i = 0; $.CONSTANT5.$lt(i, vertexCount); ++i) {
          vertex = t1.$index(vertices, i);
          tempx = t2.$sub(cLocalx, vertex.get$x());
          tempy = t3.$sub(cLocaly, vertex.get$y());
          norm = t4.$index(normals, i);
          s = $.$$add($.$$mul(norm.get$x(), tempx), $.$$mul(norm.get$y(), tempy));
          t5 = $.getInterceptor$JSNumber(s);
          if (t5.$gt(s, radius) === true)
            return;
          if (t5.$gt(s, separation) === true) {
            separation = s;
            normalIndex = i;
          }
        }
        vertIndex2 = normalIndex + 1;
        vertIndex2 = $.CONSTANT5.$lt(vertIndex2, vertexCount) ? vertIndex2 : 0;
        v1 = t1.$index(vertices, normalIndex);
        v2 = t1.$index(vertices, vertIndex2);
        if ($.$$lt(separation, 1.192e-7) === true) {
          manifold.set$pointCount(1);
          manifold.set$type(1);
          norm = t4.$index(normals, normalIndex);
          t1 = norm.get$x();
          manifold.get$localNormal().set$x(t1);
          t1 = norm.get$y();
          manifold.get$localNormal().set$y(t1);
          t1 = $.$$mul($.$$add(v1.get$x(), v2.get$x()), 0.5);
          manifold.get$localPoint().set$x(t1);
          t1 = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
          manifold.get$localPoint().set$y(t1);
          mpoint = $.$$index(manifold.get$points(), 0);
          t1 = circle.get$position().get$x();
          mpoint.get$localPoint().set$x(t1);
          t1 = circle.get$position().get$y();
          mpoint.get$localPoint().set$y(t1);
          mpoint.get$id().zero$0();
          return;
        }
        tempX = t2.$sub(cLocalx, v1.get$x());
        tempY = t3.$sub(cLocaly, v1.get$y());
        temp2X = $.$$sub(v2.get$x(), v1.get$x());
        temp2Y = $.$$sub(v2.get$y(), v1.get$y());
        u1 = $.$$add($.$$mul(tempX, temp2X), $.$$mul(tempY, temp2Y));
        temp3X = t2.$sub(cLocalx, v2.get$x());
        temp3Y = t3.$sub(cLocaly, v2.get$y());
        temp4X = $.$$sub(v1.get$x(), v2.get$x());
        temp4Y = $.$$sub(v1.get$y(), v2.get$y());
        u2 = $.$$add($.$$mul(temp3X, temp4X), $.$$mul(temp3Y, temp4Y));
        if ($.$$le(u1, 0) === true) {
          dx = t2.$sub(cLocalx, v1.get$x());
          dy = t3.$sub(cLocaly, v1.get$y());
          if ($.$$gt($.$$add($.$$mul(dx, dx), $.$$mul(dy, dy)), $.$$mul(radius, radius)) === true)
            return;
          manifold.set$pointCount(1);
          manifold.set$type(1);
          t1 = t2.$sub(cLocalx, v1.get$x());
          manifold.get$localNormal().set$x(t1);
          t3 = t3.$sub(cLocaly, v1.get$y());
          manifold.get$localNormal().set$y(t3);
          manifold.get$localNormal().normalize$0();
          manifold.get$localPoint().setFrom$1(v1);
          $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
          $.$$index(manifold.get$points(), 0).get$id().zero$0();
        } else {
          t1 = $.$$le(u2, 0);
          t5 = v2.get$x();
          if (t1 === true) {
            dx = t2.$sub(cLocalx, t5);
            dy = t3.$sub(cLocaly, v2.get$y());
            if ($.$$gt($.$$add($.$$mul(dx, dx), $.$$mul(dy, dy)), $.$$mul(radius, radius)) === true)
              return;
            manifold.set$pointCount(1);
            manifold.set$type(1);
            t1 = t2.$sub(cLocalx, v2.get$x());
            manifold.get$localNormal().set$x(t1);
            t3 = t3.$sub(cLocaly, v2.get$y());
            manifold.get$localNormal().set$y(t3);
            manifold.get$localNormal().normalize$0();
            manifold.get$localPoint().setFrom$1(v2);
            $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
            $.$$index(manifold.get$points(), 0).get$id().zero$0();
          } else {
            fcx = $.$$mul($.$$add(v1.get$x(), t5), 0.5);
            fcy = $.$$mul($.$$add(v1.get$y(), v2.get$y()), 0.5);
            tx = t2.$sub(cLocalx, fcx);
            ty = t3.$sub(cLocaly, fcy);
            norm = t4.$index(normals, normalIndex);
            if ($.$$gt($.$$add($.$$mul(tx, norm.get$x()), $.$$mul(ty, norm.get$y())), radius) === true)
              return;
            manifold.set$pointCount(1);
            manifold.set$type(1);
            manifold.get$localNormal().setFrom$1(t4.$index(normals, normalIndex));
            manifold.get$localPoint().set$x(fcx);
            manifold.get$localPoint().set$y(fcy);
            $.$$index(manifold.get$points(), 0).get$localPoint().setFrom$1(circle.get$position());
            $.$$index(manifold.get$points(), 0).get$id().zero$0();
          }
        }
    }
  },
  edgeSeparation$5: function(poly1, xf1, edge1, poly2, xf2) {
    var vertices1, normals1, count2, vertices2, R, v, t5, t6, t8, t10, t11, t13, normal1Worldy, normal1Worldx, R1, t15, normal1x, t18, normal1y, t2, t3, index, minDot, i, a, t4, dot, v3, t7, t9, v1y, t14, t16, t20, v1x, v4, t23, t25, t27, t29, v2y, t31, t33, t35, t37, t39;
    poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    if (typeof count2 !== "number")
      return this.edgeSeparation$5$bailout(3, 0, xf1, edge1, poly2, xf2, vertices1, normals1, count2);
    vertices2 = poly2.get$vertices();
    if (typeof vertices2 !== "string" && (typeof vertices2 !== "object" || vertices2 === null || vertices2.constructor !== Array && !vertices2.$isJavaScriptIndexingBehavior))
      return this.edgeSeparation$5$bailout(4, 0, xf1, edge1, 0, xf2, vertices1, normals1, count2, vertices2);
    R = xf1.get$rotation();
    if (typeof normals1 !== "string" && (typeof normals1 !== "object" || normals1 === null || normals1.constructor !== Array && !normals1.$isJavaScriptIndexingBehavior))
      return this.edgeSeparation$5$bailout(2, 0, xf1, edge1, poly2, xf2, vertices1, normals1);
    if (edge1 !== (edge1 | 0))
      throw $.iae(edge1);
    if (edge1 < 0 || edge1 >= normals1.length)
      throw $.ioore(edge1);
    v = normals1[edge1];
    t5 = R.get$col1();
    t6 = t5.get$y();
    t8 = v.get$x();
    if (t6 !== (t6 | 0))
      return this.edgeSeparation$5$bailout(5, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t6, R);
    if (t8 !== (t8 | 0))
      return this.edgeSeparation$5$bailout(6, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t6, R, t8);
    t6 *= t8;
    t10 = R.get$col2();
    t11 = t10.get$y();
    t13 = v.get$y();
    if (t11 !== (t11 | 0))
      return this.edgeSeparation$5$bailout(7, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t11, R, t6);
    if (t13 !== (t13 | 0))
      return this.edgeSeparation$5$bailout(8, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, t11, R, t6, t13);
    normal1Worldy = t6 + t11 * t13;
    t5 = t5.get$x();
    if (t5 !== (t5 | 0))
      return this.edgeSeparation$5$bailout(9, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, 0, R, t5, 0, normal1Worldy);
    t8 = t5 * t8;
    t10 = t10.get$x();
    if (t10 !== (t10 | 0))
      return this.edgeSeparation$5$bailout(11, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, v, 0, R, t10, 0, normal1Worldy, t8);
    normal1Worldx = t8 + t10 * t13;
    R1 = xf2.get$rotation();
    t8 = R1.get$col1();
    t15 = t8.get$x();
    if (t15 !== (t15 | 0))
      return this.edgeSeparation$5$bailout(13, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t15, 0, R1, normal1Worldx);
    t15 = normal1Worldx * t15;
    t8 = t8.get$y();
    if (t8 !== (t8 | 0))
      return this.edgeSeparation$5$bailout(14, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t15, 0, R1, normal1Worldx, $.CONSTANT5, t8);
    normal1x = t15 + normal1Worldy * t8;
    t15 = R1.get$col2();
    t18 = t15.get$x();
    if (t18 !== (t18 | 0))
      return this.edgeSeparation$5$bailout(15, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t18, 0, R1, normal1Worldx, $.CONSTANT5, 0, normal1x, $.CONSTANT5);
    t18 = normal1Worldx * t18;
    t15 = t15.get$y();
    if (t15 !== (t15 | 0))
      return this.edgeSeparation$5$bailout(16, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, t18, 0, R1, normal1Worldx, t15, 0, normal1x, $.CONSTANT5);
    normal1y = t18 + normal1Worldy * t15;
    for (t2 = $.getInterceptor$JSArrayJSString(vertices2), t3 = vertices2.length, index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= t3)
        throw $.ioore(i);
      a = vertices2[i];
      t4 = a.get$x();
      if (t4 !== (t4 | 0))
        return this.edgeSeparation$5$bailout(17, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, normal1x, 0, normal1y, index, minDot, i, t2, a, t4);
      t4 *= normal1x;
      t6 = a.get$y();
      if (t6 !== (t6 | 0))
        return this.edgeSeparation$5$bailout(18, 0, xf1, edge1, 0, xf2, vertices1, 0, count2, vertices2, 0, t6, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, normal1x, 0, normal1y, index, minDot, i, t2, 0, t4);
      dot = t4 + t6 * normal1y;
      if (dot < minDot) {
        minDot = dot;
        index = i;
      }
    }
    if (typeof vertices1 !== "string" && (typeof vertices1 !== "object" || vertices1 === null || vertices1.constructor !== Array && !vertices1.$isJavaScriptIndexingBehavior))
      return this.edgeSeparation$5$bailout(1, poly1, xf1, edge1, poly2, xf2, vertices1);
    if (edge1 >= vertices1.length)
      throw $.ioore(edge1);
    v3 = vertices1[edge1];
    t3 = xf1.get$position().get$y();
    t5 = R.get$col1().get$y();
    t7 = v3.get$x();
    if (typeof t5 !== "number")
      return this.edgeSeparation$5$bailout(20, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, t5, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3);
    if (typeof t7 !== "number")
      return this.edgeSeparation$5$bailout(21, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, t5, R, t7, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3);
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(19, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3);
    t3 += t5 * t7;
    t9 = R.get$col2().get$y();
    t11 = v3.get$y();
    if (typeof t9 !== "number")
      return this.edgeSeparation$5$bailout(22, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, t9);
    if (typeof t11 !== "number")
      return this.edgeSeparation$5$bailout(23, 0, xf1, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, t9, t11);
    v1y = t3 + t9 * t11;
    t3 = xf1.get$position().get$x();
    t14 = R.get$col1().get$x();
    t16 = v3.get$x();
    if (typeof t14 !== "number")
      return this.edgeSeparation$5$bailout(25, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y, t14);
    if (typeof t16 !== "number")
      return this.edgeSeparation$5$bailout(26, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, t16, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y, t14);
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(24, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, R, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y);
    t3 += t14 * t16;
    t18 = R.get$col2().get$x();
    t20 = v3.get$y();
    if (typeof t18 !== "number")
      return this.edgeSeparation$5$bailout(27, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, index, 0, 0, t2, 0, t3, v3, 0, 0, v1y, 0, t18);
    if (typeof t20 !== "number")
      return this.edgeSeparation$5$bailout(28, 0, 0, 0, 0, xf2, 0, 0, 0, vertices2, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, t20, 0, 0, 0, index, 0, 0, t2, 0, t3, 0, 0, 0, v1y, 0, t18);
    v1x = t3 + t18 * t20;
    if (index < 0 || index >= vertices2.length)
      throw $.ioore(index);
    v4 = vertices2[index];
    t3 = xf2.get$position().get$y();
    t23 = R1.get$col1().get$y();
    t25 = v4.get$x();
    if (typeof t23 !== "number")
      return this.edgeSeparation$5$bailout(30, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, t23, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x);
    if (typeof t25 !== "number")
      return this.edgeSeparation$5$bailout(31, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, t23, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x, t25);
    if (typeof t3 !== "number")
      return this.edgeSeparation$5$bailout(29, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x);
    t3 += t23 * t25;
    t27 = R1.get$col2().get$y();
    t29 = v4.get$y();
    if (typeof t27 !== "number")
      return this.edgeSeparation$5$bailout(32, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x, 0, t27);
    if (typeof t29 !== "number")
      return this.edgeSeparation$5$bailout(33, 0, 0, 0, 0, xf2, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, v1y, 0, 0, v4, v1x, 0, t27, t29);
    v2y = t3 + t27 * t29 - v1y;
    t31 = xf2.get$position().get$x();
    t33 = R1.get$col1().get$x();
    t35 = v4.get$x();
    if (typeof t33 !== "number")
      return this.edgeSeparation$5$bailout(35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31, t33);
    if (typeof t35 !== "number")
      return this.edgeSeparation$5$bailout(36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31, t33, t35);
    if (typeof t31 !== "number")
      return this.edgeSeparation$5$bailout(34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, R1, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31);
    t31 += t33 * t35;
    t37 = R1.get$col2().get$x();
    t39 = v4.get$y();
    if (typeof t37 !== "number")
      return this.edgeSeparation$5$bailout(37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, 0, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v4, v1x, 0, 0, 0, v2y, t31, 0, 0, t37);
    if (typeof t39 !== "number")
      return this.edgeSeparation$5$bailout(38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, normal1Worldy, 0, 0, 0, normal1Worldx, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v1x, 0, 0, 0, v2y, t31, 0, 0, t37, t39);
    return (t31 + t37 * t39 - v1x) * normal1Worldx + v2y * normal1Worldy;
  },
  edgeSeparation$5$bailout: function(state0, poly1, xf1, edge1, poly2, xf2, vertices1, normals1, count2, vertices2, v, t5, R, t7, t10, normal1Worldy, t13, t16, R1, normal1Worldx, t19, t20, normal1x, t22, normal1y, index, minDot, i, t2, a, t3, v3, t9, t11, v1y, t14, t18, v4, v1x, t24, t26, t28, v2y, t30, t32, t34, t36, t38) {
    switch (state0) {
      case 0:
        poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
      case 1:
        state0 = 0;
        normals1 = poly1.get$normals();
      case 2:
        state0 = 0;
        count2 = poly2.get$vertexCount();
      case 3:
        state0 = 0;
        vertices2 = poly2.get$vertices();
      case 4:
        state0 = 0;
        R = xf1.get$rotation();
        v = $.$$index(normals1, edge1);
        t5 = R.get$col1().get$y();
      case 5:
        state0 = 0;
        t7 = v.get$x();
      case 6:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t5 = R.get$col2().get$y();
      case 7:
        state0 = 0;
        t10 = v.get$y();
      case 8:
        state0 = 0;
        normal1Worldy = $.$$add(t7, $.$$mul(t5, t10));
        t7 = R.get$col1().get$x();
      case 9:
        state0 = 0;
        t13 = v.get$x();
      case 10:
        state0 = 0;
        t13 = $.$$mul(t7, t13);
        t7 = R.get$col2().get$x();
      case 11:
        state0 = 0;
        t16 = v.get$y();
      case 12:
        state0 = 0;
        normal1Worldx = $.$$add(t13, $.$$mul(t7, t16));
        R1 = xf2.get$rotation();
        t13 = R1.get$col1().get$x();
      case 13:
        state0 = 0;
        t19 = $.getInterceptor$JSNumber(normal1Worldx);
        t13 = t19.$mul(normal1Worldx, t13);
        t20 = R1.get$col1().get$y();
      case 14:
        state0 = 0;
        t22 = $.getInterceptor$JSNumber(normal1Worldy);
        normal1x = $.$$add(t13, t22.$mul(normal1Worldy, t20));
        t13 = R1.get$col2().get$x();
      case 15:
        state0 = 0;
        t13 = t19.$mul(normal1Worldx, t13);
        t19 = R1.get$col2().get$y();
      case 16:
        state0 = 0;
        normal1y = $.$$add(t13, t22.$mul(normal1Worldy, t19));
        t2 = $.getInterceptor$JSArrayJSString(vertices2);
        index = 0;
        minDot = 99999999999999;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT5.$lt(i, count2))
                  break L0;
                a = t2.$index(vertices2, i);
                t3 = a.get$x();
              case 17:
                state0 = 0;
                t3 = $.$$mul(t3, normal1x);
                t5 = a.get$y();
              case 18:
                state0 = 0;
                dot = $.$$add(t3, $.$$mul(t5, normal1y));
                if ($.$$lt(dot, minDot) === true) {
                  minDot = dot;
                  index = i;
                }
                ++i;
            }
        v3 = $.$$index(vertices1, edge1);
        t3 = xf1.get$position().get$y();
      case 19:
        state0 = 0;
        t5 = R.get$col1().get$y();
      case 20:
        state0 = 0;
        t7 = v3.get$x();
      case 21:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t5, t7));
        t9 = R.get$col2().get$y();
      case 22:
        state0 = 0;
        t11 = v3.get$y();
      case 23:
        state0 = 0;
        v1y = $.$$add(t3, $.$$mul(t9, t11));
        t3 = xf1.get$position().get$x();
      case 24:
        state0 = 0;
        t14 = R.get$col1().get$x();
      case 25:
        state0 = 0;
        t16 = v3.get$x();
      case 26:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t14, t16));
        t18 = R.get$col2().get$x();
      case 27:
        state0 = 0;
        t20 = v3.get$y();
      case 28:
        state0 = 0;
        v1x = $.$$add(t3, $.$$mul(t18, t20));
        v4 = t2.$index(vertices2, index);
        t2 = xf2.get$position().get$y();
      case 29:
        state0 = 0;
        t22 = R1.get$col1().get$y();
      case 30:
        state0 = 0;
        t24 = v4.get$x();
      case 31:
        state0 = 0;
        t2 = $.$$add(t2, $.$$mul(t22, t24));
        t26 = R1.get$col2().get$y();
      case 32:
        state0 = 0;
        t28 = v4.get$y();
      case 33:
        state0 = 0;
        v2y = $.$$sub($.$$add(t2, $.$$mul(t26, t28)), v1y);
        t30 = xf2.get$position().get$x();
      case 34:
        state0 = 0;
        t32 = R1.get$col1().get$x();
      case 35:
        state0 = 0;
        t34 = v4.get$x();
      case 36:
        state0 = 0;
        t30 = $.$$add(t30, $.$$mul(t32, t34));
        t36 = R1.get$col2().get$x();
      case 37:
        state0 = 0;
        t38 = v4.get$y();
      case 38:
        var dot;
        state0 = 0;
        return $.$$add($.$$mul($.$$sub($.$$add(t30, $.$$mul(t36, t38)), v1x), normal1Worldx), $.$$mul(v2y, normal1Worldy));
    }
  },
  findMaxSeparation$5: function(results, poly1, xf1, poly2, xf2) {
    var count1, normals1, v, predy, predx, v1, tempy, dx, dy, R, t3, t4, dLocal1x, dLocal1y, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, t1, bestSeparation, bestEdge, increment, edge0;
    count1 = poly1.get$vertexCount();
    if (typeof count1 !== "number")
      return this.findMaxSeparation$5$bailout(1, results, poly1, xf1, poly2, xf2, count1);
    normals1 = poly1.get$normals();
    if (typeof normals1 !== "string" && (typeof normals1 !== "object" || normals1 === null || normals1.constructor !== Array && !normals1.$isJavaScriptIndexingBehavior))
      return this.findMaxSeparation$5$bailout(2, results, poly1, xf1, poly2, xf2, count1, normals1);
    v = poly2.get$centroid();
    predy = $.$$add($.$$add(xf2.get$position().get$y(), $.$$mul(xf2.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$y(), v.get$y()));
    predx = $.$$add($.$$add(xf2.get$position().get$x(), $.$$mul(xf2.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$x(), v.get$y()));
    v1 = poly1.get$centroid();
    tempy = $.$$add($.$$add(xf1.get$position().get$y(), $.$$mul(xf1.get$rotation().get$col1().get$y(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$y(), v1.get$y()));
    dx = $.$$sub(predx, $.$$add($.$$add(xf1.get$position().get$x(), $.$$mul(xf1.get$rotation().get$col1().get$x(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$x(), v1.get$y())));
    dy = $.$$sub(predy, tempy);
    R = xf1.get$rotation();
    t3 = $.getInterceptor$JSNumber(dx);
    t4 = $.getInterceptor$JSNumber(dy);
    dLocal1x = $.$$add(t3.$mul(dx, R.get$col1().get$x()), t4.$mul(dy, R.get$col1().get$y()));
    if (typeof dLocal1x !== "number")
      return this.findMaxSeparation$5$bailout(3, results, poly1, xf1, poly2, xf2, count1, normals1, dx, dy, dLocal1x, R, t3, t4);
    dLocal1y = $.$$add(t3.$mul(dx, R.get$col2().get$x()), t4.$mul(dy, R.get$col2().get$y()));
    if (typeof dLocal1y !== "number")
      return this.findMaxSeparation$5$bailout(4, results, poly1, xf1, poly2, xf2, count1, normals1, 0, 0, dLocal1x, 0, 0, 0, dLocal1y);
    for (edge = 0, maxDot = 1e-12, i = 0; i < count1; ++i) {
      if (i >= normals1.length)
        throw $.ioore(i);
      norm = normals1[i];
      dot = $.$$add($.$$mul(norm.get$x(), dLocal1x), $.$$mul(norm.get$y(), dLocal1y));
      if ($.$$gt(dot, maxDot) === true) {
        maxDot = dot;
        edge = i;
      }
    }
    s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
    prevEdge = edge - 1;
    prevEdge = prevEdge >= 0 ? prevEdge : count1 - 1;
    sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
    nextEdge = edge + 1;
    nextEdge = nextEdge < count1 ? nextEdge : 0;
    sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
    t1 = $.getInterceptor$JSNumber(sPrev);
    if (t1.$gt(sPrev, s) === true && t1.$gt(sPrev, sNext) === true) {
      bestSeparation = sPrev;
      bestEdge = prevEdge;
      increment = -1;
    } else {
      if ($.$$gt(sNext, s) === true)
        ;
      else {
        results.edgeIndex = edge;
        results.separation = s;
        return;
      }
      bestSeparation = sNext;
      bestEdge = nextEdge;
      increment = 1;
    }
    if (typeof bestSeparation !== "number")
      return this.findMaxSeparation$5$bailout(5, results, poly1, xf1, poly2, xf2, count1, 0, 0, 0, 0, 0, 0, 0, 0, bestEdge, bestSeparation, increment);
    for (t1 = increment === -1, edge = count1 - 1; true; bestSeparation = s, bestEdge = edge0) {
      if (t1) {
        edge0 = bestEdge - 1;
        edge0 = edge0 >= 0 ? edge0 : edge;
      } else {
        edge0 = bestEdge + 1;
        edge0 = edge0 < count1 ? edge0 : 0;
      }
      s = this.edgeSeparation$5(poly1, xf1, edge0, poly2, xf2);
      if ($.$$gt(s, bestSeparation) === true)
        ;
      else
        break;
    }
    results.edgeIndex = bestEdge;
    results.separation = bestSeparation;
  },
  findMaxSeparation$5$bailout: function(state0, results, poly1, xf1, poly2, xf2, count1, normals1, dx, dy, dLocal1x, R, t3, t4, dLocal1y, bestEdge, bestSeparation, increment) {
    switch (state0) {
      case 0:
        count1 = poly1.get$vertexCount();
      case 1:
        state0 = 0;
        normals1 = poly1.get$normals();
      case 2:
        state0 = 0;
        v = poly2.get$centroid();
        predy = $.$$add($.$$add(xf2.get$position().get$y(), $.$$mul(xf2.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$y(), v.get$y()));
        predx = $.$$add($.$$add(xf2.get$position().get$x(), $.$$mul(xf2.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xf2.get$rotation().get$col2().get$x(), v.get$y()));
        v1 = poly1.get$centroid();
        tempy = $.$$add($.$$add(xf1.get$position().get$y(), $.$$mul(xf1.get$rotation().get$col1().get$y(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$y(), v1.get$y()));
        dx = $.$$sub(predx, $.$$add($.$$add(xf1.get$position().get$x(), $.$$mul(xf1.get$rotation().get$col1().get$x(), v1.get$x())), $.$$mul(xf1.get$rotation().get$col2().get$x(), v1.get$y())));
        dy = $.$$sub(predy, tempy);
        R = xf1.get$rotation();
        t3 = $.getInterceptor$JSNumber(dx);
        t4 = $.getInterceptor$JSNumber(dy);
        dLocal1x = $.$$add(t3.$mul(dx, R.get$col1().get$x()), t4.$mul(dy, R.get$col1().get$y()));
      case 3:
        state0 = 0;
        dLocal1y = $.$$add(t3.$mul(dx, R.get$col2().get$x()), t4.$mul(dy, R.get$col2().get$y()));
      case 4:
        state0 = 0;
        for (t1 = $.getInterceptor$JSArrayJSString(normals1), edge = 0, maxDot = 1e-12, i = 0; $.CONSTANT5.$lt(i, count1); ++i) {
          norm = t1.$index(normals1, i);
          dot = $.$$add($.$$mul(norm.get$x(), dLocal1x), $.$$mul(norm.get$y(), dLocal1y));
          if ($.$$gt(dot, maxDot) === true) {
            maxDot = dot;
            edge = i;
          }
        }
        s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
        prevEdge = edge - 1;
        prevEdge = prevEdge >= 0 ? prevEdge : $.$$sub(count1, 1);
        sPrev = this.edgeSeparation$5(poly1, xf1, prevEdge, poly2, xf2);
        nextEdge = edge + 1;
        nextEdge = $.CONSTANT5.$lt(nextEdge, count1) ? nextEdge : 0;
        sNext = this.edgeSeparation$5(poly1, xf1, nextEdge, poly2, xf2);
        t1 = $.getInterceptor$JSNumber(sPrev);
        if (t1.$gt(sPrev, s) === true && t1.$gt(sPrev, sNext) === true) {
          bestSeparation = sPrev;
          bestEdge = prevEdge;
          increment = -1;
        } else {
          if ($.$$gt(sNext, s) === true)
            ;
          else {
            results.edgeIndex = edge;
            results.separation = s;
            return;
          }
          bestSeparation = sNext;
          bestEdge = nextEdge;
          increment = 1;
        }
      case 5:
        var v, predy, predx, v1, tempy, t1, edge, maxDot, i, norm, dot, s, prevEdge, sPrev, nextEdge, sNext, t2;
        state0 = 0;
        for (t1 = increment === -1, t2 = $.getInterceptor$JSNumber(count1); true; bestSeparation = s, bestEdge = edge) {
          if (t1) {
            t3 = $.getInterceptor$JSNumber(bestEdge);
            edge = $.$$ge(t3.$sub(bestEdge, 1), 0) === true ? t3.$sub(bestEdge, 1) : t2.$sub(count1, 1);
          } else {
            t3 = $.getInterceptor$JSNumber(bestEdge);
            edge = $.$$lt(t3.$add(bestEdge, 1), count1) === true ? t3.$add(bestEdge, 1) : 0;
          }
          s = this.edgeSeparation$5(poly1, xf1, edge, poly2, xf2);
          if ($.$$gt(s, bestSeparation) === true)
            ;
          else
            break;
        }
        results.edgeIndex = bestEdge;
        results.separation = bestSeparation;
    }
  },
  findIncidentEdge$6: function(c, poly1, xf1, edge1, poly2, xf2) {
    var normals1, count2, vertices2, normals2, t3, t4, t5, index, minDot, i, t1, dot, i2, t2;
    poly1.get$vertexCount();
    normals1 = poly1.get$normals();
    count2 = poly2.get$vertexCount();
    if (typeof count2 !== "number")
      return this.findIncidentEdge$6$bailout(1, c, xf1, edge1, poly2, xf2, normals1, count2);
    vertices2 = poly2.get$vertices();
    normals2 = poly2.get$normals();
    if (typeof normals2 !== "string" && (typeof normals2 !== "object" || normals2 === null || normals2.constructor !== Array && !normals2.$isJavaScriptIndexingBehavior))
      return this.findIncidentEdge$6$bailout(2, c, xf1, edge1, 0, xf2, normals1, count2, vertices2, normals2);
    t3 = xf1.get$rotation();
    t4 = $.$$index(normals1, edge1);
    t5 = this.normal1;
    $.Matrix22_mulMatrixAndVectorToOut(t3, t4, t5);
    $.Matrix22_mulTransMatrixAndVectorToOut(xf2.get$rotation(), t5, t5);
    for (index = 0, minDot = 99999999999999, i = 0; i < count2; ++i) {
      if (i >= normals2.length)
        throw $.ioore(i);
      t1 = normals2[i];
      dot = $.$$add($.$$mul(t5.x, t1.get$x()), $.$$mul(t5.y, t1.get$y()));
      if ($.$$lt(dot, minDot) === true) {
        minDot = dot;
        index = i;
      }
    }
    i2 = index + 1;
    i2 = i2 < count2 ? i2 : 0;
    t1 = $.getInterceptor$JSArrayJSString(vertices2);
    t2 = $.getInterceptor$JSArrayJSString(c);
    $.Transform_mulToOut(xf2, t1.$index(vertices2, index), t2.$index(c, 0).get$v());
    t2.$index(c, 0).get$id().get$features().set$referenceEdge(edge1);
    t2.$index(c, 0).get$id().get$features().set$incidentEdge(index);
    t2.$index(c, 0).get$id().get$features().set$incidentVertex(0);
    $.Transform_mulToOut(xf2, t1.$index(vertices2, i2), t2.$index(c, 1).get$v());
    t2.$index(c, 1).get$id().get$features().set$referenceEdge(edge1);
    t2.$index(c, 1).get$id().get$features().set$incidentEdge(i2);
    t2.$index(c, 1).get$id().get$features().set$incidentVertex(1);
  },
  findIncidentEdge$6$bailout: function(state0, c, xf1, edge1, poly2, xf2, normals1, count2, vertices2, normals2) {
    switch (state0) {
      case 0:
        poly1.get$vertexCount();
        normals1 = poly1.get$normals();
        count2 = poly2.get$vertexCount();
      case 1:
        state0 = 0;
        vertices2 = poly2.get$vertices();
        normals2 = poly2.get$normals();
      case 2:
        var t3, t4, t5, t1, index, minDot, i, t2, dot, i2;
        state0 = 0;
        t3 = xf1.get$rotation();
        t4 = $.$$index(normals1, edge1);
        t5 = this.normal1;
        $.Matrix22_mulMatrixAndVectorToOut(t3, t4, t5);
        $.Matrix22_mulTransMatrixAndVectorToOut(xf2.get$rotation(), t5, t5);
        for (t1 = $.getInterceptor$JSArrayJSString(normals2), index = 0, minDot = 99999999999999, i = 0; $.CONSTANT5.$lt(i, count2); ++i) {
          t2 = t1.$index(normals2, i);
          dot = $.$$add($.$$mul(t5.x, t2.get$x()), $.$$mul(t5.y, t2.get$y()));
          if ($.$$lt(dot, minDot) === true) {
            minDot = dot;
            index = i;
          }
        }
        i2 = index + 1;
        i2 = $.CONSTANT5.$lt(i2, count2) ? i2 : 0;
        t1 = $.getInterceptor$JSArrayJSString(vertices2);
        t2 = $.getInterceptor$JSArrayJSString(c);
        $.Transform_mulToOut(xf2, t1.$index(vertices2, index), t2.$index(c, 0).get$v());
        t2.$index(c, 0).get$id().get$features().set$referenceEdge(edge1);
        t2.$index(c, 0).get$id().get$features().set$incidentEdge(index);
        t2.$index(c, 0).get$id().get$features().set$incidentVertex(0);
        $.Transform_mulToOut(xf2, t1.$index(vertices2, i2), t2.$index(c, 1).get$v());
        t2.$index(c, 1).get$id().get$features().set$referenceEdge(edge1);
        t2.$index(c, 1).get$id().get$features().set$incidentEdge(i2);
        t2.$index(c, 1).get$id().get$features().set$incidentVertex(1);
    }
  },
  collidePolygons$5: function(manifold, polyA, xfA, polyB, xfB) {
    var totalRadius, t2, t1, t3, t4, edge1, xf2, xf1, poly2, poly1, flip, count1, vertices1, t5, t6, t7, t8, frontOffset, sideOffset1, sideOffset2, t9, np, pointCount, i, cp;
    manifold.set$pointCount(0);
    totalRadius = $.$$add(polyA.get$radius(), polyB.get$radius());
    if (typeof totalRadius !== "number")
      return this.collidePolygons$5$bailout(1, manifold, polyA, xfA, totalRadius, polyB, xfB);
    t2 = this.results1;
    this.findMaxSeparation$5(t2, polyA, xfA, polyB, xfB);
    if ($.$$gt(t2.separation, totalRadius) === true)
      return;
    t1 = this.results2;
    this.findMaxSeparation$5(t1, polyB, xfB, polyA, xfA);
    if ($.$$gt(t1.separation, totalRadius) === true)
      return;
    t3 = t1.separation;
    t4 = t2.separation;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    if ($.$$gt(t3, 0.98 * t4 + 0.001) === true) {
      edge1 = t1.edgeIndex;
      manifold.set$type(2);
      xf2 = xfA;
      xf1 = xfB;
      poly2 = polyA;
      poly1 = polyB;
      flip = 1;
    } else {
      edge1 = t2.edgeIndex;
      manifold.set$type(1);
      xf2 = xfB;
      xf1 = xfA;
      poly2 = polyB;
      poly1 = polyA;
      flip = 0;
    }
    t1 = this.incidentEdge;
    this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
    count1 = poly1.get$vertexCount();
    vertices1 = poly1.get$vertices();
    t2 = this.v11;
    t3 = $.getInterceptor$JSArrayJSString(vertices1);
    t2.setFrom$1(t3.$index(vertices1, edge1));
    t4 = this.v12;
    t5 = $.getInterceptor$JSNumber(edge1);
    t4.setFrom$1($.$$lt(t5.$add(edge1, 1), count1) === true ? t3.$index(vertices1, t5.$add(edge1, 1)) : t3.$index(vertices1, 0));
    t3 = this.localTangent;
    t3.setFrom$1(t4).subLocal$1(t2);
    t3.normalize$0();
    t5 = this.localNormal;
    $.Vector_crossVectorAndNumToOut(t3, 1, t5);
    t6 = this.planePoint;
    t6.setFrom$1(t2).addLocal$1(t4).mulLocal$1(0.5);
    t7 = xf1.get$rotation();
    t8 = this.tangent;
    $.Matrix22_mulMatrixAndVectorToOut(t7, t3, t8);
    t3 = this.normal;
    $.Vector_crossVectorAndNumToOut(t8, 1, t3);
    $.Transform_mulToOut(xf1, t2, t2);
    $.Transform_mulToOut(xf1, t4, t4);
    frontOffset = $.$$add($.$$mul(t3.x, t2.x), $.$$mul(t3.y, t2.y));
    if (typeof frontOffset !== "number")
      return this.collidePolygons$5$bailout(2, manifold, 0, 0, totalRadius, 0, 0, xf2, flip, t3, frontOffset, t1, t2, t4, t5, t6, t8);
    sideOffset1 = $.$$add($.$$negate($.$$add($.$$mul(t8.x, t2.x), $.$$mul(t8.y, t2.y))), totalRadius);
    sideOffset2 = $.$$add($.$$add($.$$mul(t8.x, t4.x), $.$$mul(t8.y, t4.y)), totalRadius);
    t8.negateLocal$0();
    t9 = this.clipPoints1;
    np = $.Collision_clipSegmentToLine(t9, t1, t8, sideOffset1);
    t8.negateLocal$0();
    if (np < 2)
      return;
    t1 = this.clipPoints2;
    if ($.Collision_clipSegmentToLine(t1, t9, t8, sideOffset2) < 2)
      return;
    manifold.get$localNormal().setFrom$1(t5);
    manifold.get$localPoint().setFrom$1(t6);
    for (pointCount = 0, i = 0; i < 2; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i].get$v();
      if ($.$$le($.$$sub($.$$add($.$$mul(t3.x, t2.get$x()), $.$$mul(t3.y, t2.get$y())), frontOffset), totalRadius) === true) {
        cp = $.$$index(manifold.get$points(), pointCount);
        if (i >= t1.length)
          throw $.ioore(i);
        $.Transform_mulTransToOut(xf2, t1[i].get$v(), cp.get$localPoint());
        t2 = cp.get$id();
        if (i >= t1.length)
          throw $.ioore(i);
        t2.setFrom$1(t1[i].get$id());
        cp.get$id().get$features().set$flip(flip);
        ++pointCount;
      }
    }
    manifold.set$pointCount(pointCount);
  },
  collidePolygons$5$bailout: function(state0, manifold, polyA, xfA, totalRadius, polyB, xfB, xf2, flip, t3, frontOffset, t1, t2, t4, t5, t6, t8) {
    switch (state0) {
      case 0:
        manifold.set$pointCount(0);
        totalRadius = $.$$add(polyA.get$radius(), polyB.get$radius());
      case 1:
        state0 = 0;
        t2 = this.results1;
        this.findMaxSeparation$5(t2, polyA, xfA, polyB, xfB);
        if ($.$$gt(t2.separation, totalRadius) === true)
          return;
        t1 = this.results2;
        this.findMaxSeparation$5(t1, polyB, xfB, polyA, xfA);
        if ($.$$gt(t1.separation, totalRadius) === true)
          return;
        t3 = t1.separation;
        t4 = t2.separation;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        if ($.$$gt(t3, 0.98 * t4 + 0.001) === true) {
          edge1 = t1.edgeIndex;
          manifold.set$type(2);
          xf2 = xfA;
          xf1 = xfB;
          poly2 = polyA;
          poly1 = polyB;
          flip = 1;
        } else {
          edge1 = t2.edgeIndex;
          manifold.set$type(1);
          xf2 = xfB;
          xf1 = xfA;
          poly2 = polyB;
          poly1 = polyA;
          flip = 0;
        }
        t1 = this.incidentEdge;
        this.findIncidentEdge$6(t1, poly1, xf1, edge1, poly2, xf2);
        count1 = poly1.get$vertexCount();
        vertices1 = poly1.get$vertices();
        t2 = this.v11;
        t3 = $.getInterceptor$JSArrayJSString(vertices1);
        t2.setFrom$1(t3.$index(vertices1, edge1));
        t4 = this.v12;
        t5 = $.getInterceptor$JSNumber(edge1);
        t4.setFrom$1($.$$lt(t5.$add(edge1, 1), count1) === true ? t3.$index(vertices1, t5.$add(edge1, 1)) : t3.$index(vertices1, 0));
        t3 = this.localTangent;
        t3.setFrom$1(t4).subLocal$1(t2);
        t3.normalize$0();
        t5 = this.localNormal;
        $.Vector_crossVectorAndNumToOut(t3, 1, t5);
        t6 = this.planePoint;
        t6.setFrom$1(t2).addLocal$1(t4).mulLocal$1(0.5);
        t7 = xf1.get$rotation();
        t8 = this.tangent;
        $.Matrix22_mulMatrixAndVectorToOut(t7, t3, t8);
        t3 = this.normal;
        $.Vector_crossVectorAndNumToOut(t8, 1, t3);
        $.Transform_mulToOut(xf1, t2, t2);
        $.Transform_mulToOut(xf1, t4, t4);
        frontOffset = $.$$add($.$$mul(t3.x, t2.x), $.$$mul(t3.y, t2.y));
      case 2:
        var edge1, xf1, poly2, poly1, count1, vertices1, t7, sideOffset1, sideOffset2, t9, np, pointCount, i, cp;
        state0 = 0;
        sideOffset1 = $.$$add($.$$negate($.$$add($.$$mul(t8.x, t2.x), $.$$mul(t8.y, t2.y))), totalRadius);
        sideOffset2 = $.$$add($.$$add($.$$mul(t8.x, t4.x), $.$$mul(t8.y, t4.y)), totalRadius);
        t8.negateLocal$0();
        t9 = this.clipPoints1;
        np = $.Collision_clipSegmentToLine(t9, t1, t8, sideOffset1);
        t8.negateLocal$0();
        if (np < 2)
          return;
        t1 = this.clipPoints2;
        if ($.Collision_clipSegmentToLine(t1, t9, t8, sideOffset2) < 2)
          return;
        manifold.get$localNormal().setFrom$1(t5);
        manifold.get$localPoint().setFrom$1(t6);
        for (pointCount = 0, i = 0; i < 2; ++i) {
          if (i >= t1.length)
            throw $.ioore(i);
          t2 = t1[i].get$v();
          if ($.$$le($.$$sub($.$$add($.$$mul(t3.x, t2.get$x()), $.$$mul(t3.y, t2.get$y())), frontOffset), totalRadius) === true) {
            cp = $.$$index(manifold.get$points(), pointCount);
            if (i >= t1.length)
              throw $.ioore(i);
            $.Transform_mulTransToOut(xf2, t1[i].get$v(), cp.get$localPoint());
            t2 = cp.get$id();
            if (i >= t1.length)
              throw $.ioore(i);
            t2.setFrom$1(t1[i].get$id());
            cp.get$id().get$features().set$flip(flip);
            ++pointCount;
          }
        }
        manifold.set$pointCount(pointCount);
    }
  },
  Collision$_construct$1: function(pool) {
    var t1, t2;
    t1 = this.incidentEdge;
    t2 = $.getInterceptor$JSArray(t1);
    t2.$indexSet(t1, 0, $.ClipVertex$());
    t2.$indexSet(t1, 1, $.ClipVertex$());
    t1 = this.clipPoints1;
    t2 = $.ClipVertex$();
    if (0 >= t1.length)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = $.ClipVertex$();
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.clipPoints2;
    t1 = $.ClipVertex$();
    if (0 >= t2.length)
      throw $.ioore(0);
    t2[0] = t1;
    t1 = $.ClipVertex$();
    if (1 >= t2.length)
      throw $.ioore(1);
    t2[1] = t1;
  }
};

$$.ClipVertex = {"": "Object;v>,id>",
  setFrom$1: function(cv) {
    this.v.setFrom$1(cv.get$v());
    this.id.setFrom$1(cv.get$id());
  }
};

$$.EdgeResults = {"": "Object;separation>,edgeIndex"};

$$.ContactID = {"": "Object;features>",
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(other.get$features(), this.features);
  },
  setFrom$1: function(other) {
    this.features.setFrom$1(other.get$features());
  },
  isEqual$1: function(other) {
    return $.$$eq(other.get$features(), this.features);
  },
  zero$0: function() {
    this.features.zero$0();
  }
};

$$.Distance = {"": "Object;calls,iters,maxIters,simplex,saveA,saveB,closestPoint,searchDirection,temp,normal>",
  distance$3: function(output, cache, input) {
    var proxyA, proxyB, transformA, transformB, t1, vertices, t2, t3, t4, t5, t6, iter, saveCount, i, t7, vertex, duplicate, t8, rA, rB;
    this.calls = this.calls + 1;
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    transformA = input.get$transformA();
    transformB = input.get$transformB();
    t1 = this.simplex;
    t1.readCache$5(cache, proxyA, transformA, proxyB, transformB);
    vertices = t1.vertices;
    t2 = this.closestPoint;
    t1.getClosestPoint$1(t2);
    t2.get$lengthSquared();
    for (t3 = this.saveB, t4 = this.saveA, t5 = this.searchDirection, t6 = this.temp, iter = 0; iter < this.maxIters;) {
      saveCount = t1.count;
      for (i = 0; $.CONSTANT5.$lt(i, saveCount); ++i) {
        if (i >= vertices.length)
          throw $.ioore(i);
        t7 = vertices[i].get$indexA();
        if (i >= t4.length)
          throw $.ioore(i);
        t4[i] = t7;
        t7 = vertices[i].get$indexB();
        if (i >= t3.length)
          throw $.ioore(i);
        t3[i] = t7;
      }
      switch (t1.count) {
        case 1:
          break;
        case 2:
          t1.solve2$0();
          break;
        case 3:
          t1.solve3$0();
          break;
        default:
          return;
      }
      if ($.$$eq(t1.count, 3) === true)
        break;
      t1.getClosestPoint$1(t2);
      t2.get$lengthSquared();
      t1.getSearchDirection$1(t5);
      if ($.$$lt(t5.get$lengthSquared(), 1.4208639999999999e-14) === true)
        break;
      t7 = t1.count;
      if (t7 !== (t7 | 0))
        throw $.iae(t7);
      if (t7 < 0 || t7 >= vertices.length)
        throw $.ioore(t7);
      vertex = vertices[t7];
      $.Matrix22_mulTransMatrixAndVectorToOut(transformA.get$rotation(), t5.negateLocal$0(), t6);
      vertex.set$indexA(proxyA.getSupport$1(t6));
      $.Transform_mulToOut(transformA, $.$$index(proxyA.get$vertices(), vertex.get$indexA()), vertex.get$wA());
      $.Matrix22_mulTransMatrixAndVectorToOut(transformB.get$rotation(), t5.negateLocal$0(), t6);
      vertex.set$indexB(proxyB.getSupport$1(t6));
      $.Transform_mulToOut(transformB, $.$$index(proxyB.get$vertices(), vertex.get$indexB()), vertex.get$wB());
      vertex.get$w().setFrom$1(vertex.get$wB()).subLocal$1(vertex.get$wA());
      ++iter;
      this.iters = this.iters + 1;
      for (i = 0; duplicate = false, $.CONSTANT5.$lt(i, saveCount); ++i) {
        t7 = vertex.get$indexA();
        if (i >= t4.length)
          throw $.ioore(i);
        if ($.$$eq(t7, t4[i]) === true) {
          t7 = vertex.get$indexB();
          if (i >= t3.length)
            throw $.ioore(i);
          t8 = $.$$eq(t7, t3[i]) === true;
          t7 = t8;
        } else
          t7 = false;
        if (t7) {
          duplicate = true;
          break;
        }
      }
      if (duplicate)
        break;
      t1.count = $.$$add(t1.count, 1);
    }
    this.maxIters = $.max(this.maxIters, iter);
    t1.getWitnessPoints$2(output.get$pointA(), output.get$pointB());
    output.set$distance(Math.sqrt($.checkNum($.MathBox_distanceSquared(output.get$pointA(), output.get$pointB()))));
    output.set$iterations(iter);
    t1.writeCache$1(cache);
    if (input.get$useRadii() === true) {
      rA = proxyA.get$radius();
      rB = proxyB.get$radius();
      t1 = $.getInterceptor$JSNumber(rA);
      if ($.$$gt(output.get$distance(), t1.$add(rA, rB)) === true && $.$$gt(output.get$distance(), 1.192e-7) === true) {
        output.set$distance($.$$sub(output.get$distance(), t1.$add(rA, rB)));
        t2 = this.normal;
        t2.setFrom$1(output.get$pointB()).subLocal$1(output.get$pointA());
        t2.normalize$0();
        t6.setFrom$1(t2).mulLocal$1(rA);
        output.get$pointA().addLocal$1(t6);
        t6.setFrom$1(t2).mulLocal$1(rB);
        output.get$pointB().subLocal$1(t6);
      } else {
        output.get$pointA().addLocal$1(output.get$pointB()).mulLocal$1(0.5);
        output.get$pointB().setFrom$1(output.get$pointA());
        output.set$distance(0);
      }
    }
  },
  get$distance: function() {
    return new $.BoundClosure$3(this, "distance$3");
  }
};

$$.DistanceInput = {"": "Object;proxyA=,proxyB=,transformA=,transformB=,useRadii="};

$$.DistanceOutput = {"": "Object;pointA>,pointB>,distance=,iterations<",
  distance$3: function(arg0, arg1, arg2) {
    return this.distance.call$3(arg0, arg1, arg2);
  }
};

$$.DistanceProxy = {"": "Object;vertices>,count=,radius=",
  setFromShape$1: function(shape) {
    var t1, i, t2, t3;
    t1 = shape.get$type();
    if (typeof t1 !== "number")
      return this.setFromShape$1$bailout(1, shape, t1);
    if (t1 === 0) {
      t1 = this.vertices;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1[0].setFrom$1(shape.get$position());
      this.count = 1;
      this.radius = shape.get$radius();
    } else {
      t1 = shape.get$type();
      if (typeof t1 !== "number")
        return this.setFromShape$1$bailout(2, shape, t1);
      if (t1 === 1) {
        this.count = shape.get$vertexCount();
        this.radius = shape.get$radius();
        t1 = this.vertices;
        i = 0;
        while (true) {
          t2 = this.count;
          if (typeof t2 !== "number")
            return this.setFromShape$1$bailout(3, shape, t1, i, t2);
          if (!(i < t2))
            break;
          if (i >= t1.length)
            throw $.ioore(i);
          t2 = t1[i];
          t3 = shape.get$vertices();
          if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
            return this.setFromShape$1$bailout(4, shape, t1, i, t2, t3);
          if (i >= t3.length)
            throw $.ioore(i);
          t2.setFrom$1(t3[i]);
          ++i;
        }
      }
    }
  },
  setFromShape$1$bailout: function(state0, shape, t1, i, t2, t3) {
    switch (state0) {
      case 0:
        t1 = shape.get$type();
      case 1:
        state0 = 0;
      default:
        if (state0 === 0 && $.$$eq(t1, 0) === true) {
          t1 = this.vertices;
          if (0 >= t1.length)
            throw $.ioore(0);
          t1[0].setFrom$1(shape.get$position());
          this.count = 1;
          this.radius = shape.get$radius();
        } else
          switch (state0) {
            case 0:
              t1 = shape.get$type();
            case 2:
              state0 = 0;
            default:
              if (state0 === 4 || state0 === 3 || state0 === 0 && $.$$eq(t1, 1) === true)
                switch (state0) {
                  case 0:
                    this.count = shape.get$vertexCount();
                    this.radius = shape.get$radius();
                    t1 = this.vertices;
                    i = 0;
                  default:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            t2 = this.count;
                          case 3:
                            state0 = 0;
                            if (!$.CONSTANT5.$lt(i, t2))
                              break L0;
                            if (i >= t1.length)
                              throw $.ioore(i);
                            t2 = t1[i];
                            t3 = shape.get$vertices();
                          case 4:
                            state0 = 0;
                            t2.setFrom$1($.$$index(t3, i));
                            ++i;
                        }
                }
          }
    }
  },
  getSupport$1: function(direction) {
    var t1, t2, t3, t4, t6, t9, bestValue, bestIndex, i, value;
    t1 = this.vertices;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t3 = t1[0];
    t4 = t3.get$x();
    t6 = direction.get$x();
    if (typeof t4 !== "number")
      return this.getSupport$1$bailout(1, direction, t4, t1, t3);
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout(2, direction, t4, t1, t3, t6);
    t4 *= t6;
    t3 = t3.get$y();
    t9 = direction.get$y();
    if (typeof t3 !== "number")
      return this.getSupport$1$bailout(3, direction, 0, t1, t3, t4);
    if (typeof t9 !== "number")
      return this.getSupport$1$bailout(4, direction, 0, t1, t3, t4, t9);
    bestValue = t4 + t3 * t9;
    bestIndex = 0;
    i = 1;
    while (true) {
      t3 = this.count;
      if (typeof t3 !== "number")
        return this.getSupport$1$bailout(5, direction, 0, t1, t3, 0, 0, bestIndex, bestValue, i);
      if (!(i < t3))
        break;
      if (i >= t2)
        throw $.ioore(i);
      t3 = t1[i];
      t4 = t3.get$x();
      if (typeof t4 !== "number")
        return this.getSupport$1$bailout(6, direction, t4, t1, t3, 0, 0, bestIndex, bestValue, i);
      t4 *= t6;
      t3 = t3.get$y();
      if (typeof t3 !== "number")
        return this.getSupport$1$bailout(8, direction, 0, t1, t3, t4, 0, bestIndex, bestValue, i);
      value = t4 + t3 * t9;
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
      ++i;
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, direction, t3, t1, t2, t5, t7, bestIndex, bestValue, i) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
        if (0 >= t1.length)
          throw $.ioore(0);
        t2 = t1[0];
        t3 = t2.get$x();
      case 1:
        state0 = 0;
        t5 = direction.get$x();
      case 2:
        state0 = 0;
        t5 = $.$$mul(t3, t5);
        t2 = t2.get$y();
      case 3:
        state0 = 0;
        t7 = direction.get$y();
      case 4:
        state0 = 0;
        bestValue = $.$$add(t5, $.$$mul(t2, t7));
        bestIndex = 0;
        i = 1;
      default:
        var value;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.count;
              case 5:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t2))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t2 = t1[i];
                t3 = t2.get$x();
              case 6:
                state0 = 0;
                t5 = direction.get$x();
              case 7:
                state0 = 0;
                t5 = $.$$mul(t3, t5);
                t2 = t2.get$y();
              case 8:
                state0 = 0;
                t7 = direction.get$y();
              case 9:
                state0 = 0;
                value = $.$$add(t5, $.$$mul(t2, t7));
                if ($.$$gt(value, bestValue) === true) {
                  bestValue = value;
                  bestIndex = i;
                }
                ++i;
            }
        return bestIndex;
    }
  },
  DistanceProxy$0: function() {
    var t1, i, t2;
    for (t1 = this.vertices, i = 0; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.Features = {"": "Object;referenceEdge=,incidentEdge=,incidentVertex=,flip=",
  setFrom$1: function(f) {
    this.referenceEdge = f.get$referenceEdge();
    this.incidentEdge = f.get$incidentEdge();
    this.incidentVertex = f.get$incidentVertex();
    this.flip = f.get$flip();
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(this.referenceEdge, other.get$referenceEdge()) === true && $.$$eq(this.incidentEdge, other.get$incidentEdge()) === true && $.$$eq(this.incidentVertex, other.get$incidentVertex()) === true && $.$$eq(this.flip, other.get$flip()) === true;
  },
  toString$0: function() {
    return "Features: (" + $.S(this.flip) + ", " + $.S(this.incidentEdge) + ", " + $.S(this.incidentVertex) + " " + $.S(this.referenceEdge) + ")";
  },
  zero$0: function() {
    this.referenceEdge = 0;
    this.incidentEdge = 0;
    this.incidentVertex = 0;
    this.flip = 0;
  }
};

$$.Manifold = {"": "Object;points>,localNormal>,localPoint>,type=,pointCount=",
  setFrom$1: function(other) {
    var t1, i, t2, t3;
    t1 = this.points;
    i = 0;
    while (true) {
      t2 = other.get$pointCount();
      if (typeof t2 !== "number")
        return this.setFrom$1$bailout(1, other, t2, t1, i);
      if (!(i < t2))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      t3 = other.get$points();
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
        return this.setFrom$1$bailout(2, other, t2, t1, i, t3);
      if (i >= t3.length)
        throw $.ioore(i);
      t2.setFrom$1(t3[i]);
      ++i;
    }
    this.type = other.get$type();
    this.localNormal.setFrom$1(other.get$localNormal());
    this.localPoint.setFrom$1(other.get$localPoint());
    this.pointCount = other.get$pointCount();
  },
  setFrom$1$bailout: function(state0, other, t2, t1, i, t3) {
    switch (state0) {
      case 0:
        t1 = this.points;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = other.get$pointCount();
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t2))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t2 = t1[i];
                t3 = other.get$points();
              case 2:
                state0 = 0;
                t2.setFrom$1($.$$index(t3, i));
                ++i;
            }
        this.type = other.get$type();
        this.localNormal.setFrom$1(other.get$localNormal());
        this.localPoint.setFrom$1(other.get$localPoint());
        this.pointCount = other.get$pointCount();
    }
  },
  Manifold$0: function() {
    var t1, i, t2;
    for (t1 = this.points, i = 0; i < 2; ++i) {
      t2 = $.ManifoldPoint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.ManifoldPoint = {"": "Object;localPoint>,normalImpulse=,tangentImpulse=,id>",
  setFrom$1: function(other) {
    this.localPoint.setFrom$1(other.get$localPoint());
    this.normalImpulse = other.get$normalImpulse();
    this.tangentImpulse = other.get$tangentImpulse();
    this.id.setFrom$1(other.get$id());
  }
};

$$.Simplex = {"": "Object;v1,v2,v3,vertices>,count=,e13,e23,e12,case2,case22,case3,case33",
  readCache$5: function(cache, proxyA, transformA, proxyB, transformB) {
    var t1, i, v, wALocal, wBLocal, metric1, metric2, t2;
    this.count = cache.get$count();
    for (t1 = this.vertices, i = 0; $.CONSTANT5.$lt(i, this.count); ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      v = t1[i];
      v.set$indexA($.$$index(cache.get$indexA(), i));
      v.set$indexB($.$$index(cache.get$indexB(), i));
      wALocal = $.$$index(proxyA.get$vertices(), v.get$indexA());
      wBLocal = $.$$index(proxyB.get$vertices(), v.get$indexB());
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      v.get$w().setFrom$1(v.get$wB()).subLocal$1(v.get$wA());
      v.set$a(0);
    }
    if ($.$$gt(this.count, 1) === true) {
      metric1 = cache.get$metric();
      metric2 = this.getMetric$0();
      if (typeof metric1 !== "number")
        throw $.iae(metric1);
      t2 = $.getInterceptor$JSNumber(metric2);
      if (t2.$lt(metric2, 0.5 * metric1) === true || $.CONSTANT4.$lt(2 * metric1, metric2) || t2.$lt(metric2, 1.192e-7) === true)
        this.count = 0;
    }
    if ($.$$eq(this.count, 0) === true) {
      if (0 >= t1.length)
        throw $.ioore(0);
      v = t1[0];
      v.set$indexA(0);
      v.set$indexB(0);
      wALocal = $.$$index(proxyA.get$vertices(), 0);
      wBLocal = $.$$index(proxyB.get$vertices(), 0);
      $.Transform_mulToOut(transformA, wALocal, v.get$wA());
      $.Transform_mulToOut(transformB, wBLocal, v.get$wB());
      v.get$w().setFrom$1(v.get$wB()).subLocal$1(v.get$wA());
      this.count = 1;
    }
  },
  writeCache$1: function(cache) {
    var t1, i, t2;
    cache.set$metric(this.getMetric$0());
    cache.set$count(this.count);
    for (t1 = this.vertices, i = 0; $.CONSTANT5.$lt(i, this.count); ++i) {
      t2 = cache.get$indexA();
      if (i >= t1.length)
        throw $.ioore(i);
      $.$$indexSet(t2, i, t1[i].get$indexA());
      t2 = cache.get$indexB();
      if (i >= t1.length)
        throw $.ioore(i);
      $.$$indexSet(t2, i, t1[i].get$indexB());
    }
  },
  getSearchDirection$1: function(out) {
    var t1, t2, t3;
    switch (this.count) {
      case 1:
        out.setFrom$1(this.v1.w).negateLocal$0();
        return;
      case 2:
        t1 = this.e12;
        t2 = t1.setFrom$1(this.v2.w);
        t3 = this.v1.w;
        t2.subLocal$1(t3);
        out.setFrom$1(t3).negateLocal$0();
        if ($.$$gt($.$$sub($.$$mul(t1.x, out.get$y()), $.$$mul(t1.y, out.get$x())), 0) === true)
          $.Vector_crossNumAndVectorToOut(1, t1, out);
        else
          $.Vector_crossVectorAndNumToOut(t1, 1, out);
        break;
      default:
        out.setZero$0();
        return;
    }
  },
  getClosestPoint$1: function(out) {
    var t1, t2, t3, t4;
    switch (this.count) {
      case 0:
        out.setZero$0();
        return;
      case 1:
        out.setFrom$1(this.v1.w);
        return;
      case 2:
        t1 = this.case22;
        t2 = this.v2;
        t1.setFrom$1(t2.w).mulLocal$1(t2.a);
        t3 = this.case2;
        t4 = this.v1;
        t3.setFrom$1(t4.w).mulLocal$1(t4.a).addLocal$1(t1);
        out.setFrom$1(t3);
        return;
      case 3:
        out.setZero$0();
        return;
      default:
        out.setZero$0();
        return;
    }
  },
  getWitnessPoints$2: function(pA, pB) {
    var t1, t2, t3, t4, t5;
    switch (this.count) {
      case 0:
        break;
      case 1:
        t1 = this.v1;
        pA.setFrom$1(t1.wA);
        pB.setFrom$1(t1.wB);
        break;
      case 2:
        t1 = this.case2;
        t2 = this.v1;
        t1.setFrom$1(t2.wA).mulLocal$1(t2.a);
        t3 = this.v2;
        pA.setFrom$1(t3.wA).mulLocal$1(t3.a).addLocal$1(t1);
        t1.setFrom$1(t2.wB).mulLocal$1(t2.a);
        pB.setFrom$1(t3.wB).mulLocal$1(t3.a).addLocal$1(t1);
        break;
      case 3:
        t1 = this.v1;
        pA.setFrom$1(t1.wA).mulLocal$1(t1.a);
        t2 = this.case3;
        t3 = this.v2;
        t2.setFrom$1(t3.wA).mulLocal$1(t3.a);
        t4 = this.case33;
        t5 = this.v3;
        t4.setFrom$1(t5.wA).mulLocal$1(t5.a);
        pA.addLocal$1(t2).addLocal$1(t4);
        pB.setFrom$1(pA);
        break;
      default:
        break;
    }
  },
  getMetric$0: function() {
    var t1, t2, t3;
    switch (this.count) {
      case 0:
        return 0;
      case 1:
        return 0;
      case 2:
        return Math.sqrt($.checkNum($.MathBox_distanceSquared(this.v1.w, this.v2.w)));
      case 3:
        t1 = this.case3;
        t2 = t1.setFrom$1(this.v2.w);
        t3 = this.v1.w;
        t2.subLocal$1(t3);
        t2 = this.case33;
        t2.setFrom$1(this.v3.w).subLocal$1(t3);
        return $.$$sub($.$$mul(t1.x, t2.y), $.$$mul(t1.y, t2.x));
      default:
        return 0;
    }
  },
  solve2$0: function() {
    var t1, w1, t2, w2, t3, t4, t6, t8, t10, d12_2, d12_1, inv_d12;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.e12;
    t3.setFrom$1(w2).subLocal$1(w1);
    t4 = w1.x;
    t6 = t3.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(1, t4, t1, w1, t2, w2, t3);
    if (typeof t6 !== "number")
      return this.solve2$0$bailout(2, t4, t1, w1, t2, w2, t3, t6);
    t4 *= t6;
    t8 = w1.y;
    t10 = t3.y;
    if (typeof t8 !== "number")
      return this.solve2$0$bailout(3, t8, t1, 0, t2, w2, t3, t4);
    if (typeof t10 !== "number")
      return this.solve2$0$bailout(4, t8, t1, 0, t2, w2, t3, t4, t10);
    d12_2 = -(t4 + t8 * t10);
    if (d12_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    t4 = w2.x;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(5, $.CONSTANT4, t1, 0, t2, w2, t3, 0, 0, d12_2, t4);
    t6 = t4 * t6;
    t4 = w2.y;
    if (typeof t4 !== "number")
      return this.solve2$0$bailout(7, $.CONSTANT4, t1, 0, t2, 0, t3, 0, 0, d12_2, t4, t6);
    d12_1 = t6 + t4 * t10;
    if (d12_1 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    inv_d12 = 1 / (d12_1 + d12_2);
    t1.a = d12_1 * inv_d12;
    t2.a = d12_2 * inv_d12;
    this.count = 2;
  },
  solve2$0$bailout: function(state0, t4, t1, w1, t2, w2, t3, t6, t9, d12_2, t5, t7, t10, d12_1, inv_d12) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.e12;
        t3.setFrom$1(w2).subLocal$1(w1);
        t4 = w1.x;
      case 1:
        state0 = 0;
        t6 = t3.x;
      case 2:
        state0 = 0;
        t6 = $.$$mul(t4, t6);
        t4 = w1.y;
      case 3:
        state0 = 0;
        t9 = t3.y;
      case 4:
        state0 = 0;
        d12_2 = $.$$negate($.$$add(t6, $.$$mul(t4, t9)));
        t4 = $.getInterceptor$JSNumber(d12_2);
        if (t4.$le(d12_2, 0) === true) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        t5 = w2.x;
      case 5:
        state0 = 0;
        t7 = t3.x;
      case 6:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t5 = w2.y;
      case 7:
        state0 = 0;
        t10 = t3.y;
      case 8:
        state0 = 0;
        d12_1 = $.$$add(t7, $.$$mul(t5, t10));
        t3 = $.getInterceptor$JSNumber(d12_1);
        if (t3.$le(d12_1, 0) === true) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        t5 = t3.$add(d12_1, d12_2);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        inv_d12 = 1 / t5;
      case 9:
        state0 = 0;
        t1.a = t3.$mul(d12_1, inv_d12);
        t2.a = t4.$mul(d12_2, inv_d12);
        this.count = 2;
    }
  },
  solve3$0: function() {
    var t1, w1, t2, w2, t3, w3, t4, t5, t7, t9, t11, w1e12, w2e12, d12_2, t15, t17, t19, t21, w1e13, w3e13, d13_2, t25, t27, t29, t30, t32, w2e23, t35, w3e23, d23_2, t38, t40, n123, d123_1, t43, d123_2, d123_3, inv_d12, inv_d13, inv_d23, inv_d123;
    t1 = this.v1;
    w1 = t1.w;
    t2 = this.v2;
    w2 = t2.w;
    t3 = this.v3;
    w3 = t3.w;
    t4 = this.e12;
    t4.setFrom$1(w2).subLocal$1(w1);
    t5 = w1.x;
    t7 = t4.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(1, t1, w1, t2, w2, t3, w3, t4, t5);
    if (typeof t7 !== "number")
      return this.solve3$0$bailout(2, t1, w1, t2, w2, t3, w3, t4, t5, t7);
    t5 *= t7;
    t9 = w1.y;
    t11 = t4.y;
    if (typeof t9 !== "number")
      return this.solve3$0$bailout(3, t1, w1, t2, w2, t3, w3, t4, t9, t5);
    if (typeof t11 !== "number")
      return this.solve3$0$bailout(4, t1, w1, t2, w2, t3, w3, t4, t9, t5, t11);
    w1e12 = t5 + t9 * t11;
    t5 = w2.x;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(5, t1, w1, t2, w2, t3, w3, t4, 0, t5, 0, w1e12);
    t7 = t5 * t7;
    t5 = w2.y;
    if (typeof t5 !== "number")
      return this.solve3$0$bailout(7, t1, w1, t2, w2, t3, w3, t4, 0, t5, 0, w1e12, t7);
    w2e12 = t7 + t5 * t11;
    d12_2 = -w1e12;
    t7 = this.e13;
    t7.setFrom$1(w3).subLocal$1(w1);
    t15 = w1.x;
    t17 = t7.x;
    if (typeof t15 !== "number")
      return this.solve3$0$bailout(9, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t15);
    if (typeof t17 !== "number")
      return this.solve3$0$bailout(10, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t15, t17);
    t15 *= t17;
    t19 = w1.y;
    t21 = t7.y;
    if (typeof t19 !== "number")
      return this.solve3$0$bailout(11, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t19, t15);
    if (typeof t21 !== "number")
      return this.solve3$0$bailout(12, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, t19, t15, t21);
    w1e13 = t15 + t19 * t21;
    t15 = w3.x;
    if (typeof t15 !== "number")
      return this.solve3$0$bailout(13, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, t15, 0, w1e13);
    t17 = t15 * t17;
    t15 = w3.y;
    if (typeof t15 !== "number")
      return this.solve3$0$bailout(15, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, t15, 0, w1e13, t17);
    w3e13 = t17 + t15 * t21;
    d13_2 = -w1e13;
    t17 = this.e23;
    t17.setFrom$1(w3).subLocal$1(w2);
    t25 = w2.x;
    t27 = t17.x;
    if (typeof t25 !== "number")
      return this.solve3$0$bailout(17, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t25, w3e13, d13_2);
    if (typeof t27 !== "number")
      return this.solve3$0$bailout(18, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t25, w3e13, d13_2, t27);
    t29 = t25 * t27;
    t30 = w2.y;
    t32 = t17.y;
    if (typeof t30 !== "number")
      return this.solve3$0$bailout(19, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t30, w3e13, d13_2, t29);
    if (typeof t32 !== "number")
      return this.solve3$0$bailout(20, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, t30, w3e13, d13_2, t29, t32);
    w2e23 = t29 + t30 * t32;
    t29 = w3.x;
    if (typeof t29 !== "number")
      return this.solve3$0$bailout(21, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, 0, w3e13, d13_2, t29, 0, w2e23);
    t27 = t29 * t27;
    t35 = w3.y;
    if (typeof t35 !== "number")
      return this.solve3$0$bailout(23, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, t17, 0, 0, w3e13, d13_2, t35, 0, w2e23, t27);
    w3e23 = t27 + t35 * t32;
    d23_2 = -w2e23;
    t27 = t4.x;
    t38 = t7.y;
    if (typeof t27 !== "number")
      return this.solve3$0$bailout(25, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, t27, 0, w3e23, d23_2);
    if (typeof t38 !== "number")
      return this.solve3$0$bailout(26, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, t27, 0, w3e23, d23_2, t38);
    t38 = t27 * t38;
    t4 = t4.y;
    t40 = t7.x;
    if (typeof t4 !== "number")
      return this.solve3$0$bailout(27, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, t7, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, t38);
    if (typeof t40 !== "number")
      return this.solve3$0$bailout(28, t1, w1, t2, w2, t3, w3, t4, 0, 0, 0, 0, 0, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, t38, t40);
    n123 = t38 - t4 * t40;
    d123_1 = n123 * (t25 * t35 - t30 * t29);
    t38 = w1.y;
    if (typeof t38 !== "number")
      return this.solve3$0$bailout(34, t1, w1, t2, w2, t3, w3, 0, 0, 0, 0, 0, 0, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, 0, 0, n123, 0, 0, $.CONSTANT4, d123_1, t29, t38);
    t29 *= t38;
    t43 = w1.x;
    if (typeof t43 !== "number")
      return this.solve3$0$bailout(36, t1, w1, t2, w2, t3, 0, 0, 0, 0, 0, 0, 0, 0, w2e12, d12_2, 0, 0, 0, 0, 0, 0, 0, w3e13, d13_2, 0, 0, 0, 0, 0, w3e23, d23_2, 0, 0, n123, 0, 0, $.CONSTANT4, d123_1, t35, t29, t43);
    d123_2 = n123 * (t29 - t35 * t43);
    d123_3 = n123 * (t43 * t30 - t38 * t25);
    if (d12_2 <= 0 && d13_2 <= 0) {
      t1.a = 1;
      this.count = 1;
      return;
    }
    if (w2e12 > 0 && d12_2 > 0 && d123_3 <= 0) {
      inv_d12 = 1 / (w2e12 + d12_2);
      t1.a = w2e12 * inv_d12;
      t2.a = d12_2 * inv_d12;
      this.count = 2;
      return;
    }
    if (w3e13 > 0 && d13_2 > 0 && d123_2 <= 0) {
      inv_d13 = 1 / (w3e13 + d13_2);
      t1.a = w3e13 * inv_d13;
      t3.a = d13_2 * inv_d13;
      this.count = 2;
      t2.setFrom$1(t3);
      return;
    }
    if (w2e12 <= 0 && d23_2 <= 0) {
      t2.a = 1;
      this.count = 1;
      t1.setFrom$1(t2);
      return;
    }
    if (w3e13 <= 0 && w3e23 <= 0) {
      t3.a = 1;
      this.count = 1;
      t1.setFrom$1(t3);
      return;
    }
    if (w3e23 > 0 && d23_2 > 0 && d123_1 <= 0) {
      inv_d23 = 1 / (w3e23 + d23_2);
      t2.a = w3e23 * inv_d23;
      t3.a = d23_2 * inv_d23;
      this.count = 2;
      t1.setFrom$1(t3);
      return;
    }
    inv_d123 = 1 / (d123_1 + d123_2 + d123_3);
    t1.a = d123_1 * inv_d123;
    t2.a = d123_2 * inv_d123;
    t3.a = d123_3 * inv_d123;
    this.count = 3;
  },
  solve3$0$bailout: function(state0, t1, w1, t2, w2, t3, w3, t4, t5, t7, t10, w1e12, t13, t16, w2e12, d12_2, t18, t20, t23, w1e13, t26, t29, t31, w3e13, d13_2, t33, t36, w2e23, t39, t42, w3e23, d23_2, t45, t47, n123, t50, t53, t55, d123_1, t56, t58, t61, t63, d123_2, t65, t68, inv_d12, inv_d13, inv_d23, d123_3, inv_d123) {
    switch (state0) {
      case 0:
        t1 = this.v1;
        w1 = t1.w;
        t2 = this.v2;
        w2 = t2.w;
        t3 = this.v3;
        w3 = t3.w;
        t4 = this.e12;
        t4.setFrom$1(w2).subLocal$1(w1);
        t5 = w1.x;
      case 1:
        state0 = 0;
        t7 = t4.x;
      case 2:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t5 = w1.y;
      case 3:
        state0 = 0;
        t10 = t4.y;
      case 4:
        state0 = 0;
        w1e12 = $.$$add(t7, $.$$mul(t5, t10));
        t7 = w2.x;
      case 5:
        state0 = 0;
        t13 = t4.x;
      case 6:
        state0 = 0;
        t13 = $.$$mul(t7, t13);
        t7 = w2.y;
      case 7:
        state0 = 0;
        t16 = t4.y;
      case 8:
        state0 = 0;
        w2e12 = $.$$add(t13, $.$$mul(t7, t16));
        d12_2 = $.$$negate(w1e12);
        t13 = this.e13;
        t13.setFrom$1(w3).subLocal$1(w1);
        t18 = w1.x;
      case 9:
        state0 = 0;
        t20 = t13.x;
      case 10:
        state0 = 0;
        t20 = $.$$mul(t18, t20);
        t18 = w1.y;
      case 11:
        state0 = 0;
        t23 = t13.y;
      case 12:
        state0 = 0;
        w1e13 = $.$$add(t20, $.$$mul(t18, t23));
        t20 = w3.x;
      case 13:
        state0 = 0;
        t26 = t13.x;
      case 14:
        state0 = 0;
        t26 = $.$$mul(t20, t26);
        t20 = w3.y;
      case 15:
        state0 = 0;
        t29 = t13.y;
      case 16:
        state0 = 0;
        w3e13 = $.$$add(t26, $.$$mul(t20, t29));
        d13_2 = $.$$negate(w1e13);
        t26 = this.e23;
        t26.setFrom$1(w3).subLocal$1(w2);
        t31 = w2.x;
      case 17:
        state0 = 0;
        t33 = t26.x;
      case 18:
        state0 = 0;
        t33 = $.$$mul(t31, t33);
        t31 = w2.y;
      case 19:
        state0 = 0;
        t36 = t26.y;
      case 20:
        state0 = 0;
        w2e23 = $.$$add(t33, $.$$mul(t31, t36));
        t33 = w3.x;
      case 21:
        state0 = 0;
        t39 = t26.x;
      case 22:
        state0 = 0;
        t39 = $.$$mul(t33, t39);
        t33 = w3.y;
      case 23:
        state0 = 0;
        t42 = t26.y;
      case 24:
        state0 = 0;
        w3e23 = $.$$add(t39, $.$$mul(t33, t42));
        d23_2 = $.$$negate(w2e23);
        t39 = t4.x;
      case 25:
        state0 = 0;
        t45 = t13.y;
      case 26:
        state0 = 0;
        t45 = $.$$mul(t39, t45);
        t4 = t4.y;
      case 27:
        state0 = 0;
        t47 = t13.x;
      case 28:
        state0 = 0;
        n123 = $.$$sub(t45, $.$$mul(t4, t47));
        t45 = w2.x;
      case 29:
        state0 = 0;
        t50 = w3.y;
      case 30:
        state0 = 0;
        t50 = $.$$mul(t45, t50);
        t45 = w2.y;
      case 31:
        state0 = 0;
        t53 = w3.x;
      case 32:
        state0 = 0;
        t55 = $.getInterceptor$JSNumber(n123);
        d123_1 = t55.$mul(n123, $.$$sub(t50, $.$$mul(t45, t53)));
        t56 = w3.x;
      case 33:
        state0 = 0;
        t58 = w1.y;
      case 34:
        state0 = 0;
        t58 = $.$$mul(t56, t58);
        t56 = w3.y;
      case 35:
        state0 = 0;
        t61 = w1.x;
      case 36:
        state0 = 0;
        d123_2 = t55.$mul(n123, $.$$sub(t58, $.$$mul(t56, t61)));
        t63 = w1.x;
      case 37:
        state0 = 0;
        t65 = w2.y;
      case 38:
        state0 = 0;
        t65 = $.$$mul(t63, t65);
        t63 = w1.y;
      case 39:
        state0 = 0;
        t68 = w2.x;
      case 40:
        state0 = 0;
        d123_3 = t55.$mul(n123, $.$$sub(t65, $.$$mul(t63, t68)));
        t4 = $.getInterceptor$JSNumber(d12_2);
        if (t4.$le(d12_2, 0) === true && $.$$le(d13_2, 0) === true) {
          t1.a = 1;
          this.count = 1;
          return;
        }
        t5 = $.getInterceptor$JSNumber(w2e12);
      case 41:
        if (state0 === 41 || state0 === 0 && t5.$gt(w2e12, 0) === true && t4.$gt(d12_2, 0) === true && $.$$le(d123_3, 0) === true)
          switch (state0) {
            case 0:
              t3 = t5.$add(w2e12, d12_2);
              if (typeof t3 !== "number")
                throw $.iae(t3);
              inv_d12 = 1 / t3;
            case 41:
              state0 = 0;
              t1.a = t5.$mul(w2e12, inv_d12);
              t2.a = t4.$mul(d12_2, inv_d12);
              this.count = 2;
              return;
          }
        t4 = $.getInterceptor$JSNumber(w3e13);
      case 42:
        if (state0 === 42 || state0 === 0 && t4.$gt(w3e13, 0) === true && $.$$gt(d13_2, 0) === true && $.$$le(d123_2, 0) === true)
          switch (state0) {
            case 0:
              t5 = t4.$add(w3e13, d13_2);
              if (typeof t5 !== "number")
                throw $.iae(t5);
              inv_d13 = 1 / t5;
            case 42:
              state0 = 0;
              t1.a = t4.$mul(w3e13, inv_d13);
              t3.a = $.$$mul(d13_2, inv_d13);
              this.count = 2;
              t2.setFrom$1(t3);
              return;
          }
        if (t5.$le(w2e12, 0) === true && $.$$le(d23_2, 0) === true) {
          t2.a = 1;
          this.count = 1;
          t1.setFrom$1(t2);
          return;
        }
        if (t4.$le(w3e13, 0) === true && $.$$le(w3e23, 0) === true) {
          t3.a = 1;
          this.count = 1;
          t1.setFrom$1(t3);
          return;
        }
        t4 = $.getInterceptor$JSNumber(w3e23);
      case 43:
        if (state0 === 43 || state0 === 0 && t4.$gt(w3e23, 0) === true && $.$$gt(d23_2, 0) === true && $.$$le(d123_1, 0) === true)
          switch (state0) {
            case 0:
              t5 = t4.$add(w3e23, d23_2);
              if (typeof t5 !== "number")
                throw $.iae(t5);
              inv_d23 = 1 / t5;
            case 43:
              state0 = 0;
              t2.a = t4.$mul(w3e23, inv_d23);
              t3.a = $.$$mul(d23_2, inv_d23);
              this.count = 2;
              t1.setFrom$1(t3);
              return;
          }
        t4 = $.getInterceptor$JSNumber(d123_1);
        t5 = $.$$add(t4.$add(d123_1, d123_2), d123_3);
        if (typeof t5 !== "number")
          throw $.iae(t5);
        inv_d123 = 1 / t5;
      case 44:
        state0 = 0;
        t1.a = t4.$mul(d123_1, inv_d123);
        t2.a = $.$$mul(d123_2, inv_d123);
        t3.a = $.$$mul(d123_3, inv_d123);
        this.count = 3;
    }
  },
  Simplex$0: function() {
    var t1, t2, t3;
    t1 = this.vertices;
    t2 = this.v1;
    t3 = t1.length;
    if (0 >= t3)
      throw $.ioore(0);
    t1[0] = t2;
    t2 = this.v2;
    if (1 >= t3)
      throw $.ioore(1);
    t1[1] = t2;
    t2 = this.v3;
    if (2 >= t3)
      throw $.ioore(2);
    t1[2] = t2;
  }
};

$$.SimplexCache = {"": "Object;metric=,count=,indexA>,indexB>",
  setFrom$1: function(sc) {
    var t1 = this.indexA;
    $.setRange(t1, 0, $.length(t1), sc.get$indexA());
    t1 = this.indexB;
    $.setRange(t1, 0, $.length(t1), sc.get$indexB());
    this.metric = sc.get$metric();
    this.count = sc.get$count();
  },
  SimplexCache$0: function() {
    var t1, t3, t5, t6, i;
    t1 = this.indexA;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.SimplexCache$0$bailout(1, t1);
    t3 = this.indexB;
    if (typeof t3 !== "object" || t3 === null || (t3.constructor !== Array || !!t3.immutable$list) && !t3.$isJavaScriptIndexingBehavior)
      return this.SimplexCache$0$bailout(2, t1, t3, $.CONSTANT0);
    t5 = t1.length;
    t6 = t3.length;
    i = 0;
    for (; i < 3; ++i) {
      if (i >= t5)
        throw $.ioore(i);
      t1[i] = 2147483647;
      if (i >= t6)
        throw $.ioore(i);
      t3[i] = 2147483647;
    }
  },
  SimplexCache$0$bailout: function(state0, t1, t4, t3) {
    switch (state0) {
      case 0:
        t1 = this.indexA;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        t4 = this.indexB;
      case 2:
        var t6, i;
        state0 = 0;
        t6 = $.getInterceptor$JSArray(t4);
        i = 0;
        for (; i < 3; ++i) {
          t3.$indexSet(t1, i, 2147483647);
          t6.$indexSet(t4, i, 2147483647);
        }
    }
  }
};

$$.SimplexVertex = {"": "Object;wA>,wB>,w>,a=,indexA=,indexB=",
  setFrom$1: function(sv) {
    this.wA.setFrom$1(sv.get$wA());
    this.wB.setFrom$1(sv.get$wB());
    this.w.setFrom$1(sv.get$w());
    this.a = sv.get$a();
    this.indexA = sv.get$indexA();
    this.indexB = sv.get$indexB();
  },
  toString$0: function() {
    return "wA: " + $.S(this.wA) + ", wB: " + $.S(this.wB) + ", w: " + $.S(this.w);
  }
};

$$.TimeOfImpact = {"": "Object;cache,distanceInput,xfA,xfB,distanceOutput,fcn,indexes,sweepA>,sweepB>,pool",
  timeOfImpact$2: function(output, input) {
    var t1, proxyA, proxyB, t3, t4, tMax, t6, t8, target, t10, t11, t12, t2, t5, t7, t9, t13, iter, t14, t20, pushBackIter, done, s2, t15, s1, a2, a1, rootIterCount, t, s;
    t1 = $.TimeOfImpact_toiCalls;
    if (typeof t1 !== "number")
      return this.timeOfImpact$2$bailout(1, output, input, t1);
    $.TimeOfImpact_toiCalls = t1 + 1;
    output.set$state(0);
    output.set$t(input.get$tMax());
    proxyA = input.get$proxyA();
    proxyB = input.get$proxyB();
    t3 = this.sweepA;
    t3.setFrom$1(input.get$sweepA());
    t4 = this.sweepB;
    t4.setFrom$1(input.get$sweepB());
    t3.normalize$0();
    t4.normalize$0();
    tMax = input.get$tMax();
    if (tMax !== (tMax | 0))
      return this.timeOfImpact$2$bailout(2, output, input, 0, t3, t4, tMax, proxyA, proxyB);
    t6 = proxyA.get$radius();
    t8 = proxyB.get$radius();
    if (typeof t6 !== "number")
      return this.timeOfImpact$2$bailout(3, output, input, 0, t3, t4, tMax, proxyA, proxyB, t6);
    if (typeof t8 !== "number")
      return this.timeOfImpact$2$bailout(4, output, input, 0, t3, t4, tMax, proxyA, proxyB, t6, t8);
    target = $.max(0.005, t6 + t8 - 0.015);
    t10 = this.cache;
    t10.count = 0;
    t11 = input.get$proxyA();
    t12 = this.distanceInput;
    t12.proxyA = t11;
    t12.proxyB = input.get$proxyB();
    t12.useRadii = false;
    for (t1 = this.fcn, t2 = this.indexes, t5 = target + 0.00125, t6 = target - 0.00125, t7 = this.distanceOutput, t8 = this.xfA, t9 = this.xfB, t11 = this.pool, t13 = 0, iter = 0; true;) {
      t3.getTransform$2(t8, t13);
      t4.getTransform$2(t9, t13);
      t12.transformA = t8;
      t12.transformB = t9;
      t11.distance.distance$3(t7, t10, t12);
      t14 = t7.distance;
      if (typeof t14 !== "number")
        return this.timeOfImpact$2$bailout(5, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, t14, t10, t12, t13);
      if (t14 <= 0) {
        output.set$state(2);
        output.set$t(0);
        break;
      }
      if (t14 < t5) {
        output.set$state(3);
        output.set$t(t13);
        break;
      }
      t1.initialize$6(t10, proxyA, t3, proxyB, t4, t13);
      for (t20 = tMax, pushBackIter = 0; done = false, true;) {
        s2 = t1.findMinSeparation$2(t2, t20);
        if (typeof s2 !== "number")
          return this.timeOfImpact$2$bailout(7, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2);
        if (s2 > t5) {
          output.set$state(4);
          output.set$t(tMax);
          done = true;
          break;
        }
        if (s2 > t6) {
          t13 = t20;
          done = false;
          break;
        }
        t14 = t2.length;
        if (0 >= t14)
          throw $.ioore(0);
        t15 = t2[0];
        if (1 >= t14)
          throw $.ioore(1);
        s1 = t1.evaluate$3(t15, t2[1], t13);
        if (typeof s1 !== "number")
          return this.timeOfImpact$2$bailout(8, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1);
        if (s1 < t6) {
          output.set$state(1);
          output.set$t(t13);
          done = true;
          break;
        }
        if (s1 <= t5) {
          output.set$state(3);
          output.set$t(t13);
          done = true;
          break;
        }
        for (a2 = t20, a1 = t13, rootIterCount = 0; true;) {
          t = (rootIterCount & 1) === 1 ? a1 + (target - s1) * (a2 - a1) / (s2 - s1) : 0.5 * (a1 + a2);
          t14 = t2.length;
          if (0 >= t14)
            throw $.ioore(0);
          t15 = t2[0];
          if (1 >= t14)
            throw $.ioore(1);
          s = t1.evaluate$3(t15, t2[1], t);
          if (typeof s !== "number")
            return this.timeOfImpact$2$bailout(10, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, t, s);
          t14 = $.CONSTANT4.abs$0(s - target);
          if (typeof t14 !== "number")
            return this.timeOfImpact$2$bailout(11, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, $.CONSTANT4, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, t, s, t14);
          if (t14 < 0.00125) {
            t20 = t;
            break;
          }
          if (s > target) {
            a1 = t;
            s1 = s;
          } else {
            a2 = t;
            s2 = s;
          }
          if (a1 !== (a1 | 0))
            return this.timeOfImpact$2$bailout(12, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2);
          ++rootIterCount;
          t15 = $.TimeOfImpact_toiRootIters;
          if (typeof t15 !== "number")
            return this.timeOfImpact$2$bailout(13, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, 0, 0, 0, t15);
          $.TimeOfImpact_toiRootIters = t15 + 1;
          if (rootIterCount === 50)
            break;
        }
        if (t20 !== (t20 | 0))
          return this.timeOfImpact$2$bailout(14, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, 0, t10, t12, t13, t20, pushBackIter, 0, 0, rootIterCount);
        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
        ++pushBackIter;
        if (pushBackIter === 8) {
          done = false;
          break;
        }
      }
      ++iter;
      t14 = $.TimeOfImpact_toiIters;
      if (typeof t14 !== "number")
        return this.timeOfImpact$2$bailout(15, output, 0, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, t14, t10, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, done);
      $.TimeOfImpact_toiIters = t14 + 1;
      if (done)
        break;
      if (iter === 1000) {
        output.set$state(1);
        output.set$t(t13);
        break;
      }
    }
    $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
  },
  timeOfImpact$2$bailout: function(state0, output, input, t1, t3, t4, tMax, proxyA, proxyB, t6, t8, iter, t2, target, t9, t11, t5, t7, t14, t10, t12, t13, t20, pushBackIter, s2, s1, rootIterCount, a1, a2, t16, t, s, t15, done) {
    switch (state0) {
      case 0:
        t1 = $.TimeOfImpact_toiCalls;
      case 1:
        state0 = 0;
        $.TimeOfImpact_toiCalls = $.$$add(t1, 1);
        output.set$state(0);
        output.set$t(input.get$tMax());
        proxyA = input.get$proxyA();
        proxyB = input.get$proxyB();
        t3 = this.sweepA;
        t3.setFrom$1(input.get$sweepA());
        t4 = this.sweepB;
        t4.setFrom$1(input.get$sweepB());
        t3.normalize$0();
        t4.normalize$0();
        tMax = input.get$tMax();
      case 2:
        state0 = 0;
        t6 = proxyA.get$radius();
      case 3:
        state0 = 0;
        t8 = proxyB.get$radius();
      case 4:
        state0 = 0;
        target = $.max(0.005, $.$$sub($.$$add(t6, t8), 0.015));
        t10 = this.cache;
        t10.count = 0;
        t11 = input.get$proxyA();
        t12 = this.distanceInput;
        t12.proxyA = t11;
        t12.proxyB = input.get$proxyB();
        t12.useRadii = false;
        t1 = this.fcn;
        t2 = this.indexes;
        t5 = target + 0.00125;
        t6 = target - 0.00125;
        t7 = this.distanceOutput;
        t8 = this.xfA;
        t9 = this.xfB;
        t11 = this.pool;
        t13 = 0;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t3.getTransform$2(t8, t13);
                t4.getTransform$2(t9, t13);
                t12.transformA = t8;
                t12.transformB = t9;
                t11.distance.distance$3(t7, t10, t12);
                t14 = t7.distance;
              case 5:
                state0 = 0;
                if ($.$$le(t14, 0) === true) {
                  output.set$state(2);
                  output.set$t(0);
                  break L0;
                }
                t14 = t7.distance;
              case 6:
                state0 = 0;
                if ($.$$lt(t14, t5) === true) {
                  output.set$state(3);
                  output.set$t(t13);
                  break L0;
                }
                t1.initialize$6(t10, proxyA, t3, proxyB, t4, t13);
                t20 = tMax;
                pushBackIter = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        done = false;
                        if (!true)
                          break L1;
                        s2 = t1.findMinSeparation$2(t2, t20);
                      case 7:
                        state0 = 0;
                        t14 = $.getInterceptor$JSNumber(s2);
                        if (t14.$gt(s2, t5) === true) {
                          output.set$state(4);
                          output.set$t(tMax);
                          done = true;
                          break L1;
                        }
                        if (t14.$gt(s2, t6) === true) {
                          t13 = t20;
                          done = false;
                          break L1;
                        }
                        t14 = t2.length;
                        if (0 >= t14)
                          throw $.ioore(0);
                        t15 = t2[0];
                        if (1 >= t14)
                          throw $.ioore(1);
                        s1 = t1.evaluate$3(t15, t2[1], t13);
                      case 8:
                        state0 = 0;
                        t14 = $.getInterceptor$JSNumber(s1);
                        if (t14.$lt(s1, t6) === true) {
                          output.set$state(1);
                          output.set$t(t13);
                          done = true;
                          break L1;
                        }
                        if (t14.$le(s1, t5) === true) {
                          output.set$state(3);
                          output.set$t(t13);
                          done = true;
                          break L1;
                        }
                        a2 = t20;
                        a1 = t13;
                        rootIterCount = 0;
                      default:
                        L2:
                          while (true)
                            switch (state0) {
                              case 0:
                                if (!true)
                                  break L2;
                                t14 = $.getInterceptor$JSNumber(a1);
                              case 9:
                                if (state0 === 9 || state0 === 0 && (rootIterCount & 1) === 1)
                                  switch (state0) {
                                    case 0:
                                      if (typeof s1 !== "number")
                                        throw $.iae(s1);
                                      t15 = $.$$sub(a2, a1);
                                      if (typeof t15 !== "number")
                                        throw $.iae(t15);
                                      t16 = $.$$sub(s2, s1);
                                      if (typeof t16 !== "number")
                                        throw $.iae(t16);
                                      t16 = (target - s1) * t15 / t16;
                                    case 9:
                                      state0 = 0;
                                      t = t14.$add(a1, t16);
                                  }
                                else {
                                  t14 = t14.$add(a1, a2);
                                  if (typeof t14 !== "number")
                                    throw $.iae(t14);
                                  t = 0.5 * t14;
                                }
                                t14 = t2.length;
                                if (0 >= t14)
                                  throw $.ioore(0);
                                t15 = t2[0];
                                if (1 >= t14)
                                  throw $.ioore(1);
                                s = t1.evaluate$3(t15, t2[1], t);
                              case 10:
                                state0 = 0;
                                t14 = $.getInterceptor$JSNumber(s);
                                t15 = $.abs(t14.$sub(s, target));
                              case 11:
                                state0 = 0;
                                if ($.$$lt(t15, 0.00125) === true) {
                                  t20 = t;
                                  break L2;
                                }
                                if (t14.$gt(s, target) === true) {
                                  a1 = t;
                                  s1 = s;
                                } else {
                                  a2 = t;
                                  s2 = s;
                                }
                              case 12:
                                state0 = 0;
                                ++rootIterCount;
                                t15 = $.TimeOfImpact_toiRootIters;
                              case 13:
                                state0 = 0;
                                $.TimeOfImpact_toiRootIters = $.$$add(t15, 1);
                                if (rootIterCount === 50)
                                  break L2;
                            }
                      case 14:
                        state0 = 0;
                        $.TimeOfImpact_toiMaxRootIters = $.max($.TimeOfImpact_toiMaxRootIters, rootIterCount);
                        ++pushBackIter;
                        if (pushBackIter === 8) {
                          done = false;
                          break L1;
                        }
                    }
                ++iter;
                t14 = $.TimeOfImpact_toiIters;
              case 15:
                state0 = 0;
                $.TimeOfImpact_toiIters = $.$$add(t14, 1);
                if (done)
                  break L0;
                if (iter === 1000) {
                  output.set$state(1);
                  output.set$t(t13);
                  break L0;
                }
            }
        $.TimeOfImpact_toiMaxIters = $.max($.TimeOfImpact_toiMaxIters, iter);
    }
  },
  get$timeOfImpact: function() {
    return new $.BoundClosure$2(this, "timeOfImpact$2");
  },
  TimeOfImpact$_construct$1: function(argPool) {
    var t1, t2;
    t1 = this.indexes;
    t2 = t1.length;
    if (0 >= t2)
      throw $.ioore(0);
    t1[0] = 0;
    if (1 >= t2)
      throw $.ioore(1);
    t1[1] = 0;
    $.TimeOfImpact_toiCalls = 0;
    $.TimeOfImpact_toiIters = 0;
    $.TimeOfImpact_toiMaxIters = 0;
    $.TimeOfImpact_toiRootIters = 0;
    $.TimeOfImpact_toiMaxRootIters = 0;
  }
};

$$.SeparationFunction = {"": "Object;proxyA=,proxyB=,type=,localPoint>,axis,sweepA>,sweepB>,localPointA,localPointB,pointA>,pointB>,localPointA1,localPointA2,normal>,localPointB1,localPointB2,axisA,axisB,temp,xfa,xfb",
  initialize$6: function(cache, argProxyA, argSweepA, argProxyB, argSweepB, t1) {
    var count, t3, t4, t5, t2, t6, t8, t9, t11, t13, t7, t10, t12, t14, t15, t17, t20, s;
    this.proxyA = argProxyA;
    this.proxyB = argProxyB;
    count = cache.get$count();
    this.sweepA = argSweepA;
    this.sweepB = argSweepB;
    t3 = this.sweepA;
    t4 = this.xfa;
    t3.getTransform$2(t4, t1);
    t3 = this.sweepB;
    t5 = this.xfb;
    t3.getTransform$2(t5, t1);
    if (typeof count !== "number")
      return this.initialize$6$bailout(1, cache, argSweepA, count, argSweepB, t1);
    if (count === 1) {
      this.type = 0;
      t1 = this.localPointA;
      t2 = this.proxyA.get$vertices();
      t6 = cache.get$indexA();
      if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior))
        return this.initialize$6$bailout(3, cache, 0, 0, 0, t1, t4, t5, t2, t6);
      if (0 >= t6.length)
        throw $.ioore(0);
      t6 = t6[0];
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
        return this.initialize$6$bailout(2, cache, 0, 0, 0, t1, t4, t5, t2);
      if (t6 !== (t6 | 0))
        throw $.iae(t6);
      if (t6 < 0 || t6 >= t2.length)
        throw $.ioore(t6);
      t1.setFrom$1(t2[t6]);
      t8 = this.localPointB;
      t9 = this.proxyB.get$vertices();
      t11 = cache.get$indexB();
      if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior))
        return this.initialize$6$bailout(5, 0, 0, 0, 0, t1, t4, t5, 0, 0, t8, t9, t11);
      if (0 >= t11.length)
        throw $.ioore(0);
      t11 = t11[0];
      if (typeof t9 !== "string" && (typeof t9 !== "object" || t9 === null || t9.constructor !== Array && !t9.$isJavaScriptIndexingBehavior))
        return this.initialize$6$bailout(4, cache, 0, 0, 0, t1, t4, t5, 0, 0, t8, t9);
      if (t11 !== (t11 | 0))
        throw $.iae(t11);
      if (t11 < 0 || t11 >= t9.length)
        throw $.ioore(t11);
      t8.setFrom$1(t9[t11]);
      t13 = this.pointA;
      $.Transform_mulToOut(t4, t1, t13);
      t1 = this.pointB;
      $.Transform_mulToOut(t5, t8, t1);
      t8 = this.axis;
      t8.setFrom$1(t1).subLocal$1(t13);
      return t8.normalize$0();
    } else {
      t1 = cache.get$indexA();
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
        return this.initialize$6$bailout(6, cache, 0, 0, 0, t1, t4, t5);
      if (0 >= t1.length)
        throw $.ioore(0);
      t3 = t1[0];
      if (1 >= t1.length)
        throw $.ioore(1);
      t3 = $.$$eq(t3, t1[1]);
      t6 = this.pointA;
      t7 = this.normal;
      t8 = this.pointB;
      t9 = this.localPoint;
      t10 = this.temp;
      t11 = this.axis;
      if (t3 === true) {
        this.type = 2;
        t1 = this.localPointB1;
        t2 = this.proxyB.get$vertices();
        t12 = cache.get$indexB();
        if (typeof t12 !== "string" && (typeof t12 !== "object" || t12 === null || t12.constructor !== Array && !t12.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(9, cache, 0, 0, 0, t1, t4, t5, t2, t12, t7, t8, t10, 0, t9, t11, t6);
        if (0 >= t12.length)
          throw $.ioore(0);
        t12 = t12[0];
        if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(8, cache, 0, 0, 0, t1, t4, t5, t2, 0, t7, t8, t10, 0, t9, t11, t6);
        if (t12 !== (t12 | 0))
          throw $.iae(t12);
        if (t12 < 0 || t12 >= t2.length)
          throw $.ioore(t12);
        t1.setFrom$1(t2[t12]);
        t14 = this.localPointB2;
        t15 = this.proxyB.get$vertices();
        t17 = cache.get$indexB();
        if (typeof t17 !== "string" && (typeof t17 !== "object" || t17 === null || t17.constructor !== Array && !t17.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(11, cache, 0, 0, 0, t1, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6, t14, t15, t17);
        if (1 >= t17.length)
          throw $.ioore(1);
        t17 = t17[1];
        if (typeof t15 !== "string" && (typeof t15 !== "object" || t15 === null || t15.constructor !== Array && !t15.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(10, cache, 0, 0, 0, t1, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6, t14, t15);
        if (t17 !== (t17 | 0))
          throw $.iae(t17);
        if (t17 < 0 || t17 >= t15.length)
          throw $.ioore(t17);
        t14.setFrom$1(t15[t17]);
        t10.setFrom$1(t14).subLocal$1(t1);
        $.Vector_crossVectorAndNumToOut(t10, 1, t11);
        t11.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t5.rotation, t11, t7);
        t9.setFrom$1(t1);
        t9.addLocal$1(t14);
        t9.mulLocal$1(0.5);
        $.Transform_mulToOut(t5, t9, t8);
        t9 = this.localPointA;
        t5 = this.proxyA.get$vertices();
        t1 = cache.get$indexA();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(13, 0, 0, 0, 0, t1, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6);
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0];
        if (typeof t5 !== "string" && (typeof t5 !== "object" || t5 === null || t5.constructor !== Array && !t5.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(12, cache, 0, 0, 0, 0, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6);
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= t5.length)
          throw $.ioore(t1);
        t9.setFrom$1(t5[t1]);
        $.Transform_mulToOut(t4, t9, t6);
        t10.setFrom$1(t6);
        t10.subLocal$1(t8);
        t8 = t10.x;
        t9 = t7.x;
        if (typeof t8 !== "number")
          return this.initialize$6$bailout(14, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, t8, t10, 0, 0, t11);
        if (typeof t9 !== "number")
          return this.initialize$6$bailout(15, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, t8, t10, 0, t9, t11);
        t9 = t8 * t9;
        t10 = t10.y;
        t20 = t7.y;
        if (typeof t10 !== "number")
          return this.initialize$6$bailout(16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t10, 0, t9, t11);
        if (typeof t20 !== "number")
          return this.initialize$6$bailout(17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, t9, t11, 0, 0, 0, 0, t20);
        s = t9 + t10 * t20;
        if (s < 0) {
          t11.negateLocal$0();
          s = -s;
        }
        return s;
      } else {
        this.type = 1;
        t1 = this.localPointA1;
        t2 = this.proxyA.get$vertices();
        t12 = cache.get$indexA();
        if (typeof t12 !== "string" && (typeof t12 !== "object" || t12 === null || t12.constructor !== Array && !t12.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(19, cache, 0, 0, 0, t1, t4, t5, t2, t12, t7, t8, t10, 0, t9, t11, t6);
        if (0 >= t12.length)
          throw $.ioore(0);
        t12 = t12[0];
        if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(18, cache, 0, 0, 0, t1, t4, t5, t2, 0, t7, t8, t10, 0, t9, t11, t6);
        if (t12 !== (t12 | 0))
          throw $.iae(t12);
        if (t12 < 0 || t12 >= t2.length)
          throw $.ioore(t12);
        t1.setFrom$1(t2[t12]);
        t14 = this.localPointA2;
        t15 = this.proxyA.get$vertices();
        t17 = cache.get$indexA();
        if (typeof t17 !== "string" && (typeof t17 !== "object" || t17 === null || t17.constructor !== Array && !t17.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(21, cache, 0, 0, 0, t1, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6, t14, t15, t17);
        if (1 >= t17.length)
          throw $.ioore(1);
        t17 = t17[1];
        if (typeof t15 !== "string" && (typeof t15 !== "object" || t15 === null || t15.constructor !== Array && !t15.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(20, cache, 0, 0, 0, t1, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6, t14, t15);
        if (t17 !== (t17 | 0))
          throw $.iae(t17);
        if (t17 < 0 || t17 >= t15.length)
          throw $.ioore(t17);
        t14.setFrom$1(t15[t17]);
        t10.setFrom$1(t14);
        t10.subLocal$1(t1);
        $.Vector_crossVectorAndNumToOut(t10, 1, t11);
        t11.normalize$0();
        $.Matrix22_mulMatrixAndVectorToOut(t4.rotation, t11, t7);
        t9.setFrom$1(t1);
        t9.addLocal$1(t14);
        t9.mulLocal$1(0.5);
        $.Transform_mulToOut(t4, t9, t6);
        t9 = this.localPointB;
        t4 = this.proxyB.get$vertices();
        t1 = cache.get$indexB();
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(23, 0, 0, 0, 0, t1, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6);
        if (0 >= t1.length)
          throw $.ioore(0);
        t1 = t1[0];
        if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior))
          return this.initialize$6$bailout(22, cache, 0, 0, 0, 0, t4, t5, 0, 0, t7, t8, t10, 0, t9, t11, t6);
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= t4.length)
          throw $.ioore(t1);
        t9.setFrom$1(t4[t1]);
        $.Transform_mulToOut(t5, t9, t8);
        t10.setFrom$1(t8);
        t10.subLocal$1(t6);
        t6 = t10.x;
        t9 = t7.x;
        if (typeof t6 !== "number")
          return this.initialize$6$bailout(24, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t10, 0, 0, t11, t6);
        if (typeof t9 !== "number")
          return this.initialize$6$bailout(25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t10, 0, t9, t11, t6);
        t9 = t6 * t9;
        t10 = t10.y;
        t20 = t7.y;
        if (typeof t10 !== "number")
          return this.initialize$6$bailout(26, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, t10, 0, t9, t11);
        if (typeof t20 !== "number")
          return this.initialize$6$bailout(27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, t9, t11, 0, 0, 0, 0, t20);
        s = t9 + t10 * t20;
        if (s < 0) {
          t11.negateLocal$0();
          s = -s;
        }
        return s;
      }
    }
  },
  initialize$6$bailout: function(state0, cache, argSweepA, count, argSweepB, t1, t4, t5, t2, t6, t8, t9, t11, t3, t10, t12, t7, t14, t15, t17, t20) {
    switch (state0) {
      case 0:
        this.proxyA = argProxyA;
        this.proxyB = argProxyB;
        count = cache.get$count();
      case 1:
        state0 = 0;
        this.sweepA = argSweepA;
        this.sweepB = argSweepB;
        t3 = this.sweepA;
        t4 = this.xfa;
        t3.getTransform$2(t4, t1);
        t3 = this.sweepB;
        t5 = this.xfb;
        t3.getTransform$2(t5, t1);
      default:
        var t13, s;
        if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && $.$$eq(count, 1) === true)
          switch (state0) {
            case 0:
              this.type = 0;
              t1 = this.localPointA;
              t2 = this.proxyA.get$vertices();
            case 2:
              state0 = 0;
              t6 = cache.get$indexA();
            case 3:
              state0 = 0;
              t1.setFrom$1($.$$index(t2, $.$$index(t6, 0)));
              t8 = this.localPointB;
              t9 = this.proxyB.get$vertices();
            case 4:
              state0 = 0;
              t11 = cache.get$indexB();
            case 5:
              state0 = 0;
              t8.setFrom$1($.$$index(t9, $.$$index(t11, 0)));
              t13 = this.pointA;
              $.Transform_mulToOut(t4, t1, t13);
              t1 = this.pointB;
              $.Transform_mulToOut(t5, t8, t1);
              t8 = this.axis;
              t8.setFrom$1(t1).subLocal$1(t13);
              return t8.normalize$0();
          }
        else
          switch (state0) {
            case 0:
              t1 = cache.get$indexA();
            case 6:
              state0 = 0;
              t1 = $.$$index(t1, 0);
              t3 = cache.get$indexA();
            case 7:
              state0 = 0;
              t1 = $.$$eq(t1, $.$$index(t3, 1));
              t7 = this.pointA;
              t8 = this.normal;
              t9 = this.pointB;
              t10 = this.localPoint;
              t11 = this.temp;
              t12 = this.axis;
            default:
              if (state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 0 && t1 === true)
                switch (state0) {
                  case 0:
                    this.type = 2;
                    t1 = this.localPointB1;
                    t2 = this.proxyB.get$vertices();
                  case 8:
                    state0 = 0;
                    t6 = cache.get$indexB();
                  case 9:
                    state0 = 0;
                    t1.setFrom$1($.$$index(t2, $.$$index(t6, 0)));
                    t14 = this.localPointB2;
                    t15 = this.proxyB.get$vertices();
                  case 10:
                    state0 = 0;
                    t17 = cache.get$indexB();
                  case 11:
                    state0 = 0;
                    t14.setFrom$1($.$$index(t15, $.$$index(t17, 1)));
                    t11.setFrom$1(t14).subLocal$1(t1);
                    $.Vector_crossVectorAndNumToOut(t11, 1, t12);
                    t12.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t5.rotation, t12, t8);
                    t10.setFrom$1(t1);
                    t10.addLocal$1(t14);
                    t10.mulLocal$1(0.5);
                    $.Transform_mulToOut(t5, t10, t9);
                    t10 = this.localPointA;
                    t5 = this.proxyA.get$vertices();
                  case 12:
                    state0 = 0;
                    t1 = cache.get$indexA();
                  case 13:
                    state0 = 0;
                    t10.setFrom$1($.$$index(t5, $.$$index(t1, 0)));
                    $.Transform_mulToOut(t4, t10, t7);
                    t11.setFrom$1(t7);
                    t11.subLocal$1(t9);
                    t9 = t11.x;
                  case 14:
                    state0 = 0;
                    t10 = t8.x;
                  case 15:
                    state0 = 0;
                    t10 = $.$$mul(t9, t10);
                    t11 = t11.y;
                  case 16:
                    state0 = 0;
                    t20 = t8.y;
                  case 17:
                    state0 = 0;
                    s = $.$$add(t10, $.$$mul(t11, t20));
                    t1 = $.getInterceptor$JSNumber(s);
                    if (t1.$lt(s, 0) === true) {
                      t12.negateLocal$0();
                      s = t1.$negate(s);
                    }
                    return s;
                }
              else
                switch (state0) {
                  case 0:
                    this.type = 1;
                    t1 = this.localPointA1;
                    t2 = this.proxyA.get$vertices();
                  case 18:
                    state0 = 0;
                    t6 = cache.get$indexA();
                  case 19:
                    state0 = 0;
                    t1.setFrom$1($.$$index(t2, $.$$index(t6, 0)));
                    t14 = this.localPointA2;
                    t15 = this.proxyA.get$vertices();
                  case 20:
                    state0 = 0;
                    t17 = cache.get$indexA();
                  case 21:
                    state0 = 0;
                    t14.setFrom$1($.$$index(t15, $.$$index(t17, 1)));
                    t11.setFrom$1(t14);
                    t11.subLocal$1(t1);
                    $.Vector_crossVectorAndNumToOut(t11, 1, t12);
                    t12.normalize$0();
                    $.Matrix22_mulMatrixAndVectorToOut(t4.rotation, t12, t8);
                    t10.setFrom$1(t1);
                    t10.addLocal$1(t14);
                    t10.mulLocal$1(0.5);
                    $.Transform_mulToOut(t4, t10, t7);
                    t10 = this.localPointB;
                    t4 = this.proxyB.get$vertices();
                  case 22:
                    state0 = 0;
                    t1 = cache.get$indexB();
                  case 23:
                    state0 = 0;
                    t10.setFrom$1($.$$index(t4, $.$$index(t1, 0)));
                    $.Transform_mulToOut(t5, t10, t9);
                    t11.setFrom$1(t9);
                    t11.subLocal$1(t7);
                    t7 = t11.x;
                  case 24:
                    state0 = 0;
                    t10 = t8.x;
                  case 25:
                    state0 = 0;
                    t10 = $.$$mul(t7, t10);
                    t11 = t11.y;
                  case 26:
                    state0 = 0;
                    t20 = t8.y;
                  case 27:
                    state0 = 0;
                    s = $.$$add(t10, $.$$mul(t11, t20));
                    t1 = $.getInterceptor$JSNumber(s);
                    if (t1.$lt(s, 0) === true) {
                      t12.negateLocal$0();
                      s = t1.$negate(s);
                    }
                    return s;
                }
          }
    }
  },
  findMinSeparation$2: function(indexes, t) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9;
    t1 = this.sweepA;
    t2 = this.xfa;
    t1.getTransform$2(t2, t);
    t1 = this.sweepB;
    t3 = this.xfb;
    t1.getTransform$2(t3, t);
    t1 = $.getInterceptor$JSArray(indexes);
    switch (this.type) {
      case 0:
        t4 = t2.rotation;
        t5 = this.axis;
        t6 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t4, t5, t6);
        t4 = t3.rotation;
        t7 = t5.negateLocal$0();
        t8 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t4, t7, t8);
        t5.negateLocal$0();
        t1.$indexSet(indexes, 0, this.proxyA.getSupport$1(t6));
        t1.$indexSet(indexes, 1, this.proxyB.getSupport$1(t8));
        t7 = this.localPointA;
        t7.setFrom$1($.$$index(this.proxyA.get$vertices(), t1.$index(indexes, 0)));
        t4 = this.localPointB;
        t4.setFrom$1($.$$index(this.proxyB.get$vertices(), t1.$index(indexes, 1)));
        t9 = this.pointA;
        $.Transform_mulToOut(t2, t7, t9);
        t7 = this.pointB;
        $.Transform_mulToOut(t3, t4, t7);
        t9 = t7.subLocal$1(t9);
        return $.$$add($.$$mul(t9.get$x(), t5.x), $.$$mul(t9.get$y(), t5.y));
      case 1:
        t4 = t2.rotation;
        t5 = this.axis;
        t6 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t4, t5, t6);
        t5 = this.localPoint;
        t4 = this.pointA;
        $.Transform_mulToOut(t2, t5, t4);
        t6.negateLocal$0();
        t5 = t3.rotation;
        t2 = this.axisB;
        $.Matrix22_mulTransMatrixAndVectorToOut(t5, t6, t2);
        t6.negateLocal$0();
        t1.$indexSet(indexes, 0, -1);
        t1.$indexSet(indexes, 1, this.proxyB.getSupport$1(t2));
        t5 = this.localPointB;
        t5.setFrom$1($.$$index(this.proxyB.get$vertices(), t1.$index(indexes, 1)));
        t7 = this.pointB;
        $.Transform_mulToOut(t3, t5, t7);
        t4 = t7.subLocal$1(t4);
        return $.$$add($.$$mul(t4.get$x(), t6.x), $.$$mul(t4.get$y(), t6.y));
      case 2:
        t4 = t3.rotation;
        t5 = this.axis;
        t6 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t4, t5, t6);
        t5 = this.localPoint;
        t4 = this.pointB;
        $.Transform_mulToOut(t3, t5, t4);
        t5 = t2.rotation;
        t3 = t6.negateLocal$0();
        t7 = this.axisA;
        $.Matrix22_mulTransMatrixAndVectorToOut(t5, t3, t7);
        t6.negateLocal$0();
        t1.$indexSet(indexes, 1, -1);
        t1.$indexSet(indexes, 0, this.proxyA.getSupport$1(t7));
        t3 = this.localPointA;
        t3.setFrom$1($.$$index(this.proxyA.get$vertices(), t1.$index(indexes, 0)));
        t5 = this.pointA;
        $.Transform_mulToOut(t2, t3, t5);
        t4 = t5.subLocal$1(t4);
        return $.$$add($.$$mul(t4.get$x(), t6.x), $.$$mul(t4.get$y(), t6.y));
      default:
        t1.$indexSet(indexes, 0, -1);
        t1.$indexSet(indexes, 1, -1);
        return 0;
    }
  },
  evaluate$3: function(indexA, indexB, t) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this.sweepA;
    t2 = this.xfa;
    t1.getTransform$2(t2, t);
    t1 = this.sweepB;
    t3 = this.xfb;
    t1.getTransform$2(t3, t);
    switch (this.type) {
      case 0:
        t1 = t2.rotation;
        t4 = this.axis;
        $.Matrix22_mulTransMatrixAndVectorToOut(t1, t4, this.axisA);
        $.Matrix22_mulTransMatrixAndVectorToOut(t3.rotation, t4.negateLocal$0(), this.axisB);
        t4.negateLocal$0();
        t1 = this.localPointA;
        t1.setFrom$1($.$$index(this.proxyA.get$vertices(), indexA));
        t5 = this.localPointB;
        t5.setFrom$1($.$$index(this.proxyB.get$vertices(), indexB));
        t6 = this.pointA;
        $.Transform_mulToOut(t2, t1, t6);
        t1 = this.pointB;
        $.Transform_mulToOut(t3, t5, t1);
        t6 = t1.subLocal$1(t6);
        return $.$$add($.$$mul(t6.get$x(), t4.x), $.$$mul(t6.get$y(), t4.y));
      case 1:
        t1 = t2.rotation;
        t4 = this.axis;
        t5 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t4, t5);
        t4 = this.localPoint;
        t1 = this.pointA;
        $.Transform_mulToOut(t2, t4, t1);
        t5.negateLocal$0();
        $.Matrix22_mulTransMatrixAndVectorToOut(t3.rotation, t5, this.axisB);
        t5.negateLocal$0();
        t4 = this.localPointB;
        t4.setFrom$1($.$$index(this.proxyB.get$vertices(), indexB));
        t2 = this.pointB;
        $.Transform_mulToOut(t3, t4, t2);
        t1 = t2.subLocal$1(t1);
        return $.$$add($.$$mul(t1.get$x(), t5.x), $.$$mul(t1.get$y(), t5.y));
      case 2:
        t1 = t3.rotation;
        t4 = this.axis;
        t5 = this.normal;
        $.Matrix22_mulMatrixAndVectorToOut(t1, t4, t5);
        t4 = this.localPoint;
        t1 = this.pointB;
        $.Transform_mulToOut(t3, t4, t1);
        $.Matrix22_mulTransMatrixAndVectorToOut(t2.rotation, t5.negateLocal$0(), this.axisA);
        t5.negateLocal$0();
        t4 = this.localPointA;
        t4.setFrom$1($.$$index(this.proxyA.get$vertices(), indexA));
        t3 = this.pointA;
        $.Transform_mulToOut(t2, t4, t3);
        t1 = t3.subLocal$1(t1);
        return $.$$add($.$$mul(t1.get$x(), t5.x), $.$$mul(t1.get$y(), t5.y));
      default:
        return 0;
    }
  }
};

$$.TimeOfImpactInput = {"": "Object;proxyA>,proxyB>,sweepA>,sweepB>,tMax="};

$$.TimeOfImpactOutput = {"": "Object;state=,t="};

$$.WorldManifold = {"": "Object;normal>,points>,pool3,pool4",
  initialize$5: function(manifold, xfA, radiusA, xfB, radiusB) {
    var pointA, pointB, t1, cAx, cAy, cBx, cBy, t2, t3, planePoint, clipPoint, i, scalar, t4, R, v;
    switch (manifold.get$type()) {
      case 0:
        pointA = this.pool3;
        pointB = this.pool4;
        t1 = this.normal;
        t1.x = 1;
        t1.y = 0;
        pointA.x = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), manifold.get$localPoint().get$y()));
        pointA.y = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), manifold.get$localPoint().get$y()));
        pointB.x = $.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), $.$$index(manifold.get$points(), 0).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), $.$$index(manifold.get$points(), 0).get$localPoint().get$y()));
        pointB.y = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), $.$$index(manifold.get$points(), 0).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), $.$$index(manifold.get$points(), 0).get$localPoint().get$y()));
        if ($.$$gt($.MathBox_distanceSquared(pointA, pointB), 1.4208639999999999e-14) === true) {
          t1.x = $.$$sub(pointB.x, pointA.x);
          t1.y = $.$$sub(pointB.y, pointA.y);
          t1.normalize$0();
        }
        cAx = $.$$add($.$$mul(t1.x, radiusA), pointA.x);
        cAy = $.$$add($.$$mul(t1.y, radiusA), pointA.y);
        cBx = $.$$add($.$$mul($.$$negate(t1.x), radiusB), pointB.x);
        cBy = $.$$add($.$$mul($.$$negate(t1.y), radiusB), pointB.y);
        t2 = $.$$mul($.$$add(cAx, cBx), 0.5);
        t3 = this.points;
        if (0 >= t3.length)
          throw $.ioore(0);
        t3[0].set$x(t2);
        t2 = $.$$mul($.$$add(cAy, cBy), 0.5);
        if (0 >= t3.length)
          throw $.ioore(0);
        t3[0].set$y(t2);
        return;
      case 1:
        planePoint = this.pool3;
        t1 = $.$$add($.$$mul(xfA.get$rotation().get$col1().get$x(), manifold.get$localNormal().get$x()), $.$$mul(xfA.get$rotation().get$col2().get$x(), manifold.get$localNormal().get$y()));
        t2 = this.normal;
        t2.x = t1;
        t2.y = $.$$add($.$$mul(xfA.get$rotation().get$col1().get$y(), manifold.get$localNormal().get$x()), $.$$mul(xfA.get$rotation().get$col2().get$y(), manifold.get$localNormal().get$y()));
        planePoint.x = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), manifold.get$localPoint().get$y()));
        planePoint.y = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), manifold.get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), manifold.get$localPoint().get$y()));
        clipPoint = this.pool4;
        for (t1 = $.getInterceptor$JSNumber(radiusA), t3 = this.points, i = 0; $.CONSTANT5.$lt(i, manifold.get$pointCount()); ++i) {
          clipPoint.x = $.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          clipPoint.y = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          scalar = t1.$sub(radiusA, $.$$add($.$$mul($.$$sub(clipPoint.x, planePoint.x), t2.x), $.$$mul($.$$sub(clipPoint.y, planePoint.y), t2.y)));
          cAx = $.$$add($.$$mul(t2.x, scalar), clipPoint.x);
          cAy = $.$$add($.$$mul(t2.y, scalar), clipPoint.y);
          cBx = $.$$add($.$$mul($.$$negate(t2.x), radiusB), clipPoint.x);
          cBy = $.$$add($.$$mul($.$$negate(t2.y), radiusB), clipPoint.y);
          t4 = $.$$mul($.$$add(cAx, cBx), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$x(t4);
          t4 = $.$$mul($.$$add(cAy, cBy), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$y(t4);
        }
        return;
      case 2:
        planePoint = this.pool3;
        R = xfB.get$rotation();
        t1 = $.$$add($.$$mul(R.get$col1().get$x(), manifold.get$localNormal().get$x()), $.$$mul(R.get$col2().get$x(), manifold.get$localNormal().get$y()));
        t2 = this.normal;
        t2.x = t1;
        t2.y = $.$$add($.$$mul(R.get$col1().get$y(), manifold.get$localNormal().get$x()), $.$$mul(R.get$col2().get$y(), manifold.get$localNormal().get$y()));
        v = manifold.get$localPoint();
        planePoint.x = $.$$add($.$$add(xfB.get$position().get$x(), $.$$mul(xfB.get$rotation().get$col1().get$x(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$x(), v.get$y()));
        planePoint.y = $.$$add($.$$add(xfB.get$position().get$y(), $.$$mul(xfB.get$rotation().get$col1().get$y(), v.get$x())), $.$$mul(xfB.get$rotation().get$col2().get$y(), v.get$y()));
        clipPoint = this.pool4;
        for (t1 = $.getInterceptor$JSNumber(radiusB), t3 = this.points, i = 0; $.CONSTANT5.$lt(i, manifold.get$pointCount()); ++i) {
          clipPoint.x = $.$$add($.$$add(xfA.get$position().get$x(), $.$$mul(xfA.get$rotation().get$col1().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$x(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          clipPoint.y = $.$$add($.$$add(xfA.get$position().get$y(), $.$$mul(xfA.get$rotation().get$col1().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$x())), $.$$mul(xfA.get$rotation().get$col2().get$y(), $.$$index(manifold.get$points(), i).get$localPoint().get$y()));
          scalar = t1.$sub(radiusB, $.$$add($.$$mul($.$$sub(clipPoint.x, planePoint.x), t2.x), $.$$mul($.$$sub(clipPoint.y, planePoint.y), t2.y)));
          cBx = $.$$add($.$$mul(t2.x, scalar), clipPoint.x);
          cBy = $.$$add($.$$mul(t2.y, scalar), clipPoint.y);
          cAx = $.$$add($.$$mul($.$$negate(t2.x), radiusA), clipPoint.x);
          cAy = $.$$add($.$$mul($.$$negate(t2.y), radiusA), clipPoint.y);
          t4 = $.$$mul($.$$add(cAx, cBx), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$x(t4);
          t4 = $.$$mul($.$$add(cAy, cBy), 0.5);
          if (i >= t3.length)
            throw $.ioore(i);
          t3[i].set$y(t4);
        }
        t2.x = $.$$negate(t2.x);
        t2.y = $.$$negate(t2.y);
        break;
    }
  },
  WorldManifold$0: function() {
    var t1, i, t2;
    for (t1 = this.points, i = 0; i < 2; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.BroadPhase = {"": "Object;_tree,proxyCount,moveBuffer,_pairBuffer,_pairCapacity,_pairCount,queryProxy",
  createProxy$2: function(box, userData) {
    var node = this._tree.createProxy$2(box, userData);
    this.proxyCount = this.proxyCount + 1;
    this.moveBuffer.push(node);
    return node;
  },
  moveProxy$3: function(proxy, box, displacement) {
    if (this._tree.moveProxy$3(proxy, box, displacement) === true)
      this.moveBuffer.push(proxy);
  },
  testOverlap$2: function(proxyA, proxyB) {
    return $.AxisAlignedBox_testOverlap(proxyA.get$box(), proxyB.get$box());
  },
  updatePairs$1: function(callback) {
    var t1, i, t2, pairBuffer, primaryPair, pair;
    this._pairCount = 0;
    for (t1 = this._tree, i = 0; t2 = this.moveBuffer, i < t2.length; ++i) {
      this.queryProxy = t2[i];
      t2 = this.queryProxy;
      if (t2 == null)
        continue;
      t1.query$2(this, t2.get$box());
    }
    this.moveBuffer = $.List_List(0);
    pairBuffer = $.List_List$from($.CONSTANT0.getRange$2(this._pairBuffer, 0, this._pairCount));
    $.CONSTANT0.sort$1(pairBuffer, new $.BroadPhase_updatePairs_anon());
    $.CONSTANT0.setRange$3(this._pairBuffer, 0, this._pairCount, pairBuffer);
    for (i = 0; i < this._pairCount;) {
      t2 = this._pairBuffer;
      if (i < 0 || i >= t2.length)
        throw $.ioore(i);
      primaryPair = t2[i];
      callback.addPair$2(primaryPair.get$proxyA().get$userData(), primaryPair.get$proxyB().get$userData());
      ++i;
      for (; i < this._pairCount;) {
        t2 = this._pairBuffer;
        if (i >= t2.length)
          throw $.ioore(i);
        pair = t2[i];
        if ($.$$eq(pair.get$proxyA(), primaryPair.get$proxyA()) !== true || $.$$eq(pair.get$proxyB(), primaryPair.get$proxyB()) !== true)
          break;
        ++i;
      }
    }
    t1.rebalance$1(4);
  },
  treeCallback$1: function(proxy) {
    var t1, t2, oldBuffer, i, i0, t3, t4, t5;
    if ($.$$eq(proxy, this.queryProxy) === true)
      return true;
    t1 = this._pairCount;
    t2 = this._pairCapacity;
    if (t1 === t2) {
      oldBuffer = this._pairBuffer;
      this._pairCapacity = t2 * 2;
      this._pairBuffer = $.List_List(this._pairCapacity);
      for (t1 = this._pairBuffer, i = oldBuffer.length, t2 = t1.length, i0 = 0; i0 < i; ++i0) {
        t3 = oldBuffer[i0];
        if (i0 >= t2)
          throw $.ioore(i0);
        t1[i0] = t3;
      }
      for (; i < this._pairCapacity; ++i) {
        t1 = this._pairBuffer;
        t2 = $.Pair$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    t1 = $.$$lt(proxy.get$key(), this.queryProxy.get$key());
    t2 = this._pairBuffer;
    t3 = this._pairCount;
    if (t1 === true) {
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3].set$proxyA(proxy);
      t1 = this.queryProxy;
      t4 = this._pairBuffer;
      t5 = this._pairCount;
      if (t5 < 0 || t5 >= t4.length)
        throw $.ioore(t5);
      t4[t5].set$proxyB(t1);
    } else {
      t1 = this.queryProxy;
      if (t3 < 0 || t3 >= t2.length)
        throw $.ioore(t3);
      t2[t3].set$proxyA(t1);
      t1 = this._pairBuffer;
      t4 = this._pairCount;
      if (t4 < 0 || t4 >= t1.length)
        throw $.ioore(t4);
      t1[t4].set$proxyB(proxy);
    }
    this._pairCount = this._pairCount + 1;
    return true;
  },
  query$2: function(callback, box) {
    this._tree.query$2(callback, box);
  },
  BroadPhase$0: function() {
    var i, t1, t2;
    this.moveBuffer = $.List_List(0);
    this._pairBuffer = $.List_List(this._pairCapacity);
    for (i = 0; i < this._pairCapacity; ++i) {
      t1 = this._pairBuffer;
      t2 = $.Pair$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.DynamicTree = {"": "Object;_root,_nodeCount,_lastLeaf,_insertionCount,_path,_nodeStack,_drawVectors,_nodeCounter,_tempVector,_tempBox,center>,deltaOne,deltaTwo",
  createProxy$2: function(box, userData) {
    var proxy, t1, iterationCount, height, tryCount;
    proxy = this._allocateNode$0();
    t1 = $.$$sub(box.get$lowerBound().get$x(), 0.1);
    proxy.get$box().get$lowerBound().set$x(t1);
    t1 = $.$$sub(box.get$lowerBound().get$y(), 0.1);
    proxy.get$box().get$lowerBound().set$y(t1);
    t1 = $.$$add(box.get$upperBound().get$x(), 0.1);
    proxy.get$box().get$upperBound().set$x(t1);
    t1 = $.$$add(box.get$upperBound().get$y(), 0.1);
    proxy.get$box().get$upperBound().set$y(t1);
    proxy.set$userData(userData);
    this._insertLeaf$1(proxy);
    iterationCount = $.CONSTANT5.$shr(this._nodeCount, 4);
    height = this._computeHeight$1(this._root);
    if (typeof height !== "number")
      return this.createProxy$2$bailout(1, height, proxy, iterationCount);
    tryCount = 0;
    while (true) {
      if (!($.$$gt(height, 64) === true && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  createProxy$2$bailout: function(state0, height, proxy, iterationCount) {
    var tryCount = 0;
    while (true) {
      if (!($.$$gt(height, 64) === true && tryCount < 10))
        break;
      this.rebalance$1(iterationCount);
      height = this._computeHeight$1(this._root);
      ++tryCount;
    }
    return proxy;
  },
  moveProxy$3: function(argProxy, argBox, displacement) {
    var t1, t2, t3;
    if ($.contains(argProxy.get$box(), argBox) === true)
      return false;
    this._removeLeaf$1(argProxy);
    t1 = argBox.lowerBound;
    t1.set$x($.$$sub(t1.get$x(), 0.1));
    t1 = argBox.lowerBound;
    t1.set$y($.$$sub(t1.get$y(), 0.1));
    t1 = argBox.upperBound;
    t1.set$x($.$$add(t1.get$x(), 0.1));
    t1 = argBox.upperBound;
    t1.set$y($.$$add(t1.get$y(), 0.1));
    t1 = this._tempVector;
    t1.setFrom$1(displacement);
    t1.mulLocal$1(2);
    t2 = $.$$lt(t1.x, 0);
    t3 = t1.x;
    if (t2 === true) {
      t2 = argBox.lowerBound;
      t2.set$x($.$$add(t2.get$x(), t3));
    } else {
      t2 = argBox.upperBound;
      t2.set$x($.$$add(t2.get$x(), t3));
    }
    t2 = $.$$lt(t1.y, 0);
    t1 = t1.y;
    if (t2 === true) {
      t2 = argBox.lowerBound;
      t2.set$y($.$$add(t2.get$y(), t1));
    } else {
      t2 = argBox.upperBound;
      t2.set$y($.$$add(t2.get$y(), t1));
    }
    argProxy.get$box().setFrom$1(argBox);
    this._insertLeaf$1(argProxy);
    return true;
  },
  _allocateNode$0: function() {
    var t1, i, node;
    t1 = this._nodeStack;
    if ($.isEmpty(t1) === true)
      for (i = 0; i < 6; ++i)
        t1.addFirst$1($.DynamicTreeNode$_construct());
    node = t1.removeFirst$0();
    node.set$parent(null);
    node.set$childOne(null);
    node.set$childTwo(null);
    node.set$userData(null);
    node.set$key(this._nodeCounter);
    this._nodeCounter = this._nodeCounter + 1;
    this._nodeCount = this._nodeCount + 1;
    return node;
  },
  query$2: function(callback, argBox) {
    this._query$4(callback, argBox, this._root, 1);
  },
  _query$4: function(callback, argBox, node, count) {
    if (node == null)
      return true;
    if ($.AxisAlignedBox_testOverlap(argBox, node.get$box()))
      if (node.get$isLeaf() === true) {
        if (callback.treeCallback$1(node) !== true)
          return false;
      } else {
        if (count < 64) {
          ++count;
          if (this._query$4(callback, argBox, node.get$childOne(), count) !== true)
            return false;
        }
        if (count < 64)
          if (this._query$4(callback, argBox, node.get$childTwo(), count + 1) !== true)
            return false;
      }
    return true;
  },
  _insertLeaf$1: function(node) {
    var t1, sibling, childOne, childTwo, t2, t3, t4, t6, normOne, t8, node1, node2, node10;
    t1 = this._insertionCount;
    if (typeof t1 !== "number")
      return this._insertLeaf$1$bailout(1, node, t1);
    this._insertionCount = t1 + 1;
    if (this._root == null) {
      this._root = node;
      node.set$parent(null);
      return;
    }
    t1 = this.center;
    t1.setFrom$1(node.get$box().get$center());
    sibling = this._root;
    if (sibling.get$isLeaf() !== true)
      do {
        childOne = sibling.get$childOne();
        childTwo = sibling.get$childTwo();
        t2 = this.deltaOne;
        t2.setFrom$1(childOne.get$box().get$center());
        t3 = this.deltaTwo;
        t3.setFrom$1(childTwo.get$box().get$center());
        t2.subLocal$1(t1).absLocal$0();
        t3.subLocal$1(t1).absLocal$0();
        t4 = t2.x;
        t6 = t2.y;
        if (typeof t4 !== "number")
          return this._insertLeaf$1$bailout(2, node, 0, t3, childOne, childTwo, t2, t4);
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(3, node, 0, t3, childOne, childTwo, 0, t4, t6);
        normOne = t4 + t6;
        t6 = t3.x;
        t8 = t3.y;
        if (typeof t6 !== "number")
          return this._insertLeaf$1$bailout(4, node, 0, t3, childOne, childTwo, 0, 0, t6, normOne);
        if (typeof t8 !== "number")
          return this._insertLeaf$1$bailout(5, node, 0, 0, childOne, childTwo, 0, 0, t6, normOne, t8);
        sibling = normOne < t6 + t8 ? childOne : childTwo;
        t2 = sibling.get$isLeaf();
        if (typeof t2 !== "boolean")
          return this._insertLeaf$1$bailout(6, node, t1, 0, 0, 0, t2, 0, 0, 0, 0, sibling);
      } while (!t2);
    node1 = sibling.get$parent();
    node2 = this._allocateNode$0();
    node2.set$parent(node1);
    node2.set$userData(null);
    node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
    if (!(node1 == null)) {
      if ($.$$eq(sibling.get$parent().get$childOne(), sibling) === true)
        node1.set$childOne(node2);
      else
        node1.set$childTwo(node2);
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      sibling.set$parent(node2);
      node.set$parent(node2);
      do {
        if ($.contains(node1.get$box(), node2.get$box()) === true)
          break;
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        node10 = node1.get$parent();
        if (!(node10 == null)) {
          node2 = node1;
          node1 = node10;
          continue;
        } else
          break;
      } while (true);
    } else {
      node2.set$childOne(sibling);
      node2.set$childTwo(node);
      sibling.set$parent(node2);
      node.set$parent(node2);
      this._root = node2;
    }
  },
  _insertLeaf$1$bailout: function(state0, node, t1, t3, childOne, childTwo, t2, t4, t6, normOne, t8, sibling) {
    switch (state0) {
      case 0:
        t1 = this._insertionCount;
      case 1:
        state0 = 0;
        this._insertionCount = $.$$add(t1, 1);
        if (this._root == null) {
          this._root = node;
          node.set$parent(null);
          return;
        }
        t1 = this.center;
        t1.setFrom$1(node.get$box().get$center());
        sibling = this._root;
      default:
        var node1, node2, node10;
        if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && sibling.get$isLeaf() !== true)
          switch (state0) {
            case 0:
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      childOne = sibling.get$childOne();
                      childTwo = sibling.get$childTwo();
                      t2 = this.deltaOne;
                      t2.setFrom$1(childOne.get$box().get$center());
                      t3 = this.deltaTwo;
                      t3.setFrom$1(childTwo.get$box().get$center());
                      t2.subLocal$1(t1).absLocal$0();
                      t3.subLocal$1(t1).absLocal$0();
                      t4 = t2.x;
                    case 2:
                      state0 = 0;
                      t6 = t2.y;
                    case 3:
                      state0 = 0;
                      normOne = $.$$add(t4, t6);
                      t6 = t3.x;
                    case 4:
                      state0 = 0;
                      t8 = t3.y;
                    case 5:
                      state0 = 0;
                      sibling = $.$$lt(normOne, $.$$add(t6, t8)) === true ? childOne : childTwo;
                      t2 = sibling.get$isLeaf();
                    case 6:
                      state0 = 0;
                      if (!($.$$eq(t2, false) === true))
                        break L0;
                  }
          }
        node1 = sibling.get$parent();
        node2 = this._allocateNode$0();
        node2.set$parent(node1);
        node2.set$userData(null);
        node2.get$box().setFromCombination$2(node.get$box(), sibling.get$box());
        if (!(node1 == null)) {
          if ($.$$eq(sibling.get$parent().get$childOne(), sibling) === true)
            node1.set$childOne(node2);
          else
            node1.set$childTwo(node2);
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          sibling.set$parent(node2);
          node.set$parent(node2);
          do {
            if ($.contains(node1.get$box(), node2.get$box()) === true)
              break;
            node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
            node10 = node1.get$parent();
            if (!(node10 == null)) {
              node2 = node1;
              node1 = node10;
              continue;
            } else
              break;
          } while (true);
        } else {
          node2.set$childOne(sibling);
          node2.set$childTwo(node);
          sibling.set$parent(node2);
          node.set$parent(node2);
          this._root = node2;
        }
    }
  },
  _removeLeaf$1: function(argNode) {
    var node2, node1, sibling, t1;
    if ($.$$eq(argNode, this._root) === true) {
      this._root = null;
      if ($.$$eq(this._lastLeaf, argNode) === true)
        this._lastLeaf = null;
      return;
    }
    node2 = argNode.get$parent();
    node1 = node2.get$parent();
    sibling = $.$$eq(node2.get$childOne(), argNode) === true ? node2.get$childTwo() : node2.get$childOne();
    if (!(node1 == null)) {
      if ($.$$eq(node1.get$childOne(), node2) === true)
        node1.set$childOne(sibling);
      else
        node1.set$childTwo(sibling);
      sibling.set$parent(node1);
      this._freeNode$1(node2);
      for (t1 = this._tempBox; !(node1 == null);) {
        t1.setFrom$1(node1.get$box());
        node1.get$box().setFromCombination$2(node1.get$childOne().get$box(), node1.get$childTwo().get$box());
        if (t1.contains$1(node1.get$box()) === true)
          break;
        node1 = node1.get$parent();
      }
    } else {
      this._root = sibling;
      sibling.set$parent(null);
      this._freeNode$1(node2);
    }
    if ($.$$eq(this._lastLeaf, argNode) === true)
      this._lastLeaf = this._root;
  },
  _computeHeight$1: function(node) {
    if (node == null)
      return 0;
    return 1 + $.max(this._computeHeight$1(node.get$childOne()), this._computeHeight$1(node.get$childTwo()));
  },
  rebalance$1: function(iterations) {
    var i, current, bit, t1, t2, bit0;
    if (typeof iterations !== "number")
      return this.rebalance$1$bailout(1, iterations);
    if (this._root == null)
      return;
    for (i = 0; i < iterations; ++i) {
      current = this._root;
      bit = 0;
      while (true) {
        t1 = current.get$isLeaf() !== true;
        t2 = this._path;
        if (t2 !== (t2 | 0))
          return this.rebalance$1$bailout(2, iterations, i, t2, current, bit, t1);
        if (!t1)
          break;
        current = ($.CONSTANT5.$shr(t2, bit) & 1) === 0 ? current.get$childOne() : current.get$childTwo();
        bit0 = bit + 1 & 31;
        bit = bit0;
      }
      this._path = t2 + 1;
      this._removeLeaf$1(current);
      this._insertLeaf$1(current);
    }
  },
  rebalance$1$bailout: function(state0, iterations, i, t2, current, bit, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (this._root == null)
          return;
        i = 0;
      case 2:
        var bit0;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT5.$lt(i, iterations))
                  break L0;
                current = this._root;
                bit = 0;
              case 2:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t1 = current.get$isLeaf() !== true;
                        t2 = this._path;
                      case 2:
                        state0 = 0;
                        if (!t1)
                          break L1;
                        current = $.$$eq($.$$and($.$$shr(t2, bit), 1), 0) === true ? current.get$childOne() : current.get$childTwo();
                        bit0 = bit + 1 & 31;
                        bit = bit0;
                    }
                this._path = $.$$add(t2, 1);
                this._removeLeaf$1(current);
                this._insertLeaf$1(current);
                ++i;
            }
    }
  },
  _freeNode$1: function(node) {
    this._nodeStack.addFirst$1(node);
    this._nodeCount = this._nodeCount - 1;
  },
  DynamicTree$0: function() {
    var t1, i, t2;
    for (t1 = this._drawVectors, i = 0; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.DynamicTreeNode = {"": "Object;box>,parent=,next=,childOne=,childTwo=,userData=,key=",
  get$isLeaf: function() {
    return this.childOne == null;
  },
  toString$0: function() {
    return this.box.toString$0();
  }
};

$$.Pair = {"": "Object;proxyA=,proxyB=",
  compareTo$1: function(pair2) {
    var t1;
    if ($.$$lt(this.proxyA.get$key(), pair2.get$proxyA().get$key()) === true)
      return -1;
    if ($.$$eq(this.proxyA.get$key(), pair2.get$proxyA().get$key()) === true) {
      if ($.$$lt(this.proxyB.get$key(), pair2.get$proxyB().get$key()) === true)
        t1 = -1;
      else
        t1 = $.$$eq(this.proxyB.get$key(), pair2.get$proxyB().get$key()) === true ? 0 : 1;
      return t1;
    }
    return 1;
  }
};

$$.CircleShape = {"": "Shape;position>,type,radius",
  computeAxisAlignedBox$2: function(argBox, argTransform) {
    var p = $.Vector$(0, 0);
    $.Matrix22_mulMatrixAndVectorToOut(argTransform.get$rotation(), this.position, p);
    p.addLocal$1(argTransform.get$position());
    argBox.get$lowerBound().setCoords$2($.$$sub(p.x, this.radius), $.$$sub(p.y, this.radius));
    argBox.get$upperBound().setCoords$2($.$$add(p.x, this.radius), $.$$add(p.y, this.radius));
  },
  clone$0: function() {
    return $.CircleShape$copy(this);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, t4;
    massData.mass = $.$$mul($.$$mul($.$$mul(density, 3.141592653589793), this.radius), this.radius);
    t1 = massData.center;
    t2 = this.position;
    t1.setFrom$1(t2);
    t1 = massData.mass;
    t3 = this.radius;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = t2.get$x();
    t4 = $.$$mul(t4, t4);
    t2 = t2.get$y();
    t4 = $.$$add(t4, $.$$mul(t2, t2));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    massData.inertia = $.$$mul(t1, 0.5 * t3 * t3 + t4);
  }
};

$$.MassData = {"": "Object;mass>,center>,inertia>",
  setFrom$1: function(md) {
    this.mass = md.get$mass();
    this.inertia = md.get$inertia();
    this.center.setFrom$1(md.get$center());
  }
};

$$.PolygonShape = {"": "Shape;centroid>,vertices>,normals>,vertexCount>,type,radius",
  getSupport$1: function(d) {
    var t1, t3, t4, t5, t6, t8, t11, bestValue, bestIndex, i, t2, value;
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.getSupport$1$bailout(1, d, t1);
    t3 = $.getInterceptor$JSArrayJSString(t1);
    t4 = t1.length;
    if (0 >= t4)
      throw $.ioore(0);
    t5 = t1[0];
    t6 = t5.get$x();
    t8 = d.get$x();
    if (typeof t6 !== "number")
      return this.getSupport$1$bailout(2, d, t1, t6, t3, t5);
    if (typeof t8 !== "number")
      return this.getSupport$1$bailout(3, d, t1, t6, t3, t5, t8);
    t6 *= t8;
    t5 = t5.get$y();
    t11 = d.get$y();
    if (typeof t5 !== "number")
      return this.getSupport$1$bailout(4, d, t1, 0, t3, t5, t6);
    if (typeof t11 !== "number")
      return this.getSupport$1$bailout(5, d, t1, 0, t3, t5, t6, t11);
    bestValue = t6 + t5 * t11;
    bestIndex = 0;
    i = 1;
    while (true) {
      t2 = this.vertexCount;
      if (typeof t2 !== "number")
        return this.getSupport$1$bailout(6, d, t1, 0, t3, 0, 0, 0, bestIndex, bestValue, i, t2);
      if (!(i < t2))
        break;
      if (i >= t4)
        throw $.ioore(i);
      t2 = t1[i];
      t5 = t2.get$x();
      if (typeof t5 !== "number")
        return this.getSupport$1$bailout(7, d, t1, 0, t3, t5, 0, 0, bestIndex, bestValue, i, t2);
      t5 *= t8;
      t2 = t2.get$y();
      if (typeof t2 !== "number")
        return this.getSupport$1$bailout(9, d, t1, 0, t3, 0, 0, 0, bestIndex, bestValue, i, t2, t5);
      value = t5 + t2 * t11;
      if (value > bestValue) {
        bestValue = value;
        bestIndex = i;
      }
      ++i;
    }
    return bestIndex;
  },
  getSupport$1$bailout: function(state0, d, t1, t5, t3, t4, t7, t9, bestIndex, bestValue, i, t2, t6, t8) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        t4 = t3.$index(t1, 0);
        t5 = t4.get$x();
      case 2:
        state0 = 0;
        t7 = d.get$x();
      case 3:
        state0 = 0;
        t7 = $.$$mul(t5, t7);
        t4 = t4.get$y();
      case 4:
        state0 = 0;
        t9 = d.get$y();
      case 5:
        state0 = 0;
        bestValue = $.$$add(t7, $.$$mul(t4, t9));
        bestIndex = 0;
        i = 1;
      default:
        var value;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.vertexCount;
              case 6:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t2))
                  break L0;
                t2 = t3.$index(t1, i);
                t4 = t2.get$x();
              case 7:
                state0 = 0;
                t6 = d.get$x();
              case 8:
                state0 = 0;
                t6 = $.$$mul(t4, t6);
                t2 = t2.get$y();
              case 9:
                state0 = 0;
                t8 = d.get$y();
              case 10:
                state0 = 0;
                value = $.$$add(t6, $.$$mul(t2, t8));
                if ($.$$gt(value, bestValue) === true) {
                  bestValue = value;
                  bestIndex = i;
                }
                ++i;
            }
        return bestIndex;
    }
  },
  clone$0: function() {
    return $.PolygonShape$copy(this);
  },
  setAsBox$2: function(hx, hy) {
    var t1, t3, t4;
    this.vertexCount = 4;
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.setAsBox$2$bailout(1, hx, hy, t1);
    if (0 >= t1.length)
      throw $.ioore(0);
    t3 = -hx;
    t4 = -hy;
    t1[0].setCoords$2(t3, t4);
    if (1 >= t1.length)
      throw $.ioore(1);
    t1[1].setCoords$2(hx, t4);
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2].setCoords$2(hx, hy);
    if (3 >= t1.length)
      throw $.ioore(3);
    t1[3].setCoords$2(t3, hy);
    t3 = this.normals;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
      return this.setAsBox$2$bailout(2, 0, 0, 0, t3);
    if (0 >= t3.length)
      throw $.ioore(0);
    t3[0].setCoords$2(0, -1);
    if (1 >= t3.length)
      throw $.ioore(1);
    t3[1].setCoords$2(1, 0);
    if (2 >= t3.length)
      throw $.ioore(2);
    t3[2].setCoords$2(0, 1);
    if (3 >= t3.length)
      throw $.ioore(3);
    t3[3].setCoords$2(-1, 0);
    this.centroid.setZero$0();
  },
  setAsBox$2$bailout: function(state0, hx, hy, t1, t4) {
    switch (state0) {
      case 0:
        this.vertexCount = 4;
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        t4 = -hx;
        t5 = -hy;
        t3.$index(t1, 0).setCoords$2(t4, t5);
        t3.$index(t1, 1).setCoords$2(hx, t5);
        t3.$index(t1, 2).setCoords$2(hx, hy);
        t3.$index(t1, 3).setCoords$2(t4, hy);
        t4 = this.normals;
      case 2:
        var t3, t5, t6;
        state0 = 0;
        t6 = $.getInterceptor$JSArrayJSString(t4);
        t6.$index(t4, 0).setCoords$2(0, -1);
        t6.$index(t4, 1).setCoords$2(1, 0);
        t6.$index(t4, 2).setCoords$2(0, 1);
        t6.$index(t4, 3).setCoords$2(-1, 0);
        this.centroid.setZero$0();
    }
  },
  setAsEdge$2: function(v1, v2) {
    var t1, t2, t3, t4;
    this.vertexCount = 2;
    t1 = this.vertices;
    t2 = $.getInterceptor$JSArrayJSString(t1);
    t2.$index(t1, 0).setFrom$1(v1);
    t2.$index(t1, 1).setFrom$1(v2);
    this.centroid.setFrom$1(v1).addLocal$1(v2).mulLocal$1(0.5);
    t3 = this.normals;
    t4 = $.getInterceptor$JSArrayJSString(t3);
    t4.$index(t3, 0).setFrom$1(v2).subLocal$1(v1);
    $.Vector_crossVectorAndNumToOut(t4.$index(t3, 0), 1, t4.$index(t3, 0));
    t4.$index(t3, 0).normalize$0();
    t4.$index(t3, 1).setFrom$1(t4.$index(t3, 0)).negateLocal$0();
  },
  computeAxisAlignedBox$2: function(argAabb, argXf) {
    var lower, upper, v, t1, i;
    lower = $.Vector$(0, 0);
    upper = $.Vector$(0, 0);
    v = $.Vector$(0, 0);
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.computeAxisAlignedBox$2$bailout1(1, argAabb, argXf, lower, t1, upper, v);
    if (0 >= t1.length)
      throw $.ioore(0);
    $.Transform_mulToOut(argXf, t1[0], lower);
    upper.setFrom$1(lower);
    for (i = 1; $.CONSTANT5.$lt(i, this.vertexCount); ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      $.Transform_mulToOut(argXf, t1[i], v);
      lower.x = $.$$lt(lower.x, v.x) === true ? lower.x : v.x;
      lower.y = $.$$lt(lower.y, v.y) === true ? lower.y : v.y;
      upper.x = $.$$gt(upper.x, v.x) === true ? upper.x : v.x;
      upper.y = $.$$gt(upper.y, v.y) === true ? upper.y : v.y;
    }
    t1 = $.$$sub(lower.x, this.radius);
    argAabb.get$lowerBound().set$x(t1);
    t1 = $.$$sub(lower.y, this.radius);
    argAabb.get$lowerBound().set$y(t1);
    t1 = $.$$add(upper.x, this.radius);
    argAabb.get$upperBound().set$x(t1);
    t1 = $.$$add(upper.y, this.radius);
    argAabb.get$upperBound().set$y(t1);
  },
  computeAxisAlignedBox$2$bailout1: function(state0, argAabb, argXf, lower, t1, upper, v) {
    var t3, i;
    t3 = $.getInterceptor$JSArrayJSString(t1);
    $.Transform_mulToOut(argXf, t3.$index(t1, 0), lower);
    upper.setFrom$1(lower);
    for (i = 1; $.CONSTANT5.$lt(i, this.vertexCount); ++i) {
      $.Transform_mulToOut(argXf, t3.$index(t1, i), v);
      lower.x = $.$$lt(lower.x, v.x) === true ? lower.x : v.x;
      lower.y = $.$$lt(lower.y, v.y) === true ? lower.y : v.y;
      upper.x = $.$$gt(upper.x, v.x) === true ? upper.x : v.x;
      upper.y = $.$$gt(upper.y, v.y) === true ? upper.y : v.y;
    }
    t1 = $.$$sub(lower.x, this.radius);
    argAabb.get$lowerBound().set$x(t1);
    t1 = $.$$sub(lower.y, this.radius);
    argAabb.get$lowerBound().set$y(t1);
    t1 = $.$$add(upper.x, this.radius);
    argAabb.get$upperBound().set$x(t1);
    t1 = $.$$add(upper.y, this.radius);
    argAabb.get$upperBound().set$y(t1);
  },
  computeMass$2: function(massData, density) {
    var t1, t2, t3, center, pRef, e1, e2, area, I, i, p2, p3, D, triangleArea, t4, t5, t6, px, py, ex1, ey1, ex2, ey2, t7, t8, t9, t10, t11, t12, t13, t14;
    if ($.$$eq(this.vertexCount, 2) === true) {
      t1 = massData.center;
      t2 = this.vertices;
      t3 = $.getInterceptor$JSArrayJSString(t2);
      t1.setFrom$1(t3.$index(t2, 0)).addLocal$1(t3.$index(t2, 1)).mulLocal$1(0.5);
      massData.mass = 0;
      massData.inertia = 0;
      return;
    }
    center = $.Vector$(0, 0);
    center.setZero$0();
    pRef = $.Vector$(0, 0);
    pRef.setZero$0();
    e1 = $.Vector$(0, 0);
    e2 = $.Vector$(0, 0);
    t1 = this.vertices;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
      return this.computeMass$2$bailout1(1, massData, pRef, t1, density, e1, e2, center);
    area = 0;
    I = 0;
    i = 0;
    for (; $.CONSTANT5.$lt(i, this.vertexCount);) {
      if (i >= t1.length)
        throw $.ioore(i);
      p2 = t1[i];
      ++i;
      t2 = $.CONSTANT5.$lt(i, this.vertexCount);
      t3 = t1.length;
      if (t2) {
        if (i >= t3)
          throw $.ioore(i);
        p3 = t1[i];
      } else {
        if (0 >= t3)
          throw $.ioore(0);
        p3 = t1[0];
      }
      e1.setFrom$1(p2);
      e1.subLocal$1(pRef);
      e2.setFrom$1(p3);
      e2.subLocal$1(pRef);
      D = $.$$sub($.$$mul(e1.x, e2.y), $.$$mul(e1.y, e2.x));
      if (typeof D !== "number")
        throw $.iae(D);
      triangleArea = 0.5 * D;
      area += triangleArea;
      t2 = center.x;
      t3 = triangleArea * 0.3333333333333333;
      t4 = $.$$add($.$$add(pRef.x, p2.get$x()), p3.get$x());
      if (typeof t4 !== "number")
        throw $.iae(t4);
      center.x = $.$$add(t2, t3 * t4);
      t5 = center.y;
      t6 = $.$$add($.$$add(pRef.y, p2.get$y()), p3.get$y());
      if (typeof t6 !== "number")
        throw $.iae(t6);
      center.y = $.$$add(t5, t3 * t6);
      px = pRef.x;
      py = pRef.y;
      ex1 = e1.x;
      ey1 = e1.y;
      ex2 = e2.x;
      ey2 = e2.y;
      t7 = $.getInterceptor$JSNumber(ex2);
      t8 = $.$$add($.$$add($.$$mul(ex1, ex1), t7.$mul(ex2, ex1)), t7.$mul(ex2, ex2));
      if (typeof t8 !== "number")
        throw $.iae(t8);
      t9 = $.getInterceptor$JSNumber(px);
      t10 = $.$$add(t9.$mul(px, ex1), t9.$mul(px, ex2));
      if (typeof t10 !== "number")
        throw $.iae(t10);
      if (typeof px !== "number")
        throw $.iae(px);
      t11 = $.getInterceptor$JSNumber(ey2);
      t12 = $.$$add($.$$add($.$$mul(ey1, ey1), t11.$mul(ey2, ey1)), t11.$mul(ey2, ey2));
      if (typeof t12 !== "number")
        throw $.iae(t12);
      t13 = $.getInterceptor$JSNumber(py);
      t14 = $.$$add(t13.$mul(py, ey1), t13.$mul(py, ey2));
      if (typeof t14 !== "number")
        throw $.iae(t14);
      if (typeof py !== "number")
        throw $.iae(py);
      I += D * (0.3333333333333333 * (0.25 * t8 + t10) + 0.5 * px * px + (0.3333333333333333 * (0.25 * t12 + t14) + 0.5 * py * py));
    }
    massData.mass = $.$$mul(density, area);
    center.mulLocal$1(1 / area);
    massData.center.setFrom$1(center);
    if (typeof density !== "number")
      throw $.iae(density);
    massData.inertia = I * density;
  },
  computeMass$2$bailout1: function(state0, massData, pRef, t1, density, e1, e2, center) {
    var t3, area, I, i, p2, p3, D, triangleArea, t2, t4, t5, t6, t7, px, py, ex1, ey1, ex2, ey2, t8, t9, t10, t11, t12, t13, t14, t15;
    t3 = $.getInterceptor$JSArrayJSString(t1);
    area = 0;
    I = 0;
    i = 0;
    for (; $.CONSTANT5.$lt(i, this.vertexCount);) {
      p2 = t3.$index(t1, i);
      ++i;
      p3 = $.CONSTANT5.$lt(i, this.vertexCount) ? t3.$index(t1, i) : t3.$index(t1, 0);
      e1.setFrom$1(p2);
      e1.subLocal$1(pRef);
      e2.setFrom$1(p3);
      e2.subLocal$1(pRef);
      D = $.$$sub($.$$mul(e1.x, e2.y), $.$$mul(e1.y, e2.x));
      if (typeof D !== "number")
        throw $.iae(D);
      triangleArea = 0.5 * D;
      area += triangleArea;
      t2 = center.x;
      t4 = triangleArea * 0.3333333333333333;
      t5 = $.$$add($.$$add(pRef.x, p2.get$x()), p3.get$x());
      if (typeof t5 !== "number")
        throw $.iae(t5);
      center.x = $.$$add(t2, t4 * t5);
      t6 = center.y;
      t7 = $.$$add($.$$add(pRef.y, p2.get$y()), p3.get$y());
      if (typeof t7 !== "number")
        throw $.iae(t7);
      center.y = $.$$add(t6, t4 * t7);
      px = pRef.x;
      py = pRef.y;
      ex1 = e1.x;
      ey1 = e1.y;
      ex2 = e2.x;
      ey2 = e2.y;
      t8 = $.getInterceptor$JSNumber(ex2);
      t9 = $.$$add($.$$add($.$$mul(ex1, ex1), t8.$mul(ex2, ex1)), t8.$mul(ex2, ex2));
      if (typeof t9 !== "number")
        throw $.iae(t9);
      t10 = $.getInterceptor$JSNumber(px);
      t11 = $.$$add(t10.$mul(px, ex1), t10.$mul(px, ex2));
      if (typeof t11 !== "number")
        throw $.iae(t11);
      if (typeof px !== "number")
        throw $.iae(px);
      t12 = $.getInterceptor$JSNumber(ey2);
      t13 = $.$$add($.$$add($.$$mul(ey1, ey1), t12.$mul(ey2, ey1)), t12.$mul(ey2, ey2));
      if (typeof t13 !== "number")
        throw $.iae(t13);
      t14 = $.getInterceptor$JSNumber(py);
      t15 = $.$$add(t14.$mul(py, ey1), t14.$mul(py, ey2));
      if (typeof t15 !== "number")
        throw $.iae(t15);
      if (typeof py !== "number")
        throw $.iae(py);
      I += D * (0.3333333333333333 * (0.25 * t9 + t11) + 0.5 * px * px + (0.3333333333333333 * (0.25 * t13 + t15) + 0.5 * py * py));
    }
    massData.mass = $.$$mul(density, area);
    center.mulLocal$1(1 / area);
    massData.center.setFrom$1(center);
    if (typeof density !== "number")
      throw $.iae(density);
    massData.inertia = I * density;
  },
  PolygonShape$copy$1: function(other) {
    var t1, i, t2;
    t1 = this.vertices;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.PolygonShape$copy$1$bailout(1, other, t1);
    i = 0;
    for (; $.CONSTANT5.$lt(i, $.length(other.get$vertices())); ++i) {
      t2 = $.Vector$copy($.$$index(other.get$vertices(), i));
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
    t1 = this.normals;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.PolygonShape$copy$1$bailout(2, other, t1);
    i = 0;
    for (; $.CONSTANT5.$lt(i, $.length(other.get$normals())); ++i) {
      t2 = $.Vector$copy($.$$index(other.get$normals(), i));
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  },
  PolygonShape$copy$1$bailout: function(state0, other, t1) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT5.$lt(i, $.length(other.get$vertices())); ++i)
          t3.$indexSet(t1, i, $.Vector$copy($.$$index(other.get$vertices(), i)));
        t1 = this.normals;
      case 2:
        var t3, i;
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT5.$lt(i, $.length(other.get$normals())); ++i)
          t3.$indexSet(t1, i, $.Vector$copy($.$$index(other.get$normals(), i)));
    }
  },
  PolygonShape$0: function() {
    var t1, i, t2;
    t1 = this.vertices;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.PolygonShape$0$bailout(1, t1);
    i = 0;
    for (; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
    t1 = this.normals;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.PolygonShape$0$bailout(2, t1);
    i = 0;
    for (; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  },
  PolygonShape$0$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        t1 = this.vertices;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT5.$lt(i, $.length(t1)); ++i)
          t3.$indexSet(t1, i, $.Vector$(0, 0));
        t1 = this.normals;
      case 2:
        var t3, i;
        state0 = 0;
        t3 = $.getInterceptor$JSArray(t1);
        i = 0;
        for (; $.CONSTANT5.$lt(i, $.length(t1)); ++i)
          t3.$indexSet(t1, i, $.Vector$(0, 0));
    }
  }
};

$$.Shape = {"": "Object;type=,radius="};

$$.Matrix22 = {"": "Object;col1>,col2>",
  $eq: function(other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$isMatrix22)
      t1 = $.$$eq(this.col1, other.col1) === true && $.$$eq(this.col2, other.col2) === true;
    else
      t1 = false;
    return t1;
  },
  setAngle$1: function(angle) {
    var cosin, sin;
    cosin = Math.cos($.checkNum(angle));
    sin = Math.sin($.checkNum(angle));
    this.col1.setCoords$2(cosin, sin);
    this.col2.setCoords$2(-sin, cosin);
  },
  setFrom$1: function(matrix) {
    this.col1.setFrom$1(matrix.get$col1());
    this.col2.setFrom$1(matrix.get$col2());
  },
  invertLocal$0: function() {
    var t1, a, t3, b, c, d, det;
    t1 = this.col1;
    a = t1.get$x();
    if (typeof a !== "number")
      return this.invertLocal$0$bailout(1, a, t1);
    t3 = this.col2;
    b = t3.get$x();
    if (typeof b !== "number")
      return this.invertLocal$0$bailout(2, a, t1, b, t3);
    c = t1.get$y();
    if (typeof c !== "number")
      return this.invertLocal$0$bailout(3, a, 0, b, t3, c);
    d = t3.get$y();
    if (typeof d !== "number")
      return this.invertLocal$0$bailout(4, a, 0, b, 0, c, d);
    det = a * d - b * c;
    if (!(det === 0))
      det = 1 / det;
    t1.set$x(det * d);
    t1 = -det;
    this.col2.set$x(t1 * b);
    this.col1.set$y(t1 * c);
    this.col2.set$y(det * a);
    return this;
  },
  invertLocal$0$bailout: function(state0, a, t1, b, t3, c, d, det) {
    switch (state0) {
      case 0:
        t1 = this.col1;
        a = t1.get$x();
      case 1:
        state0 = 0;
        t3 = this.col2;
        b = t3.get$x();
      case 2:
        state0 = 0;
        c = t1.get$y();
      case 3:
        state0 = 0;
        d = t3.get$y();
      case 4:
        state0 = 0;
        det = $.$$sub($.$$mul(a, d), $.$$mul(b, c));
      case 5:
        var t2;
        if (state0 === 5 || state0 === 0 && $.$$eq(det, 0) !== true)
          switch (state0) {
            case 0:
              if (typeof det !== "number")
                throw $.iae(det);
              det = 1 / det;
            case 5:
              state0 = 0;
          }
        t1 = $.getInterceptor$JSNumber(det);
        t2 = t1.$mul(det, d);
        this.col1.set$x(t2);
        t2 = $.$$mul(t1.$negate(det), b);
        this.col2.set$x(t2);
        t2 = $.$$mul(t1.$negate(det), c);
        this.col1.set$y(t2);
        t1 = t1.$mul(det, a);
        this.col2.set$y(t1);
        return this;
    }
  },
  addLocal$1: function(other) {
    var t1 = this.col1;
    t1.set$x($.$$add(t1.get$x(), other.get$col1().get$x()));
    t1 = this.col1;
    t1.set$y($.$$add(t1.get$y(), other.get$col1().get$y()));
    t1 = this.col2;
    t1.set$x($.$$add(t1.get$x(), other.get$col2().get$x()));
    t1 = this.col2;
    t1.set$y($.$$add(t1.get$y(), other.get$col2().get$y()));
    return this;
  },
  solveToOut$2: function(b, out) {
    var t1, a11, t2, a12, a21, a22, det, t3, tempy;
    t1 = this.col1;
    a11 = t1.get$x();
    t2 = this.col2;
    a12 = t2.get$x();
    a21 = t1.get$y();
    a22 = t2.get$y();
    t2 = $.getInterceptor$JSNumber(a11);
    t1 = $.getInterceptor$JSNumber(a12);
    det = $.$$sub(t2.$mul(a11, a22), t1.$mul(a12, a21));
    if ($.$$eq(det, 0) !== true) {
      if (typeof det !== "number")
        throw $.iae(det);
      det = 1 / det;
    }
    t3 = $.getInterceptor$JSNumber(det);
    tempy = t3.$mul(det, $.$$sub(t2.$mul(a11, b.get$y()), $.$$mul(a21, b.get$x())));
    out.x = t3.$mul(det, $.$$sub($.$$mul(a22, b.get$x()), t1.$mul(a12, b.get$y())));
    out.y = tempy;
  },
  toString$0: function() {
    return $.S(this.col1) + ", " + $.S(this.col2);
  },
  Matrix22$2: function(c1, c2) {
    if (c1 == null)
      c1 = $.Vector$(0, 0);
    if (c2 == null)
      c2 = $.Vector$(0, 0);
    this.col1 = c1;
    this.col2 = c2;
  },
  $isMatrix22: true
};

$$.Matrix33 = {"": "Object;col1>,col2>,col3",
  setZero$0: function() {
    this.col1.setZero$0();
    this.col2.setZero$0();
    this.col3.setZero$0();
  },
  solve22ToOut$2: function(b, out) {
    var t1, a11, t2, a12, a21, a22, det, t3;
    t1 = this.col1;
    a11 = t1.x;
    t2 = this.col2;
    a12 = t2.x;
    a21 = t1.y;
    a22 = t2.y;
    t2 = $.getInterceptor$JSNumber(a11);
    t1 = $.getInterceptor$JSNumber(a12);
    det = $.$$sub(t2.$mul(a11, a22), t1.$mul(a12, a21));
    if ($.$$eq(det, 0) !== true) {
      if (typeof det !== "number")
        throw $.iae(det);
      det = 1 / det;
    }
    t3 = $.getInterceptor$JSNumber(det);
    out.x = t3.$mul(det, $.$$sub($.$$mul(a22, b.get$x()), t1.$mul(a12, b.get$y())));
    out.y = t3.$mul(det, $.$$sub(t2.$mul(a11, b.get$y()), $.$$mul(a21, b.get$x())));
  },
  solve33ToOut$2: function(b, out) {
    var t1, t2, t3, det, t4, x, y, z;
    t1 = this.col2;
    t2 = this.col3;
    $.Vector3_crossToOut(t1, t2, out);
    t3 = this.col1;
    det = $.$$add($.$$add($.$$mul(t3.x, out.x), $.$$mul(t3.y, out.y)), $.$$mul(t3.z, out.z));
    if ($.$$eq(det, 0) !== true) {
      if (typeof det !== "number")
        throw $.iae(det);
      det = 1 / det;
    }
    $.Vector3_crossToOut(t1, t2, out);
    t4 = $.getInterceptor$JSNumber(det);
    x = t4.$mul(det, $.$$add($.$$add($.$$mul(b.get$x(), out.x), $.$$mul(b.get$y(), out.y)), $.$$mul(b.get$z(), out.z)));
    $.Vector3_crossToOut(b, t2, out);
    y = t4.$mul(det, $.$$add($.$$add($.$$mul(t3.x, out.x), $.$$mul(t3.y, out.y)), $.$$mul(t3.z, out.z)));
    $.Vector3_crossToOut(t1, b, out);
    z = t4.$mul(det, $.$$add($.$$add($.$$mul(t3.x, out.x), $.$$mul(t3.y, out.y)), $.$$mul(t3.z, out.z)));
    out.x = x;
    out.y = y;
    out.z = z;
  }
};

$$.Sweep = {"": "Object;localCenter>,centerZero>,center>,angleZero=,angle=",
  $eq: function(other) {
    if (other == null)
      return false;
    return this.localCenter.$eq(other.get$localCenter()) === true && this.centerZero.$eq(other.get$centerZero()) === true && this.center.$eq(other.get$center()) === true && $.$$eq(this.angleZero, other.get$angleZero()) === true && $.$$eq(this.angle, other.get$angle()) === true;
  },
  setFrom$1: function(other) {
    this.localCenter.setFrom$1(other.get$localCenter());
    this.centerZero.setFrom$1(other.get$centerZero());
    this.center.setFrom$1(other.get$center());
    this.angleZero = other.get$angleZero();
    this.angle = other.get$angle();
  },
  normalize$0: function() {
    var t1, d;
    t1 = $.floor($.$$div(this.angleZero, 6.283185307179586));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    d = 6.283185307179586 * t1;
    this.angleZero = $.$$sub(this.angleZero, d);
    this.angle = $.$$sub(this.angle, d);
  },
  getTransform$2: function(xf, alpha) {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t11, t12, t14, t15, t18, t20, t22, t23, t25, t28;
    if (typeof alpha !== "number")
      throw $.iae(alpha);
    t1 = 1 - alpha;
    t2 = this.centerZero;
    t3 = t2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    xf.get$position().set$x(t1 * t3 + alpha * t5);
    t2 = t2.y;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    xf.get$position().set$y(t1 * t2 + alpha * t4);
    t6 = xf.get$rotation();
    t7 = this.angleZero;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    t8 = this.angle;
    if (typeof t8 !== "number")
      throw $.iae(t8);
    t6.setAngle$1(t1 * t7 + alpha * t8);
    t6 = xf.get$position();
    t9 = t6.get$x();
    t11 = xf.get$rotation();
    t12 = t11.get$col1().get$x();
    t14 = this.localCenter;
    t15 = t14.x;
    if (typeof t12 !== "number")
      return this.getTransform$2$bailout(2, xf, t6, t9, t12);
    if (typeof t15 !== "number")
      return this.getTransform$2$bailout(3, xf, t6, t9, t12, t14, t15);
    t15 = t12 * t15;
    t12 = t11.get$col2().get$x();
    t18 = t14.y;
    if (typeof t12 !== "number")
      return this.getTransform$2$bailout(4, xf, t6, t9, t12, t14, t15);
    if (typeof t18 !== "number")
      return this.getTransform$2$bailout(5, xf, t6, t9, t12, t14, t15, t18);
    if (typeof t9 !== "number")
      return this.getTransform$2$bailout(1, xf, t6, t9);
    t6.set$x(t9 - (t15 + t12 * t18));
    t6 = xf.get$position();
    t20 = t6.get$y();
    t22 = xf.get$rotation();
    t23 = t22.get$col1().get$y();
    t25 = t14.x;
    if (typeof t23 !== "number")
      return this.getTransform$2$bailout(7, xf, t6, 0, 0, t14, 0, 0, t20, t23);
    if (typeof t25 !== "number")
      return this.getTransform$2$bailout(8, xf, t6, 0, 0, t14, 0, 0, t20, t23, t25);
    t25 = t23 * t25;
    t23 = t22.get$col2().get$y();
    t28 = t14.y;
    if (typeof t23 !== "number")
      return this.getTransform$2$bailout(9, 0, t6, 0, 0, t14, 0, 0, t20, t23, t25);
    if (typeof t28 !== "number")
      return this.getTransform$2$bailout(10, 0, t6, 0, 0, 0, 0, 0, t20, t23, t25, t28);
    if (typeof t20 !== "number")
      return this.getTransform$2$bailout(6, xf, t6, 0, 0, t14, 0, 0, t20);
    t6.set$y(t20 - (t25 + t23 * t28));
  },
  getTransform$2$bailout: function(state0, xf, t6, t9, t11, t13, t14, t17, t19, t21, t23, t26) {
    switch (state0) {
      case 0:
        if (typeof alpha !== "number")
          throw $.iae(alpha);
        t1 = 1 - alpha;
        t2 = this.centerZero;
        t3 = t2.x;
        if (typeof t3 !== "number")
          throw $.iae(t3);
        t4 = this.center;
        t5 = t4.x;
        if (typeof t5 !== "number")
          throw $.iae(t5);
        xf.get$position().set$x(t1 * t3 + alpha * t5);
        t2 = t2.y;
        if (typeof t2 !== "number")
          throw $.iae(t2);
        t4 = t4.y;
        if (typeof t4 !== "number")
          throw $.iae(t4);
        xf.get$position().set$y(t1 * t2 + alpha * t4);
        t6 = xf.get$rotation();
        t7 = this.angleZero;
        if (typeof t7 !== "number")
          throw $.iae(t7);
        t8 = this.angle;
        if (typeof t8 !== "number")
          throw $.iae(t8);
        t6.setAngle$1(t1 * t7 + alpha * t8);
        t6 = xf.get$position();
        t9 = t6.get$x();
      case 1:
        state0 = 0;
        t11 = xf.get$rotation().get$col1().get$x();
      case 2:
        state0 = 0;
        t13 = this.localCenter;
        t14 = t13.x;
      case 3:
        state0 = 0;
        t14 = $.$$mul(t11, t14);
        t11 = xf.get$rotation().get$col2().get$x();
      case 4:
        state0 = 0;
        t17 = t13.y;
      case 5:
        state0 = 0;
        t6.set$x($.$$sub(t9, $.$$add(t14, $.$$mul(t11, t17))));
        t6 = xf.get$position();
        t19 = t6.get$y();
      case 6:
        state0 = 0;
        t21 = xf.get$rotation().get$col1().get$y();
      case 7:
        state0 = 0;
        t23 = t13.x;
      case 8:
        state0 = 0;
        t23 = $.$$mul(t21, t23);
        t21 = xf.get$rotation().get$col2().get$y();
      case 9:
        state0 = 0;
        t26 = t13.y;
      case 10:
        var t1, t2, t3, t4, t5, t7, t8;
        state0 = 0;
        t6.set$y($.$$sub(t19, $.$$add(t23, $.$$mul(t21, t26))));
    }
  },
  advance$1: function(time) {
    var t1, t2, t3, t4, t5, t6, t7;
    if (typeof time !== "number")
      throw $.iae(time);
    t1 = 1 - time;
    t2 = this.centerZero;
    t3 = t2.x;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    t4 = this.center;
    t5 = t4.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t2.x = t1 * t3 + time * t5;
    t6 = t2.y;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    t4 = t4.y;
    if (typeof t4 !== "number")
      throw $.iae(t4);
    t2.y = t1 * t6 + time * t4;
    t2 = this.angleZero;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t7 = this.angle;
    if (typeof t7 !== "number")
      throw $.iae(t7);
    this.angleZero = t1 * t2 + time * t7;
  }
};

$$.Transform = {"": "Object;position>,rotation>",
  $eq: function(other) {
    if (other == null)
      return false;
    return this.position.$eq(other.get$position()) === true && this.rotation.$eq(other.get$rotation()) === true;
  },
  setFrom$1: function(other) {
    this.position.setFrom$1(other.get$position());
    this.rotation.setFrom$1(other.get$rotation());
  }
};

$$.Vector = {"": "Object;x=,y=",
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(this.x, other.get$x()) === true && $.$$eq(this.y, other.get$y()) === true;
  },
  addLocal$1: function(v) {
    var t1, t3, t5, t7;
    t1 = this.x;
    t3 = v.get$x();
    if (typeof t1 !== "number")
      return this.addLocal$1$bailout(1, v, t1);
    if (typeof t3 !== "number")
      return this.addLocal$1$bailout(2, v, t1, t3);
    this.x = t1 + t3;
    t5 = this.y;
    t7 = v.get$y();
    if (typeof t5 !== "number")
      return this.addLocal$1$bailout(3, v, 0, 0, t5);
    if (typeof t7 !== "number")
      return this.addLocal$1$bailout(4, 0, 0, 0, t5, t7);
    this.y = t5 + t7;
    return this;
  },
  addLocal$1$bailout: function(state0, v, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = v.get$x();
      case 2:
        state0 = 0;
        this.x = $.$$add(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = v.get$y();
      case 4:
        state0 = 0;
        this.y = $.$$add(t5, t7);
        return this;
    }
  },
  subLocal$1: function(other) {
    var t1, t3, t5, t7;
    t1 = this.x;
    t3 = other.get$x();
    if (typeof t1 !== "number")
      return this.subLocal$1$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.subLocal$1$bailout(2, other, t1, t3);
    this.x = t1 - t3;
    t5 = this.y;
    t7 = other.get$y();
    if (typeof t5 !== "number")
      return this.subLocal$1$bailout(3, other, 0, 0, t5);
    if (typeof t7 !== "number")
      return this.subLocal$1$bailout(4, 0, 0, 0, t5, t7);
    this.y = t5 - t7;
    return this;
  },
  subLocal$1$bailout: function(state0, other, t1, t3, t5, t7) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = other.get$x();
      case 2:
        state0 = 0;
        this.x = $.$$sub(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = other.get$y();
      case 4:
        state0 = 0;
        this.y = $.$$sub(t5, t7);
        return this;
    }
  },
  setCoords$2: function(xCoord, yCoord) {
    this.x = xCoord;
    this.y = yCoord;
    return this;
  },
  setFrom$1: function(v) {
    var t1, t2;
    t1 = v.get$x();
    t2 = v.get$y();
    this.x = t1;
    this.y = t2;
    return this;
  },
  mulLocal$1: function(d) {
    var t1, t3;
    if (typeof d !== "number")
      return this.mulLocal$1$bailout(1, d);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.mulLocal$1$bailout(2, d, t1);
    this.x = t1 * d;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.mulLocal$1$bailout(3, d, 0, t3);
    this.y = t3 * d;
    return this;
  },
  mulLocal$1$bailout: function(state0, d, t1, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
      case 2:
        state0 = 0;
        this.x = $.$$mul(t1, d);
        t3 = this.y;
      case 3:
        state0 = 0;
        this.y = $.$$mul(t3, d);
        return this;
    }
  },
  setZero$0: function() {
    this.x = 0;
    this.y = 0;
    return this;
  },
  get$length: function() {
    return $.sqrt(this.get$lengthSquared());
  },
  get$lengthSquared: function() {
    var t1, t2;
    t1 = this.x;
    t1 = $.$$mul(t1, t1);
    t2 = this.y;
    return $.$$add(t1, $.$$mul(t2, t2));
  },
  absLocal$0: function() {
    this.x = $.abs(this.x);
    this.y = $.abs(this.y);
  },
  normalize$0: function() {
    var len, invLength;
    len = this.get$length();
    if ($.$$lt(len, 1.192e-7) === true)
      return 0;
    if (typeof len !== "number")
      throw $.iae(len);
    invLength = 1 / len;
    this.x = $.$$mul(this.x, invLength);
    this.y = $.$$mul(this.y, invLength);
    return len;
  },
  negateLocal$0: function() {
    var t1, t3;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.negateLocal$0$bailout(1, t1);
    this.x = -t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.negateLocal$0$bailout(2, 0, t3);
    this.y = -t3;
    return this;
  },
  negateLocal$0$bailout: function(state0, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        this.x = $.$$negate(t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        this.y = $.$$negate(t3);
        return this;
    }
  },
  toString$0: function() {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ")";
  }
};

$$.Vector3 = {"": "Object;x=,y=,z>",
  $eq: function(other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$isVector3)
      t1 = $.$$eq(this.x, other.x) === true && $.$$eq(this.y, other.y) === true && $.$$eq(this.z, other.z) === true;
    else
      t1 = false;
    return t1;
  },
  setFrom$1: function(argVec) {
    this.x = argVec.get$x();
    this.y = argVec.get$y();
    this.z = argVec.get$z();
    return this;
  },
  setCoords$3: function(argX, argY, argZ) {
    this.x = argX;
    this.y = argY;
    this.z = argZ;
    return this;
  },
  addLocal$1: function(argVec) {
    var t1, t3, t5, t7, t9, t11;
    t1 = this.x;
    t3 = argVec.get$x();
    if (typeof t1 !== "number")
      return this.addLocal$1$bailout(1, argVec, t1);
    if (typeof t3 !== "number")
      return this.addLocal$1$bailout(2, argVec, t1, t3);
    this.x = t1 + t3;
    t5 = this.y;
    t7 = argVec.get$y();
    if (typeof t5 !== "number")
      return this.addLocal$1$bailout(3, argVec, 0, 0, t5);
    if (typeof t7 !== "number")
      return this.addLocal$1$bailout(4, argVec, 0, 0, t5, t7);
    this.y = t5 + t7;
    t9 = this.z;
    t11 = argVec.get$z();
    if (typeof t9 !== "number")
      return this.addLocal$1$bailout(5, argVec, 0, 0, 0, 0, t9);
    if (typeof t11 !== "number")
      return this.addLocal$1$bailout(6, 0, 0, 0, 0, 0, t9, t11);
    this.z = t9 + t11;
    return this;
  },
  addLocal$1$bailout: function(state0, argVec, t1, t3, t5, t7, t9, t11) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = argVec.get$x();
      case 2:
        state0 = 0;
        this.x = $.$$add(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = argVec.get$y();
      case 4:
        state0 = 0;
        this.y = $.$$add(t5, t7);
        t9 = this.z;
      case 5:
        state0 = 0;
        t11 = argVec.get$z();
      case 6:
        state0 = 0;
        this.z = $.$$add(t9, t11);
        return this;
    }
  },
  add$1: function(argVec) {
    var t1, t3, t6, t9;
    t1 = this.x;
    t3 = argVec.get$x();
    if (typeof t1 !== "number")
      return this.add$1$bailout(1, argVec, t1);
    if (typeof t3 !== "number")
      return this.add$1$bailout(2, argVec, t1, t3);
    t3 = t1 + t3;
    t1 = this.y;
    t6 = argVec.get$y();
    if (typeof t1 !== "number")
      return this.add$1$bailout(3, argVec, t1, t3);
    if (typeof t6 !== "number")
      return this.add$1$bailout(4, argVec, t1, t3, t6);
    t6 = t1 + t6;
    t1 = this.z;
    t9 = argVec.get$z();
    if (typeof t1 !== "number")
      return this.add$1$bailout(5, argVec, t1, t3, t6);
    if (typeof t9 !== "number")
      return this.add$1$bailout(6, 0, t1, t3, t6, t9);
    return $.Vector3$(t3, t6, t1 + t9);
  },
  add$1$bailout: function(state0, argVec, t1, t3, t6, t9) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = argVec.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$add(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = argVec.get$y();
      case 4:
        state0 = 0;
        t6 = $.$$add(t1, t6);
        t1 = this.z;
      case 5:
        state0 = 0;
        t9 = argVec.get$z();
      case 6:
        state0 = 0;
        return $.Vector3$(t3, t6, $.$$add(t1, t9));
    }
  },
  subLocal$1: function(argVec) {
    var t1, t3, t5, t7, t9, t11;
    t1 = this.x;
    t3 = argVec.get$x();
    if (typeof t1 !== "number")
      return this.subLocal$1$bailout(1, argVec, t1);
    if (typeof t3 !== "number")
      return this.subLocal$1$bailout(2, argVec, t1, t3);
    this.x = t1 - t3;
    t5 = this.y;
    t7 = argVec.get$y();
    if (typeof t5 !== "number")
      return this.subLocal$1$bailout(3, argVec, 0, 0, t5);
    if (typeof t7 !== "number")
      return this.subLocal$1$bailout(4, argVec, 0, 0, t5, t7);
    this.y = t5 - t7;
    t9 = this.z;
    t11 = argVec.get$z();
    if (typeof t9 !== "number")
      return this.subLocal$1$bailout(5, argVec, 0, 0, 0, 0, t9);
    if (typeof t11 !== "number")
      return this.subLocal$1$bailout(6, 0, 0, 0, 0, 0, t9, t11);
    this.z = t9 - t11;
    return this;
  },
  subLocal$1$bailout: function(state0, argVec, t1, t3, t5, t7, t9, t11) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = argVec.get$x();
      case 2:
        state0 = 0;
        this.x = $.$$sub(t1, t3);
        t5 = this.y;
      case 3:
        state0 = 0;
        t7 = argVec.get$y();
      case 4:
        state0 = 0;
        this.y = $.$$sub(t5, t7);
        t9 = this.z;
      case 5:
        state0 = 0;
        t11 = argVec.get$z();
      case 6:
        state0 = 0;
        this.z = $.$$sub(t9, t11);
        return this;
    }
  },
  mulLocal$1: function(argScalar) {
    var t1, t3, t5;
    if (typeof argScalar !== "number")
      return this.mulLocal$1$bailout(1, argScalar);
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.mulLocal$1$bailout(2, argScalar, t1);
    this.x = t1 * argScalar;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.mulLocal$1$bailout(3, argScalar, 0, t3);
    this.y = t3 * argScalar;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.mulLocal$1$bailout(4, argScalar, 0, 0, t5);
    this.z = t5 * argScalar;
    return this;
  },
  mulLocal$1$bailout: function(state0, argScalar, t1, t3, t5) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.x;
      case 2:
        state0 = 0;
        this.x = $.$$mul(t1, argScalar);
        t3 = this.y;
      case 3:
        state0 = 0;
        this.y = $.$$mul(t3, argScalar);
        t5 = this.z;
      case 4:
        state0 = 0;
        this.z = $.$$mul(t5, argScalar);
        return this;
    }
  },
  negateLocal$0: function() {
    var t1, t3, t5;
    t1 = this.x;
    if (typeof t1 !== "number")
      return this.negateLocal$0$bailout(1, t1);
    this.x = -t1;
    t3 = this.y;
    if (typeof t3 !== "number")
      return this.negateLocal$0$bailout(2, 0, t3);
    this.y = -t3;
    t5 = this.z;
    if (typeof t5 !== "number")
      return this.negateLocal$0$bailout(3, 0, 0, t5);
    this.z = -t5;
    return this;
  },
  negateLocal$0$bailout: function(state0, t1, t3, t5) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        this.x = $.$$negate(t1);
        t3 = this.y;
      case 2:
        state0 = 0;
        this.y = $.$$negate(t3);
        t5 = this.z;
      case 3:
        state0 = 0;
        this.z = $.$$negate(t5);
        return this;
    }
  },
  setZero$0: function() {
    this.x = 0;
    this.y = 0;
    this.z = 0;
  },
  toString$0: function() {
    return "(" + $.S(this.x) + ", " + $.S(this.y) + ", " + $.S(this.z) + ")";
  },
  $isVector3: true
};

$$.Body = {"": "Object;world,flags=,contactList=,sleepTime=,userData=,_linearVelocity,_angularVelocity,mass>,invMass>,next=,prev=,fixtureList,fixtureCount,jointList=,_force>,_torque=,_inertia,invInertia>,linearDamping>,angularDamping>,_type>,islandIndex<,originTransform>,sweep>,_fixDef,_pmd,_pxf,oldCenter,tempCenter",
  createFixture$1: function(def) {
    var fixture, t1, t2;
    fixture = $.Fixture$();
    fixture.create$2(this, def);
    t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.createFixture$1$bailout(1, t1, fixture);
    if ((t1 & 32) === 32)
      fixture.createProxy$2(this.world._contactManager.get$broadPhase(), this.originTransform);
    fixture.next = this.fixtureList;
    this.fixtureList = fixture;
    this.fixtureCount = this.fixtureCount + 1;
    fixture.body = this;
    t1 = fixture.density;
    if (typeof t1 !== "number")
      return this.createFixture$1$bailout(2, t1, fixture);
    if (t1 > 0)
      this.resetMassData$0();
    t1 = this.world;
    t2 = t1._flags;
    if (t2 !== (t2 | 0))
      return this.createFixture$1$bailout(3, t1, fixture, t2);
    t1._flags = (t2 | 1) >>> 0;
    return fixture;
  },
  createFixture$1$bailout: function(state0, t1, fixture, t2) {
    switch (state0) {
      case 0:
        fixture = $.Fixture$();
        fixture.create$2(this, def);
        t1 = this.flags;
      case 1:
        state0 = 0;
        if ($.$$eq($.$$and(t1, 32), 32) === true)
          fixture.createProxy$2(this.world._contactManager.get$broadPhase(), this.originTransform);
        fixture.next = this.fixtureList;
        this.fixtureList = fixture;
        this.fixtureCount = this.fixtureCount + 1;
        fixture.body = this;
        t1 = fixture.density;
      case 2:
        state0 = 0;
        if ($.$$gt(t1, 0) === true)
          this.resetMassData$0();
        t1 = this.world;
        t2 = t1._flags;
      case 3:
        state0 = 0;
        t1._flags = $.$$or(t2, 1);
        return fixture;
    }
  },
  createFixtureFromShape$2: function(shape, density) {
    var t1 = this._fixDef;
    t1.shape = shape;
    t1.density = density;
    return this.createFixture$1(t1);
  },
  createFixtureFromShape$1: function(shape) {
    return this.createFixtureFromShape$2(shape, 0);
  },
  get$position: function() {
    return this.originTransform.position;
  },
  get$angle: function() {
    return this.sweep.angle;
  },
  get$worldCenter: function() {
    return this.sweep.center;
  },
  get$localCenter: function() {
    return this.sweep.localCenter;
  },
  get$linearVelocity: function() {
    return this._linearVelocity;
  },
  set$linearVelocity: function(v) {
    if ($.$$eq(this._type, 0) === true)
      return;
    if ($.$$gt($.Vector_dot(v, v), 0) === true)
      this.set$awake(true);
    this._linearVelocity.setFrom$1(v);
  },
  get$angularVelocity: function() {
    return this._angularVelocity;
  },
  set$angularVelocity: function(w) {
    if ($.$$eq(this._type, 0) !== true) {
      if ($.$$gt($.$$mul(w, w), 0) === true)
        this.set$awake(true);
      this._angularVelocity = w;
    }
  },
  get$inertia: function() {
    var t1, t2, t3, t4;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = this.sweep.localCenter;
    t4 = t3.x;
    t4 = $.$$mul(t4, t4);
    t3 = t3.y;
    t4 = $.$$add(t4, $.$$mul(t3, t3));
    if (typeof t4 !== "number")
      throw $.iae(t4);
    return t1 + t2 * t4;
  },
  getMassData$1: function(data) {
    var lc, t1, t2, t3, t4, t5;
    data.mass = this.mass;
    lc = this.sweep.localCenter;
    t1 = this._inertia;
    t2 = this.mass;
    t3 = lc.get$lengthSquared();
    if (typeof t3 !== "number")
      throw $.iae(t3);
    data.inertia = t1 + t2 * t3;
    t4 = lc.x;
    t5 = data.center;
    t5.x = t4;
    t5.y = lc.y;
  },
  resetMassData$0: function() {
    var t1, t2, t3, massData, f, t4, t5, t6, temp, t7, t8;
    this.mass = 0;
    this.invMass = 0;
    this._inertia = 0;
    this.invInertia = 0;
    t1 = this.sweep;
    t2 = t1.localCenter;
    t2.setZero$0();
    if ($.$$eq(this._type, 0) === true || $.$$eq(this._type, 1) === true) {
      t2 = t1.center;
      t3 = this.originTransform.position;
      t2.setFrom$1(t3);
      t1.centerZero.setFrom$1(t3);
      return;
    }
    t3 = this.tempCenter;
    t3.setZero$0();
    massData = this._pmd;
    for (f = this.fixtureList, t4 = massData.center; !(f == null); f = f.get$next()) {
      if ($.$$eq(f.get$density(), 0) === true)
        continue;
      f.getMassData$1(massData);
      t5 = this.mass;
      t6 = massData.mass;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      this.mass = t5 + t6;
      temp = $.Vector$copy(t4);
      temp.mulLocal$1(massData.mass);
      t3.addLocal$1(temp);
      t7 = this._inertia;
      t8 = massData.inertia;
      if (typeof t8 !== "number")
        throw $.iae(t8);
      this._inertia = t7 + t8;
    }
    t4 = this.mass;
    if (t4 > 0) {
      this.invMass = 1 / t4;
      t3.mulLocal$1(this.invMass);
    } else {
      this.mass = 1;
      this.invMass = 1;
    }
    if (this._inertia > 0 && $.$$eq($.$$and(this.flags, 16), 0) === true) {
      t4 = this._inertia;
      t5 = this.mass;
      t6 = t3.x;
      t6 = $.$$mul(t6, t6);
      t7 = t3.y;
      t6 = $.$$add(t6, $.$$mul(t7, t7));
      if (typeof t6 !== "number")
        throw $.iae(t6);
      this._inertia = t4 - t5 * t6;
      this.invInertia = 1 / this._inertia;
    } else {
      this._inertia = 0;
      this.invInertia = 0;
    }
    t4 = this.oldCenter;
    t5 = t1.center;
    t4.setFrom$1(t5);
    t2.setFrom$1(t3);
    t3 = this.originTransform;
    t1 = t1.centerZero;
    $.Transform_mulToOut(t3, t2, t1);
    t5.setFrom$1(t1);
    temp = $.Vector$copy(t5);
    temp.subLocal$1(t4);
    $.Vector_crossNumAndVectorToOut(this._angularVelocity, temp, temp);
    this._linearVelocity.addLocal$1(temp);
  },
  getWorldPoint$1: function(localPoint) {
    var v = $.Vector$(0, 0);
    $.Transform_mulToOut(this.originTransform, localPoint, v);
    return v;
  },
  getWorldPointToOut$2: function(localPoint, out) {
    $.Transform_mulToOut(this.originTransform, localPoint, out);
  },
  getWorldVector$1: function(localVector) {
    var out = $.Vector$(0, 0);
    this.getWorldVectorToOut$2(localVector, out);
    return out;
  },
  getWorldVectorToOut$2: function(localVector, out) {
    $.Matrix22_mulMatrixAndVectorToOut(this.originTransform.rotation, localVector, out);
  },
  getLocalPointToOut$2: function(worldPoint, out) {
    $.Transform_mulTransToOut(this.originTransform, worldPoint, out);
  },
  getLocalPoint$1: function(worldPoint) {
    var out = $.Vector$(0, 0);
    $.Transform_mulTransToOut(this.originTransform, worldPoint, out);
    return out;
  },
  get$type: function() {
    return this._type;
  },
  set$type: function(otherType) {
    var ce;
    if ($.$$eq(this._type, otherType) === true)
      return;
    this._type = otherType;
    this.resetMassData$0();
    if ($.$$eq(this._type, 0) === true) {
      this._linearVelocity.setZero$0();
      this._angularVelocity = 0;
    }
    this.set$awake(true);
    this._force.setZero$0();
    this._torque = 0;
    for (ce = this.contactList; !(ce == null); ce = ce.get$next())
      ce.get$contact().flagForFiltering$0();
  },
  get$bullet: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$bullet$bailout(1, t1);
    return (t1 & 8) === 8;
  },
  get$bullet$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 8), 8);
  },
  set$bullet: function(flag) {
    var t1 = this.flags;
    if (flag === true)
      this.flags = $.$$or(t1, 8);
    else
      this.flags = $.$$and(t1, 4294967287);
  },
  set$awake: function(flag) {
    var t1;
    if (flag === true) {
      t1 = this.flags;
      if (t1 !== (t1 | 0))
        return this.set$awake$bailout(1, t1);
      if ((t1 & 2) === 0) {
        this.flags = (t1 | 2) >>> 0;
        this.sleepTime = 0;
      }
    } else {
      t1 = this.flags;
      if (t1 !== (t1 | 0))
        return this.set$awake$bailout(3, t1);
      this.flags = (t1 & 4294967293) >>> 0;
      this.sleepTime = 0;
      this._linearVelocity.setZero$0();
      this._angularVelocity = 0;
      this._force.setZero$0();
      this._torque = 0;
    }
  },
  set$awake$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 2 || state0 === 1 || state0 === 0 && flag === true)
          switch (state0) {
            case 0:
              t1 = this.flags;
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && $.$$eq($.$$and(t1, 2), 0) === true)
                switch (state0) {
                  case 0:
                    t1 = this.flags;
                  case 2:
                    state0 = 0;
                    this.flags = $.$$or(t1, 2);
                    this.sleepTime = 0;
                }
          }
        else
          switch (state0) {
            case 0:
              t1 = this.flags;
            case 3:
              state0 = 0;
              this.flags = $.$$and(t1, 4294967293);
              this.sleepTime = 0;
              this._linearVelocity.setZero$0();
              this._angularVelocity = 0;
              this._force.setZero$0();
              this._torque = 0;
          }
    }
  },
  get$awake: function() {
    return $.$$eq($.$$and(this.flags, 2), 2);
  },
  get$active: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$active$bailout(1, t1);
    return (t1 & 32) === 32;
  },
  get$active$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 32), 32);
  },
  get$fixedRotation: function() {
    return $.$$eq($.$$and(this.flags, 16), 16);
  },
  synchronizeFixtures$0: function() {
    var xf1, t1, t2, t3, t4, broadPhase, f;
    xf1 = this._pxf;
    t1 = xf1.rotation;
    t2 = this.sweep;
    t1.setAngle$1(t2.angleZero);
    t3 = t2.localCenter;
    t4 = xf1.position;
    $.Matrix22_mulMatrixAndVectorToOut(t1, t3, t4);
    t4.mulLocal$1(-1);
    t4.addLocal$1(t2.centerZero);
    broadPhase = this.world._contactManager.get$broadPhase();
    for (f = this.fixtureList, t1 = this.originTransform; !(f == null); f = f.get$next())
      f.synchronize$3(broadPhase, xf1, t1);
  },
  synchronizeTransform$0: function() {
    var t1, c, s, t, r, p, t2, t4, t5, t8, t10, t11, t13, t15, t18, t20;
    t1 = this.sweep;
    c = Math.cos($.checkNum(t1.angle));
    s = Math.sin($.checkNum(t1.angle));
    t = this.originTransform;
    r = t.rotation;
    p = t.position;
    r.col1.set$x(c);
    r.col2.set$x(-s);
    r.col1.set$y(s);
    r.col2.set$y(c);
    t2 = r.col1.get$x();
    t4 = t1.localCenter;
    t5 = t4.x;
    if (typeof t2 !== "number")
      return this.synchronizeTransform$0$bailout(1, r, p, t2, t1);
    if (typeof t5 !== "number")
      return this.synchronizeTransform$0$bailout(2, r, p, t2, t1, t4, t5);
    t5 = t2 * t5;
    t2 = r.col2.get$x();
    t8 = t4.y;
    if (typeof t2 !== "number")
      return this.synchronizeTransform$0$bailout(3, r, p, t2, t1, t4, t5);
    if (typeof t8 !== "number")
      return this.synchronizeTransform$0$bailout(4, r, p, t2, t1, t4, t5, t8);
    t10 = (t5 + t2 * t8) * -1;
    t1 = t1.center;
    t11 = t1.x;
    if (typeof t11 !== "number")
      return this.synchronizeTransform$0$bailout(5, r, p, 0, t1, t4, 0, 0, t11, t10);
    p.x = t10 + t11;
    t13 = r.col1.get$y();
    t15 = t4.x;
    if (typeof t13 !== "number")
      return this.synchronizeTransform$0$bailout(6, r, p, 0, t1, t4, 0, 0, 0, 0, t13);
    if (typeof t15 !== "number")
      return this.synchronizeTransform$0$bailout(7, r, p, 0, t1, t4, 0, 0, 0, 0, t13, t15);
    t15 = t13 * t15;
    t13 = r.col2.get$y();
    t18 = t4.y;
    if (typeof t13 !== "number")
      return this.synchronizeTransform$0$bailout(8, 0, p, 0, t1, t4, 0, 0, 0, 0, t13, t15);
    if (typeof t18 !== "number")
      return this.synchronizeTransform$0$bailout(9, 0, p, 0, t1, 0, 0, 0, 0, 0, t13, t15, t18);
    t20 = (t15 + t13 * t18) * -1;
    t1 = t1.y;
    if (typeof t1 !== "number")
      return this.synchronizeTransform$0$bailout(10, 0, p, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, t20);
    p.y = t20 + t1;
  },
  synchronizeTransform$0$bailout: function(state0, r, p, t2, t1, t4, t5, t8, t11, t10, t13, t15, t18, t20) {
    switch (state0) {
      case 0:
        t1 = this.sweep;
        c = Math.cos($.checkNum(t1.angle));
        s = Math.sin($.checkNum(t1.angle));
        t = this.originTransform;
        r = t.rotation;
        p = t.position;
        r.col1.set$x(c);
        r.col2.set$x(-s);
        r.col1.set$y(s);
        r.col2.set$y(c);
        t2 = r.col1.get$x();
      case 1:
        state0 = 0;
        t4 = t1.localCenter;
        t5 = t4.x;
      case 2:
        state0 = 0;
        t5 = $.$$mul(t2, t5);
        t2 = r.col2.get$x();
      case 3:
        state0 = 0;
        t8 = t4.y;
      case 4:
        state0 = 0;
        t10 = $.$$mul($.$$add(t5, $.$$mul(t2, t8)), -1);
        t1 = t1.center;
        t11 = t1.x;
      case 5:
        state0 = 0;
        p.x = $.$$add(t10, t11);
        t13 = r.col1.get$y();
      case 6:
        state0 = 0;
        t15 = t4.x;
      case 7:
        state0 = 0;
        t15 = $.$$mul(t13, t15);
        t13 = r.col2.get$y();
      case 8:
        state0 = 0;
        t18 = t4.y;
      case 9:
        state0 = 0;
        t20 = $.$$mul($.$$add(t15, $.$$mul(t13, t18)), -1);
        t1 = t1.y;
      case 10:
        var c, s, t;
        state0 = 0;
        p.y = $.$$add(t20, t1);
    }
  },
  shouldCollide$1: function(other) {
    return !($.$$eq(this._type, 2) !== true && $.$$eq(other.get$_type(), 2) !== true);
  },
  advance$1: function(t) {
    var t1 = this.sweep;
    t1.advance$1(t);
    t1.center.setFrom$1(t1.centerZero);
    t1.angle = t1.angleZero;
    this.synchronizeTransform$0();
  },
  Body$2: function(bd, world) {
    var t1, t2, t3, t4;
    if (bd.get$bullet() === true)
      this.flags = $.$$or(this.flags, 8);
    if (bd.get$fixedRotation() === true)
      this.flags = $.$$or(this.flags, 16);
    if (bd.get$allowSleep() === true)
      this.flags = $.$$or(this.flags, 4);
    if (bd.get$awake() === true)
      this.flags = $.$$or(this.flags, 2);
    if (bd.get$active() === true)
      this.flags = $.$$or(this.flags, 32);
    t1 = this.originTransform;
    t1.position.setFrom$1(bd.get$position());
    t1.rotation.setAngle$1(bd.get$angle());
    t2 = this.sweep;
    t3 = t2.localCenter;
    t3.setZero$0();
    t4 = t2.centerZero;
    $.Transform_mulToOut(t1, t3, t4);
    t2.center.setFrom$1(t4);
    t2.angle = bd.get$angle();
    t2.angleZero = bd.get$angle();
    if ($.$$eq(this._type, 2) === true) {
      this.mass = 1;
      this.invMass = 1;
    } else {
      this.mass = 0;
      this.invMass = 0;
    }
  }
};

$$.BodyDef = {"": "Object;type=,angle=,userData=,position>,linearVelocity=,angularVelocity=,fixedRotation>,isSleeping,bullet=,allowSleep>,linearDamping>,angularDamping>,awake=,active>"};

$$.ContactManager = {"": "Object;broadPhase>,contactList=,contactCount>,contactFilter,contactListener>,pool",
  addPair$2: function(fixtureA, fixtureB) {
    var bodyA, bodyB, edge, t1, fA, fB, c;
    bodyA = fixtureA.get$body();
    bodyB = fixtureB.get$body();
    if ($.$$eq(bodyA, bodyB) === true)
      return;
    edge = bodyB.get$contactList();
    for (; !(edge == null);) {
      if ($.$$eq(edge.get$other(), bodyA) === true) {
        t1 = edge.get$contact();
        fA = t1.get$fixtureA();
        fB = t1.get$fixtureB();
        t1 = $.getInterceptor(fA);
        if (t1.$eq(fA, fixtureA) === true && $.$$eq(fB, fixtureB) === true)
          return;
        if (t1.$eq(fA, fixtureB) === true && $.$$eq(fB, fixtureA) === true)
          return;
      }
      edge = edge.get$next();
    }
    t1 = bodyB.shouldCollide$1(bodyA);
    if (typeof t1 !== "boolean")
      return this.addPair$2$bailout(1, fixtureA, fixtureB, t1);
    if (!t1)
      return;
    t1 = this.contactFilter;
    t1 = t1.shouldCollide$2(fixtureA, fixtureB);
    if (typeof t1 !== "boolean")
      return this.addPair$2$bailout(2, fixtureA, fixtureB, t1);
    t1 = !t1;
    if (t1)
      return;
    c = this.pool.popContact$2(fixtureA, fixtureB);
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.get$body();
    bodyB = fixtureB.get$body();
    c.set$prev(null);
    c.set$next(this.contactList);
    t1 = this.contactList;
    if (!(t1 == null))
      t1.set$prev(c);
    this.contactList = c;
    c.get$edge1().set$contact(c);
    c.get$edge1().set$other(bodyB);
    c.get$edge1().set$prev(null);
    t1 = bodyA.get$contactList();
    c.get$edge1().set$next(t1);
    if (!(bodyA.get$contactList() == null)) {
      t1 = c.get$edge1();
      bodyA.get$contactList().set$prev(t1);
    }
    bodyA.set$contactList(c.get$edge1());
    c.get$edge2().set$contact(c);
    c.get$edge2().set$other(bodyA);
    c.get$edge2().set$prev(null);
    t1 = bodyB.get$contactList();
    c.get$edge2().set$next(t1);
    if (!(bodyB.get$contactList() == null)) {
      t1 = c.get$edge2();
      bodyB.get$contactList().set$prev(t1);
    }
    bodyB.set$contactList(c.get$edge2());
    t1 = this.contactCount;
    if (typeof t1 !== "number")
      return this.addPair$2$bailout(3, 0, 0, t1);
    this.contactCount = t1 + 1;
  },
  addPair$2$bailout: function(state0, fixtureA, fixtureB, t1) {
    switch (state0) {
      case 0:
        bodyA = fixtureA.get$body();
        bodyB = fixtureB.get$body();
        if ($.$$eq(bodyA, bodyB) === true)
          return;
        edge = bodyB.get$contactList();
        for (; !(edge == null);) {
          if ($.$$eq(edge.get$other(), bodyA) === true) {
            t1 = edge.get$contact();
            fA = t1.get$fixtureA();
            fB = t1.get$fixtureB();
            t1 = $.getInterceptor(fA);
            if (t1.$eq(fA, fixtureA) === true && $.$$eq(fB, fixtureB) === true)
              return;
            if (t1.$eq(fA, fixtureB) === true && $.$$eq(fB, fixtureA) === true)
              return;
          }
          edge = edge.get$next();
        }
        t1 = bodyB.shouldCollide$1(bodyA);
      case 1:
        state0 = 0;
        if ($.$$eq(t1, false) === true)
          return;
        t1 = this.contactFilter;
        t1 = t1.shouldCollide$2(fixtureA, fixtureB);
      case 2:
        state0 = 0;
        t3 = $.$$eq(t1, false) === true;
        t1 = t3;
        if (t1)
          return;
        c = this.pool.popContact$2(fixtureA, fixtureB);
        fixtureA = c.get$fixtureA();
        fixtureB = c.get$fixtureB();
        bodyA = fixtureA.get$body();
        bodyB = fixtureB.get$body();
        c.set$prev(null);
        c.set$next(this.contactList);
        t1 = this.contactList;
        if (!(t1 == null))
          t1.set$prev(c);
        this.contactList = c;
        c.get$edge1().set$contact(c);
        c.get$edge1().set$other(bodyB);
        c.get$edge1().set$prev(null);
        t1 = bodyA.get$contactList();
        c.get$edge1().set$next(t1);
        if (!(bodyA.get$contactList() == null)) {
          t1 = c.get$edge1();
          bodyA.get$contactList().set$prev(t1);
        }
        bodyA.set$contactList(c.get$edge1());
        c.get$edge2().set$contact(c);
        c.get$edge2().set$other(bodyA);
        c.get$edge2().set$prev(null);
        t1 = bodyB.get$contactList();
        c.get$edge2().set$next(t1);
        if (!(bodyB.get$contactList() == null)) {
          t1 = c.get$edge2();
          bodyB.get$contactList().set$prev(t1);
        }
        bodyB.set$contactList(c.get$edge2());
        t1 = this.contactCount;
      case 3:
        var bodyA, bodyB, edge, fA, fB, t3, c;
        state0 = 0;
        this.contactCount = $.$$add(t1, 1);
    }
  },
  findNewContacts$0: function() {
    this.broadPhase.updatePairs$1(this);
  },
  destroy$1: function(c) {
    var fixtureA, fixtureB, bodyA, bodyB, t1, t2;
    fixtureA = c.get$fixtureA();
    fixtureB = c.get$fixtureB();
    bodyA = fixtureA.get$body();
    bodyB = fixtureB.get$body();
    t1 = this.contactListener;
    if (!(t1 == null) && c.get$touching() === true)
      t1.endContact$1(c);
    t1 = c.get$prev();
    if (!(t1 == null))
      t1.set$next(c.get$next());
    t1 = c.get$next();
    if (!(t1 == null))
      t1.set$prev(c.get$prev());
    if ($.$$eq(c, this.contactList) === true)
      this.contactList = c.get$next();
    t1 = c.get$edge1();
    t2 = t1.get$prev();
    if (!(t2 == null))
      t2.set$next(t1.get$next());
    t1 = c.get$edge1();
    t2 = t1.get$next();
    if (!(t2 == null))
      t2.set$prev(t1.get$prev());
    if ($.$$eq(c.get$edge1(), bodyA.get$contactList()) === true)
      bodyA.set$contactList(c.get$edge1().get$next());
    t1 = c.get$edge2();
    t2 = t1.get$prev();
    if (!(t2 == null))
      t2.set$next(t1.get$next());
    t1 = c.get$edge2();
    t2 = t1.get$next();
    if (!(t2 == null))
      t2.set$prev(t1.get$prev());
    if ($.$$eq(c.get$edge2(), bodyB.get$contactList()) === true)
      bodyB.set$contactList(c.get$edge2().get$next());
    this.pool.pushContact$1(c);
    t1 = this.contactCount;
    if (typeof t1 !== "number")
      return this.destroy$1$bailout(1, t1);
    this.contactCount = t1 - 1;
  },
  destroy$1$bailout: function(state0, t1) {
    this.contactCount = $.$$sub(t1, 1);
  },
  collide$0: function() {
    var c, t1, t2, t3, fixtureA, fixtureB, bodyA, bodyB, c0;
    c = this.contactList;
    for (t1 = this.contactFilter, t2 = this.broadPhase, t3 = this.contactListener; !(c == null);) {
      fixtureA = c.get$fixtureA();
      fixtureB = c.get$fixtureB();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      if ($.$$eq(bodyA.get$awake(), false) === true && $.$$eq(bodyB.get$awake(), false) === true) {
        c = c.get$next();
        continue;
      }
      if ($.$$eq($.$$and(c.get$flags(), 8), 8) === true) {
        if ($.$$eq(bodyB.shouldCollide$1(bodyA), false) === true) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        if ($.$$eq(t1.shouldCollide$2(fixtureA, fixtureB), false) === true) {
          c0 = c.get$next();
          this.destroy$1(c);
          c = c0;
          continue;
        }
        c.set$flags($.$$and(c.get$flags(), 4294967287));
      }
      if ($.$$eq(t2.testOverlap$2(fixtureA.get$proxy(), fixtureB.get$proxy()), false) === true) {
        c0 = c.get$next();
        this.destroy$1(c);
        c = c0;
        continue;
      }
      c.update$1(t3);
      c = c.get$next();
    }
  }
};

$$.Filter = {"": "Object;categoryBits>,maskBits>,groupIndex>",
  setFrom$1: function(other) {
    this.categoryBits = other.get$categoryBits();
    this.maskBits = other.get$maskBits();
    this.groupIndex = other.get$groupIndex();
  }
};

$$.Fixture = {"": "Object;box>,density>,next=,body>,shape>,friction=,restitution=,proxy>,filter>,isSensor>,userData=,_poolOne,_poolTwo",
  create$2: function(b, def) {
    this.userData = def.userData;
    this.friction = def.friction;
    this.restitution = def.restitution;
    this.body = b;
    this.next = null;
    this.filter.setFrom$1(def.filter);
    this.isSensor = def.isSensor;
    this.shape = def.shape.clone$0();
    this.density = def.density;
  },
  createProxy$2: function(broadPhase, xf) {
    var t1, t2;
    t1 = this.shape;
    t2 = this.box;
    t1.computeAxisAlignedBox$2(t2, xf);
    this.proxy = broadPhase.createProxy$2(t2, this);
  },
  synchronize$3: function(broadPhase, transformOne, transformTwo) {
    var t1, t2, t3, t5, t4, t6, disp, t9;
    if (this.proxy == null)
      return;
    t1 = this.shape;
    t2 = this._poolOne;
    t1.computeAxisAlignedBox$2(t2, transformOne);
    t1 = this.shape;
    t3 = this._poolTwo;
    t1.computeAxisAlignedBox$2(t3, transformTwo);
    t1 = t2.lowerBound.get$x();
    t5 = t3.lowerBound.get$x();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(1, broadPhase, transformOne, transformTwo, t1, t2, t3);
    if (typeof t5 !== "number")
      return this.synchronize$3$bailout(2, broadPhase, transformOne, transformTwo, t1, t2, t3, t5);
    if (t1 < t5)
      ;
    else
      t1 = t5;
    t4 = this.box;
    t4.lowerBound.set$x(t1);
    t1 = t2.lowerBound.get$y();
    t6 = t3.lowerBound.get$y();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(3, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(4, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4, t6);
    if (t1 < t6)
      ;
    else
      t1 = t6;
    t4.lowerBound.set$y(t1);
    t1 = t2.upperBound.get$x();
    t6 = t3.upperBound.get$x();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(5, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(6, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4, t6);
    if (t1 > t6)
      ;
    else
      t1 = t6;
    t4.upperBound.set$x(t1);
    t1 = t2.upperBound.get$y();
    t6 = t3.upperBound.get$y();
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(7, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(8, broadPhase, transformOne, transformTwo, t1, t2, t3, 0, t4, t6);
    if (t1 > t6)
      ;
    else
      t1 = t6;
    t4.upperBound.set$y(t1);
    disp = t2.lowerBound;
    t2 = transformTwo.position;
    t1 = t2.x;
    t5 = transformOne.position;
    t6 = t5.x;
    if (typeof t1 !== "number")
      return this.synchronize$3$bailout(9, broadPhase, transformOne, 0, t1, t2, 0, 0, t4, 0, disp);
    if (typeof t6 !== "number")
      return this.synchronize$3$bailout(10, broadPhase, 0, 0, t1, t2, 0, t5, t4, t6, disp);
    disp.set$x(t1 - t6);
    t2 = t2.y;
    t9 = t5.y;
    if (typeof t2 !== "number")
      return this.synchronize$3$bailout(11, broadPhase, 0, 0, 0, t2, 0, t5, t4, 0, disp);
    if (typeof t9 !== "number")
      return this.synchronize$3$bailout(12, broadPhase, 0, 0, 0, t2, 0, 0, t4, 0, disp, t9);
    disp.set$y(t2 - t9);
    broadPhase.moveProxy$3(this.proxy, t4, disp);
  },
  synchronize$3$bailout: function(state0, broadPhase, transformOne, transformTwo, t1, t2, t3, t5, t4, t6, disp, t9) {
    switch (state0) {
      case 0:
        if (this.proxy == null)
          return;
        t1 = this.shape;
        t2 = this._poolOne;
        t1.computeAxisAlignedBox$2(t2, transformOne);
        t1 = this.shape;
        t3 = this._poolTwo;
        t1.computeAxisAlignedBox$2(t3, transformTwo);
        t1 = t2.lowerBound.get$x();
      case 1:
        state0 = 0;
        t5 = t3.lowerBound.get$x();
      case 2:
        state0 = 0;
        t1 = $.$$lt(t1, t5) === true ? t2.lowerBound.get$x() : t3.lowerBound.get$x();
        t4 = this.box;
        t4.lowerBound.set$x(t1);
        t1 = t2.lowerBound.get$y();
      case 3:
        state0 = 0;
        t6 = t3.lowerBound.get$y();
      case 4:
        state0 = 0;
        t1 = $.$$lt(t1, t6) === true ? t2.lowerBound.get$y() : t3.lowerBound.get$y();
        t4.lowerBound.set$y(t1);
        t1 = t2.upperBound.get$x();
      case 5:
        state0 = 0;
        t6 = t3.upperBound.get$x();
      case 6:
        state0 = 0;
        t1 = $.$$gt(t1, t6) === true ? t2.upperBound.get$x() : t3.upperBound.get$x();
        t4.upperBound.set$x(t1);
        t1 = t2.upperBound.get$y();
      case 7:
        state0 = 0;
        t6 = t3.upperBound.get$y();
      case 8:
        state0 = 0;
        t1 = $.$$gt(t1, t6) === true ? t2.upperBound.get$y() : t3.upperBound.get$y();
        t4.upperBound.set$y(t1);
        disp = t2.lowerBound;
        t2 = transformTwo.position;
        t1 = t2.x;
      case 9:
        state0 = 0;
        t5 = transformOne.position;
        t6 = t5.x;
      case 10:
        state0 = 0;
        disp.set$x($.$$sub(t1, t6));
        t2 = t2.y;
      case 11:
        state0 = 0;
        t9 = t5.y;
      case 12:
        state0 = 0;
        disp.set$y($.$$sub(t2, t9));
        broadPhase.moveProxy$3(this.proxy, t4, disp);
    }
  },
  getMassData$1: function(massData) {
    this.shape.computeMass$2(massData, this.density);
  },
  get$type: function() {
    return this.shape.get$type();
  }
};

$$.FixtureDef = {"": "Object;shape>,userData=,friction=,restitution=,density>,isSensor>,filter>",
  FixtureDef$0: function() {
    var t1 = this.filter;
    t1.categoryBits = 1;
    t1.maskBits = 65535;
    t1.groupIndex = 0;
  }
};

$$.Island = {"": "Object;listener,bodies>,contacts,joints>,positions,velocities,bodyCount>,jointCount,contactCount>,bodyCapacity,contactCapacity,jointCapacity,positionIterationCount,_contactSolver,_translation,impulse",
  init$4: function(argBodyCapacity, argContactCapacity, argJointCapacity, argListener) {
    var t1, old, i;
    this.bodyCapacity = argBodyCapacity;
    this.contactCapacity = argContactCapacity;
    this.jointCapacity = argJointCapacity;
    this.bodyCount = 0;
    this.contactCount = 0;
    this.listener = argListener;
    t1 = this.bodies;
    if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)) === true)
      this.bodies = $.List_List(this.bodyCapacity);
    t1 = this.contacts;
    if (t1 == null || $.$$gt(this.contactCapacity, $.length(t1)) === true)
      this.contacts = $.List_List(this.contactCapacity);
    t1 = this.joints;
    if (t1 == null || $.$$gt(this.jointCapacity, $.length(t1)) === true)
      this.joints = $.List_List(this.jointCapacity);
    t1 = this.velocities;
    if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)) === true) {
      old = this.velocities;
      if (old == null)
        old = $.List_List(0);
      this.velocities = $.List_List(this.bodyCapacity);
      t1 = $.getInterceptor$JSArrayJSString(old);
      $.setRange(this.velocities, 0, t1.get$length(old), old);
      i = t1.get$length(old);
      if (typeof i !== "number")
        return this.init$4$bailout(1, i);
      for (; $.CONSTANT4.$lt(i, $.length(this.velocities)); ++i)
        $.$$indexSet(this.velocities, i, $.Velocity$());
    }
    t1 = this.positions;
    if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)) === true) {
      old = this.positions;
      if (old == null)
        old = $.List_List(0);
      this.positions = $.List_List(this.bodyCapacity);
      t1 = $.getInterceptor$JSArrayJSString(old);
      $.setRange(this.positions, 0, t1.get$length(old), old);
      i = t1.get$length(old);
      if (typeof i !== "number")
        return this.init$4$bailout(2, i);
      for (; $.CONSTANT4.$lt(i, $.length(this.positions)); ++i)
        $.$$indexSet(this.positions, i, $.Position$());
    }
  },
  init$4$bailout: function(state0, i) {
    switch (state0) {
      case 0:
        this.bodyCapacity = argBodyCapacity;
        this.contactCapacity = argContactCapacity;
        this.jointCapacity = argJointCapacity;
        this.bodyCount = 0;
        this.contactCount = 0;
        this.listener = argListener;
        t1 = this.bodies;
        if (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)) === true)
          this.bodies = $.List_List(this.bodyCapacity);
        t1 = this.contacts;
        if (t1 == null || $.$$gt(this.contactCapacity, $.length(t1)) === true)
          this.contacts = $.List_List(this.contactCapacity);
        t1 = this.joints;
        if (t1 == null || $.$$gt(this.jointCapacity, $.length(t1)) === true)
          this.joints = $.List_List(this.jointCapacity);
        t1 = this.velocities;
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)) === true))
          switch (state0) {
            case 0:
              old = this.velocities;
              if (old == null)
                old = $.List_List(0);
              this.velocities = $.List_List(this.bodyCapacity);
              t1 = $.getInterceptor$JSArrayJSString(old);
              $.setRange(this.velocities, 0, t1.get$length(old), old);
              i = t1.get$length(old);
            case 1:
              state0 = 0;
              for (; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, $.length(this.velocities)) === true; i = t1.$add(i, 1))
                $.$$indexSet(this.velocities, i, $.Velocity$());
          }
        t1 = this.positions;
      case 2:
        var t1, old;
        if (state0 === 2 || state0 === 0 && (t1 == null || $.$$gt(this.bodyCapacity, $.length(t1)) === true))
          switch (state0) {
            case 0:
              old = this.positions;
              if (old == null)
                old = $.List_List(0);
              this.positions = $.List_List(this.bodyCapacity);
              t1 = $.getInterceptor$JSArrayJSString(old);
              $.setRange(this.positions, 0, t1.get$length(old), old);
              i = t1.get$length(old);
            case 2:
              state0 = 0;
              for (; t1 = $.getInterceptor$JSNumber(i), t1.$lt(i, $.length(this.positions)) === true; i = t1.$add(i, 1))
                $.$$indexSet(this.positions, i, $.Position$());
          }
    }
  },
  clear$0: function() {
    this.bodyCount = 0;
    this.contactCount = 0;
    this.jointCount = 0;
  },
  solve$3: function(step, gravity, allowSleep) {
    var i, t1, b, t2, t4, t6, velocityDelta, t12, t14, t17, t19, a, a1, t3, a2, b1, i1, i2, fixtureA, fixtureB, bodyA, bodyB, nonStatic, temp, t5, j, rotation, ratio, t7, t9, contactsOkay, jointsOkay, jointOkay, minSleepTime;
    i = 0;
    while (true) {
      t1 = this.bodyCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(1, step, gravity, allowSleep, i, t1);
      if (!(i < t1))
        break;
      c$0: {
        t1 = this.bodies;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior)
          return this.solve$3$bailout(2, step, gravity, allowSleep, i, t1);
        if (i >= t1.length)
          throw $.ioore(i);
        b = t1[i];
        t1 = b.get$type();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(3, step, gravity, allowSleep, i, t1, b);
        if (!(t1 === 2))
          break c$0;
        t1 = b.get$_force();
        t2 = t1.get$x();
        t4 = b.get$invMass();
        if (typeof t2 !== "number")
          return this.solve$3$bailout(4, step, gravity, allowSleep, i, t2, b);
        if (typeof t4 !== "number")
          return this.solve$3$bailout(5, step, gravity, allowSleep, i, t2, b, t4);
        t2 *= t4;
        t6 = gravity.get$x();
        if (typeof t6 !== "number")
          return this.solve$3$bailout(6, step, gravity, allowSleep, i, t6, b, t2);
        t6 = t2 + t6;
        t2 = step.get$dt();
        if (typeof t2 !== "number")
          return this.solve$3$bailout(7, step, gravity, allowSleep, i, t6, b, t2);
        t6 *= t2;
        t1 = t1.get$y();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(8, step, gravity, allowSleep, i, t1, b, t6);
        t4 = t1 * t4;
        t1 = gravity.get$y();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(10, step, gravity, allowSleep, i, t1, b, t6, t4);
        velocityDelta = $.Vector$(t6, (t4 + t1) * t2);
        b.get$linearVelocity().addLocal$1(velocityDelta);
        t6 = b.get$angularVelocity();
        t12 = step.get$dt();
        t14 = b.get$invInertia();
        if (typeof t12 !== "number")
          return this.solve$3$bailout(13, step, gravity, allowSleep, i, 0, b, t6, 0, t12);
        if (typeof t14 !== "number")
          return this.solve$3$bailout(14, step, gravity, allowSleep, i, 0, b, t6, 0, t12, t14);
        t14 = t12 * t14;
        t12 = b.get$_torque();
        if (typeof t12 !== "number")
          return this.solve$3$bailout(15, step, gravity, allowSleep, i, 0, b, t6, 0, t12, t14);
        if (typeof t6 !== "number")
          return this.solve$3$bailout(12, step, gravity, allowSleep, i, 0, b, t6);
        b.set$angularVelocity(t6 + t14 * t12);
        t17 = step.get$dt();
        t19 = b.get$linearDamping();
        if (typeof t17 !== "number")
          return this.solve$3$bailout(16, step, gravity, allowSleep, i, 0, b, 0, 0, 0, 0, t17);
        if (typeof t19 !== "number")
          return this.solve$3$bailout(17, step, gravity, allowSleep, i, 0, b, 0, 0, 0, 0, t17, t19);
        a = 1 - t17 * t19;
        t1 = a < 1;
        if (0 > (t1 ? a : 1))
          a1 = 0;
        else
          a1 = t1 ? a : 1;
        b.get$linearVelocity().mulLocal$1(a1);
        t1 = step.get$dt();
        t3 = b.get$angularDamping();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(18, step, gravity, allowSleep, i, t1, b);
        if (typeof t3 !== "number")
          return this.solve$3$bailout(19, step, gravity, allowSleep, i, t1, b, t3);
        a2 = 1 - t1 * t3;
        b1 = a2 < 1 ? a2 : 1;
        t1 = b.get$angularVelocity();
        t3 = 0 > b1 ? 0 : b1;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(20, step, gravity, allowSleep, i, t1, b, 0, 0, 0, 0, 0, 0, b1);
        b.set$angularVelocity(t1 * t3);
      }
      ++i;
    }
    i1 = -1;
    i2 = 0;
    while (true) {
      t1 = this.contactCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(21, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, i2, i1);
      t3 = i2 < t1;
      t4 = this.contacts;
      if (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior)
        return this.solve$3$bailout(22, step, 0, allowSleep, 0, t3, 0, t4, 0, 0, 0, 0, 0, 0, i2, i1);
      if (!t3)
        break;
      if (i2 >= t4.length)
        throw $.ioore(i2);
      fixtureA = t4[i2].get$fixtureA();
      if (i2 >= t4.length)
        throw $.ioore(i2);
      fixtureB = t4[i2].get$fixtureB();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      t1 = bodyA.get$type();
      if (typeof t1 !== "number")
        return this.solve$3$bailout(24, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, i2, i1, 0, bodyB);
      if (!(t1 === 0)) {
        t1 = bodyB.get$type();
        if (typeof t1 !== "number")
          return this.solve$3$bailout(25, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, i2, i1);
        nonStatic = !(t1 === 0);
      } else
        nonStatic = false;
      if (nonStatic) {
        ++i1;
        t1 = this.contacts;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior)
          return this.solve$3$bailout(26, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, i2, i1);
        if (i1 >= t1.length)
          throw $.ioore(i1);
        temp = t1[i1];
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
          return this.solve$3$bailout(27, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, i2, i1, 0, 0, temp);
        t4 = t1.length;
        if (i2 >= t4)
          throw $.ioore(i2);
        t5 = t1[i2];
        if (i1 >= t4)
          throw $.ioore(i1);
        t1[i1] = t5;
        if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
          return this.solve$3$bailout(28, step, 0, allowSleep, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, i2, i1, 0, 0, temp);
        if (i2 >= t1.length)
          throw $.ioore(i2);
        t1[i2] = temp;
      }
      ++i2;
    }
    t2 = this._contactSolver;
    t2.init$3(t4, t1, step.get$dtRatio());
    t2.warmStart$0();
    i = 0;
    while (true) {
      t1 = this.jointCount;
      if (typeof t1 !== "number")
        return this.solve$3$bailout(29, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
      if (!(i < t1))
        break;
      t1 = this.joints;
      if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior)
        return this.solve$3$bailout(30, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].initVelocityConstraints$1(step);
      ++i;
    }
    i = 0;
    while (true) {
      t1 = step.get$velocityIterations();
      if (typeof t1 !== "number")
        return this.solve$3$bailout(31, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
      if (!(i < t1))
        break;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(32, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior)
          return this.solve$3$bailout(33, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j);
        if (j >= t1.length)
          throw $.ioore(j);
        t1[j].solveVelocityConstraints$1(step);
        ++j;
      }
      t2.solveVelocityConstraints$0();
      ++i;
    }
    t2.storeImpulses$0();
    temp = $.Vector$(0, 0);
    t1 = this._translation;
    i = 0;
    while (true) {
      t3 = this.bodyCount;
      if (typeof t3 !== "number")
        return this.solve$3$bailout(34, step, 0, allowSleep, i, t2, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1);
      if (!(i < t3))
        break;
      c$0: {
        t3 = this.bodies;
        if (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior)
          return this.solve$3$bailout(35, step, 0, allowSleep, i, t2, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1);
        if (i >= t3.length)
          throw $.ioore(i);
        b = t3[i];
        t3 = b.get$type();
        if (typeof t3 !== "number")
          return this.solve$3$bailout(36, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1);
        if (t3 === 0)
          break c$0;
        t1.setFrom$1(b.get$linearVelocity());
        t1.mulLocal$1(step.get$dt());
        t3 = t1.x;
        if (typeof t3 !== "number")
          return this.solve$3$bailout(37, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1);
        t3 *= t3;
        t5 = t1.y;
        if (typeof t5 !== "number")
          return this.solve$3$bailout(38, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t5);
        if (t3 + t5 * t5 > 4) {
          t3 = t1.get$length();
          if (typeof t3 !== "number")
            throw $.iae(t3);
          b.get$linearVelocity().mulLocal$1(2 / t3);
        }
        t3 = step.get$dt();
        t5 = b.get$angularVelocity();
        if (typeof t3 !== "number")
          return this.solve$3$bailout(40, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1);
        if (typeof t5 !== "number")
          return this.solve$3$bailout(41, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t5);
        rotation = t3 * t5;
        if (rotation * rotation > 2.4674011002723395) {
          t3 = $.CONSTANT4.abs$0(rotation);
          if (typeof t3 !== "number")
            throw $.iae(t3);
          ratio = 1.5707963267948966 / t3;
          t3 = b.get$angularVelocity();
          if (typeof t3 !== "number")
            return this.solve$3$bailout(42, step, 0, allowSleep, i, t2, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, 0, ratio);
          b.set$angularVelocity(t3 * ratio);
        }
        t3 = b.get$sweep();
        t3.get$centerZero().setFrom$1(t3.get$center());
        t4 = b.get$sweep().get$angle();
        b.get$sweep().set$angleZero(t4);
        temp.setFrom$1(b.get$linearVelocity());
        temp.mulLocal$1(step.get$dt());
        b.get$sweep().get$center().addLocal$1(temp);
        t4 = b.get$sweep();
        t5 = t4.get$angle();
        t7 = step.get$dt();
        t9 = b.get$angularVelocity();
        if (typeof t7 !== "number")
          return this.solve$3$bailout(44, step, 0, allowSleep, i, t2, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t5, 0, t4, t7);
        if (typeof t9 !== "number")
          return this.solve$3$bailout(45, step, 0, allowSleep, i, t2, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t5, 0, t4, t7, t9);
        if (typeof t5 !== "number")
          return this.solve$3$bailout(43, step, 0, allowSleep, i, t2, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, temp, t1, 0, t5, 0, t4);
        t4.set$angle(t5 + t7 * t9);
        b.synchronizeTransform$0();
      }
      ++i;
    }
    i = 0;
    while (true) {
      t1 = step.get$positionIterations();
      if (typeof t1 !== "number")
        return this.solve$3$bailout(46, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1);
      if (!(i < t1))
        break;
      contactsOkay = t2.solvePositionConstraints$1(0.2);
      jointsOkay = true;
      j = 0;
      while (true) {
        t1 = this.jointCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(47, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j, 0, 0, 0, 0, 0, jointsOkay, contactsOkay);
        if (!(j < t1))
          break;
        t1 = this.joints;
        if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior)
          return this.solve$3$bailout(48, step, 0, allowSleep, i, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, j, 0, 0, 0, 0, 0, jointsOkay, contactsOkay);
        if (j >= t1.length)
          throw $.ioore(j);
        jointOkay = t1[j].solvePositionConstraints$1(0.2);
        jointsOkay = jointsOkay && jointOkay === true;
        ++j;
      }
      if (contactsOkay === true && jointsOkay)
        break;
      ++i;
    }
    this.report$1(t2.constraints);
    if (allowSleep === true) {
      minSleepTime = 99999999999999;
      i = 0;
      while (true) {
        t1 = this.bodyCount;
        if (typeof t1 !== "number")
          return this.solve$3$bailout(49, step, 0, 0, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
        if (!(i < t1))
          break;
        c$0: {
          t1 = this.bodies;
          if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior)
            return this.solve$3$bailout(50, step, 0, 0, i, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (i >= t1.length)
            throw $.ioore(i);
          b = t1[i];
          t1 = b.get$type();
          if (typeof t1 !== "number")
            return this.solve$3$bailout(51, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if (t1 === 0)
            break c$0;
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(52, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) === 0) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          }
          t1 = b.get$flags();
          if (t1 !== (t1 | 0))
            return this.solve$3$bailout(53, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          if ((t1 & 4) !== 0) {
            t1 = b.get$angularVelocity();
            t3 = b.get$angularVelocity();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(54, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            if (typeof t3 !== "number")
              return this.solve$3$bailout(55, step, 0, 0, i, t1, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            if (!(t1 * t3 > 0.0012184696791468343)) {
              t1 = b.get$linearVelocity();
              t2 = b.get$linearVelocity();
              t3 = t1.get$x();
              t5 = t2.get$x();
              if (typeof t3 !== "number")
                return this.solve$3$bailout(56, step, 0, 0, i, t1, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
              if (typeof t5 !== "number")
                return this.solve$3$bailout(57, step, 0, 0, i, t1, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, t5, 0, 0, 0, 0, 0, 0, minSleepTime);
              t5 = t3 * t5;
              t1 = t1.get$y();
              t7 = t2.get$y();
              if (typeof t1 !== "number")
                return this.solve$3$bailout(58, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, t5, 0, 0, 0, 0, 0, 0, minSleepTime);
              if (typeof t7 !== "number")
                return this.solve$3$bailout(59, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, 0, 0, t7, 0, 0, 0, minSleepTime);
              t9 = t5 + t1 * t7 > 0.0001;
              t1 = t9;
            } else
              t1 = true;
          } else
            t1 = true;
          if (t1) {
            b.set$sleepTime(0);
            minSleepTime = 0;
          } else {
            t1 = b.get$sleepTime();
            t3 = step.get$dt();
            if (typeof t1 !== "number")
              return this.solve$3$bailout(60, step, 0, 0, i, t1, b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            if (typeof t3 !== "number")
              return this.solve$3$bailout(61, step, 0, 0, i, t1, b, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
            b.set$sleepTime(t1 + t3);
            minSleepTime = $.min(minSleepTime, b.get$sleepTime());
            if (minSleepTime !== (minSleepTime | 0))
              return this.solve$3$bailout(62, step, 0, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, minSleepTime);
          }
        }
        ++i;
      }
      if (minSleepTime >= 0.5) {
        i = 0;
        while (true) {
          t1 = this.bodyCount;
          if (typeof t1 !== "number")
            return this.solve$3$bailout(63, 0, 0, 0, i, t1);
          if (!(i < t1))
            break;
          t1 = this.bodies;
          if (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior)
            return this.solve$3$bailout(64, 0, 0, 0, i, t1);
          if (i >= t1.length)
            throw $.ioore(i);
          t1[i].set$awake(false);
          ++i;
        }
      }
    }
  },
  solve$3$bailout: function(state0, step, gravity, allowSleep, i, t1, b, t3, t8, t13, t15, t18, t20, b1, i2, i1, fixtureA, bodyB, temp, t2, j, t5, ratio, t4, t7, t9, jointsOkay, contactsOkay, minSleepTime) {
    switch (state0) {
      case 0:
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.bodyCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L0;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t1 = this.bodies;
                    case 2:
                      state0 = 0;
                      b = $.$$index(t1, i);
                      t1 = b.get$type();
                    case 3:
                      state0 = 0;
                      if ($.$$eq(t1, 2) !== true)
                        break c$0;
                      t1 = b.get$_force().get$x();
                    case 4:
                      state0 = 0;
                      t3 = b.get$invMass();
                    case 5:
                      state0 = 0;
                      t3 = $.$$mul(t1, t3);
                      t1 = gravity.get$x();
                    case 6:
                      state0 = 0;
                      t1 = $.$$add(t3, t1);
                      t3 = step.get$dt();
                    case 7:
                      state0 = 0;
                      t3 = $.$$mul(t1, t3);
                      t1 = b.get$_force().get$y();
                    case 8:
                      state0 = 0;
                      t8 = b.get$invMass();
                    case 9:
                      state0 = 0;
                      t8 = $.$$mul(t1, t8);
                      t1 = gravity.get$y();
                    case 10:
                      state0 = 0;
                      t1 = $.$$add(t8, t1);
                      t8 = step.get$dt();
                    case 11:
                      state0 = 0;
                      velocityDelta = $.Vector$(t3, $.$$mul(t1, t8));
                      b.get$linearVelocity().addLocal$1(velocityDelta);
                      t3 = b.get$angularVelocity();
                    case 12:
                      state0 = 0;
                      t13 = step.get$dt();
                    case 13:
                      state0 = 0;
                      t15 = b.get$invInertia();
                    case 14:
                      state0 = 0;
                      t15 = $.$$mul(t13, t15);
                      t13 = b.get$_torque();
                    case 15:
                      state0 = 0;
                      b.set$angularVelocity($.$$add(t3, $.$$mul(t15, t13)));
                      t18 = step.get$dt();
                    case 16:
                      state0 = 0;
                      t20 = b.get$linearDamping();
                    case 17:
                      state0 = 0;
                      t20 = $.$$mul(t18, t20);
                      if (typeof t20 !== "number")
                        throw $.iae(t20);
                      a = 1 - t20;
                      t1 = a < 1;
                      if (0 > (t1 ? a : 1))
                        a1 = 0;
                      else
                        a1 = t1 ? a : 1;
                      b.get$linearVelocity().mulLocal$1(a1);
                      t1 = step.get$dt();
                    case 18:
                      state0 = 0;
                      t3 = b.get$angularDamping();
                    case 19:
                      state0 = 0;
                      t3 = $.$$mul(t1, t3);
                      if (typeof t3 !== "number")
                        throw $.iae(t3);
                      a2 = 1 - t3;
                      b1 = a2 < 1 ? a2 : 1;
                      t1 = b.get$angularVelocity();
                    case 20:
                      state0 = 0;
                      t3 = 0 > b1 ? 0 : b1;
                      b.set$angularVelocity($.$$mul(t1, t3));
                  }
                }
                ++i;
            }
        i1 = -1;
        i2 = 0;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.contactCount;
              case 21:
                state0 = 0;
                t1 = $.CONSTANT5.$lt(i2, t1);
                t3 = this.contacts;
              case 22:
                state0 = 0;
                if (!t1)
                  break L1;
                fixtureA = $.$$index(t3, i2).get$fixtureA();
                t1 = this.contacts;
              case 23:
                state0 = 0;
                fixtureB = $.$$index(t1, i2).get$fixtureB();
                bodyA = fixtureA.get$body();
                bodyB = fixtureB.get$body();
                t1 = bodyA.get$type();
              case 24:
                state0 = 0;
              case 25:
                if (state0 === 25 || state0 === 0 && $.$$eq(t1, 0) !== true)
                  switch (state0) {
                    case 0:
                      t1 = bodyB.get$type();
                    case 25:
                      state0 = 0;
                      nonStatic = $.$$eq(t1, 0) !== true;
                  }
                else
                  nonStatic = false;
              default:
                if (state0 === 28 || state0 === 27 || state0 === 26 || state0 === 0 && nonStatic)
                  switch (state0) {
                    case 0:
                      ++i1;
                      t1 = this.contacts;
                    case 26:
                      state0 = 0;
                      temp = $.$$index(t1, i1);
                      t1 = this.contacts;
                    case 27:
                      state0 = 0;
                      $.$$indexSet(t1, i1, $.$$index(t1, i2));
                      t1 = this.contacts;
                    case 28:
                      state0 = 0;
                      $.$$indexSet(t1, i2, temp);
                  }
                ++i2;
            }
        t1 = this._contactSolver;
        t1.init$3(t3, this.contactCount, step.get$dtRatio());
        t1.warmStart$0();
        i = 0;
      case 29:
      case 30:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t2 = this.jointCount;
              case 29:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t2))
                  break L2;
                t2 = this.joints;
              case 30:
                state0 = 0;
                $.$$index(t2, i).initVelocityConstraints$1(step);
                ++i;
            }
        i = 0;
      case 31:
      case 32:
      case 33:
        L3:
          while (true)
            switch (state0) {
              case 0:
                t2 = step.get$velocityIterations();
              case 31:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t2))
                  break L3;
                j = 0;
              default:
                L4:
                  while (true)
                    switch (state0) {
                      case 0:
                        t2 = this.jointCount;
                      case 32:
                        state0 = 0;
                        if (!$.CONSTANT5.$lt(j, t2))
                          break L4;
                        t2 = this.joints;
                      case 33:
                        state0 = 0;
                        $.$$index(t2, j).solveVelocityConstraints$1(step);
                        ++j;
                    }
                t1.solveVelocityConstraints$0();
                ++i;
            }
        t1.storeImpulses$0();
        temp = $.Vector$(0, 0);
        t2 = this._translation;
        i = 0;
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
        L5:
          while (true)
            switch (state0) {
              case 0:
                t3 = this.bodyCount;
              case 34:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t3))
                  break L5;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      t3 = this.bodies;
                    case 35:
                      state0 = 0;
                      b = $.$$index(t3, i);
                      t3 = b.get$type();
                    case 36:
                      state0 = 0;
                      if ($.$$eq(t3, 0) === true)
                        break c$0;
                      t2.setFrom$1(b.get$linearVelocity());
                      t2.mulLocal$1(step.get$dt());
                      t3 = t2.x;
                    case 37:
                      state0 = 0;
                      t3 = $.$$mul(t3, t3);
                      t5 = t2.y;
                    case 38:
                      state0 = 0;
                    case 39:
                      if (state0 === 39 || state0 === 0 && $.$$gt($.$$add(t3, $.$$mul(t5, t5)), 4) === true)
                        switch (state0) {
                          case 0:
                            t3 = t2.get$length();
                            if (typeof t3 !== "number")
                              throw $.iae(t3);
                            ratio = 2 / t3;
                          case 39:
                            state0 = 0;
                            b.get$linearVelocity().mulLocal$1(ratio);
                        }
                      t3 = step.get$dt();
                    case 40:
                      state0 = 0;
                      t5 = b.get$angularVelocity();
                    case 41:
                      state0 = 0;
                      rotation = $.$$mul(t3, t5);
                      t3 = $.getInterceptor$JSNumber(rotation);
                    case 42:
                      if (state0 === 42 || state0 === 0 && $.$$gt(t3.$mul(rotation, rotation), 2.4674011002723395) === true)
                        switch (state0) {
                          case 0:
                            t3 = t3.abs$0(rotation);
                            if (typeof t3 !== "number")
                              throw $.iae(t3);
                            ratio = 1.5707963267948966 / t3;
                            t3 = b.get$angularVelocity();
                          case 42:
                            state0 = 0;
                            b.set$angularVelocity($.$$mul(t3, ratio));
                        }
                      t3 = b.get$sweep();
                      t3.get$centerZero().setFrom$1(t3.get$center());
                      t4 = b.get$sweep().get$angle();
                      b.get$sweep().set$angleZero(t4);
                      temp.setFrom$1(b.get$linearVelocity());
                      temp.mulLocal$1(step.get$dt());
                      b.get$sweep().get$center().addLocal$1(temp);
                      t4 = b.get$sweep();
                      t5 = t4.get$angle();
                    case 43:
                      state0 = 0;
                      t7 = step.get$dt();
                    case 44:
                      state0 = 0;
                      t9 = b.get$angularVelocity();
                    case 45:
                      state0 = 0;
                      t4.set$angle($.$$add(t5, $.$$mul(t7, t9)));
                      b.synchronizeTransform$0();
                  }
                }
                ++i;
            }
        i = 0;
      case 46:
      case 47:
      case 48:
        L6:
          while (true)
            switch (state0) {
              case 0:
                t2 = step.get$positionIterations();
              case 46:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t2))
                  break L6;
                contactsOkay = t1.solvePositionConstraints$1(0.2);
                jointsOkay = true;
                j = 0;
              default:
                L7:
                  while (true)
                    switch (state0) {
                      case 0:
                        t2 = this.jointCount;
                      case 47:
                        state0 = 0;
                        if (!$.CONSTANT5.$lt(j, t2))
                          break L7;
                        t2 = this.joints;
                      case 48:
                        state0 = 0;
                        jointOkay = $.$$index(t2, j).solvePositionConstraints$1(0.2);
                        jointsOkay = jointsOkay && jointOkay === true;
                        ++j;
                    }
                if (contactsOkay === true && jointsOkay)
                  break L6;
                ++i;
            }
        this.report$1(t1.constraints);
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        var velocityDelta, a, a1, a2, fixtureB, bodyA, nonStatic, rotation, jointOkay;
        if (state0 === 64 || state0 === 63 || state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 51 || state0 === 50 || state0 === 49 || state0 === 0 && allowSleep === true)
          switch (state0) {
            case 0:
              minSleepTime = 99999999999999;
              i = 0;
            default:
              L8:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = this.bodyCount;
                    case 49:
                      state0 = 0;
                      if (!$.CONSTANT5.$lt(i, t1))
                        break L8;
                    default:
                      c$0: {
                        switch (state0) {
                          case 0:
                            t1 = this.bodies;
                          case 50:
                            state0 = 0;
                            b = $.$$index(t1, i);
                            t1 = b.get$type();
                          case 51:
                            state0 = 0;
                            if ($.$$eq(t1, 0) === true)
                              break c$0;
                            t1 = b.get$flags();
                          case 52:
                            state0 = 0;
                            if ($.$$eq($.$$and(t1, 4), 0) === true) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            }
                            t1 = b.get$flags();
                          case 53:
                            state0 = 0;
                          default:
                            if (state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 0 && $.$$eq($.$$and(t1, 4), 0) !== true)
                              switch (state0) {
                                case 0:
                                  t1 = b.get$angularVelocity();
                                case 54:
                                  state0 = 0;
                                  t3 = b.get$angularVelocity();
                                case 55:
                                  state0 = 0;
                                default:
                                  if (state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 0 && $.$$gt($.$$mul(t1, t3), 0.0012184696791468343) !== true)
                                    switch (state0) {
                                      case 0:
                                        t1 = b.get$linearVelocity();
                                        t2 = b.get$linearVelocity();
                                        t3 = t1.get$x();
                                      case 56:
                                        state0 = 0;
                                        t5 = t2.get$x();
                                      case 57:
                                        state0 = 0;
                                        t5 = $.$$mul(t3, t5);
                                        t1 = t1.get$y();
                                      case 58:
                                        state0 = 0;
                                        t7 = t2.get$y();
                                      case 59:
                                        state0 = 0;
                                        t9 = $.$$gt($.$$add(t5, $.$$mul(t1, t7)), 0.0001) === true;
                                        t1 = t9;
                                    }
                                  else
                                    t1 = true;
                              }
                            else
                              t1 = true;
                          case 60:
                          case 61:
                          case 62:
                            if (state0 === 0 && t1) {
                              b.set$sleepTime(0);
                              minSleepTime = 0;
                            } else
                              switch (state0) {
                                case 0:
                                  t1 = b.get$sleepTime();
                                case 60:
                                  state0 = 0;
                                  t3 = step.get$dt();
                                case 61:
                                  state0 = 0;
                                  b.set$sleepTime($.$$add(t1, t3));
                                  minSleepTime = $.min(minSleepTime, b.get$sleepTime());
                                case 62:
                                  state0 = 0;
                              }
                        }
                      }
                      ++i;
                  }
            case 63:
            case 64:
              if (state0 === 64 || state0 === 63 || state0 === 0 && minSleepTime >= 0.5)
                switch (state0) {
                  case 0:
                    i = 0;
                  default:
                    L9:
                      while (true)
                        switch (state0) {
                          case 0:
                            t1 = this.bodyCount;
                          case 63:
                            state0 = 0;
                            if (!$.CONSTANT5.$lt(i, t1))
                              break L9;
                            t1 = this.bodies;
                          case 64:
                            state0 = 0;
                            $.$$index(t1, i).set$awake(false);
                            ++i;
                        }
                }
          }
    }
  },
  addBody$1: function(body) {
    var t1, t3;
    body.set$islandIndex(this.bodyCount);
    t1 = this.bodies;
    t3 = this.bodyCount;
    if (typeof t3 !== "number")
      return this.addBody$1$bailout(2, body, t1, t3);
    this.bodyCount = t3 + 1;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.addBody$1$bailout(1, body, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = body;
  },
  addBody$1$bailout: function(state0, body, t1, t3) {
    switch (state0) {
      case 0:
        body.set$islandIndex(this.bodyCount);
        t1 = this.bodies;
      case 1:
        state0 = 0;
        t3 = this.bodyCount;
      case 2:
        state0 = 0;
        this.bodyCount = $.$$add(t3, 1);
        $.$$indexSet(t1, t3, body);
    }
  },
  addContact$1: function(contact) {
    var t1, t3;
    t1 = this.contacts;
    t3 = this.contactCount;
    if (typeof t3 !== "number")
      return this.addContact$1$bailout(2, contact, t1, t3);
    this.contactCount = t3 + 1;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.addContact$1$bailout(1, contact, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = contact;
  },
  addContact$1$bailout: function(state0, contact, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.contacts;
      case 1:
        state0 = 0;
        t3 = this.contactCount;
      case 2:
        state0 = 0;
        this.contactCount = $.$$add(t3, 1);
        $.$$indexSet(t1, t3, contact);
    }
  },
  addJoint$1: function(joint) {
    var t1, t3;
    t1 = this.joints;
    t3 = this.jointCount;
    if (typeof t3 !== "number")
      return this.addJoint$1$bailout(2, joint, t1, t3);
    this.jointCount = t3 + 1;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior)
      return this.addJoint$1$bailout(1, joint, t1);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = joint;
  },
  addJoint$1$bailout: function(state0, joint, t1, t3) {
    switch (state0) {
      case 0:
        t1 = this.joints;
      case 1:
        state0 = 0;
        t3 = this.jointCount;
      case 2:
        state0 = 0;
        this.jointCount = $.$$add(t3, 1);
        $.$$indexSet(t1, t3, joint);
    }
  },
  report$1: function(constraints) {
    var i, c, cc, j, t1, t2;
    if (typeof constraints !== "string" && (typeof constraints !== "object" || constraints === null || constraints.constructor !== Array && !constraints.$isJavaScriptIndexingBehavior))
      return this.report$1$bailout(1, constraints);
    if (this.listener == null)
      return;
    for (i = 0; $.CONSTANT5.$lt(i, this.contactCount); ++i) {
      c = $.$$index(this.contacts, i);
      if (i >= constraints.length)
        throw $.ioore(i);
      cc = constraints[i];
      for (j = 0; t1 = $.CONSTANT5.$lt(j, cc.get$pointCount()), t2 = this.impulse, t1; ++j) {
        t1 = t2.normalImpulses;
        t2 = $.$$index(cc.get$points(), j).get$normalImpulse();
        if (j >= t1.length)
          throw $.ioore(j);
        t1[j] = t2;
        t2 = this.impulse.tangentImpulses;
        t1 = $.$$index(cc.get$points(), j).get$tangentImpulse();
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j] = t1;
      }
      this.listener.postSolve$2(c, t2);
    }
  },
  report$1$bailout: function(state0, constraints) {
    var t1, i, c, cc, j, t2, t3;
    if (this.listener == null)
      return;
    for (t1 = $.getInterceptor$JSArrayJSString(constraints), i = 0; $.CONSTANT5.$lt(i, this.contactCount); ++i) {
      c = $.$$index(this.contacts, i);
      cc = t1.$index(constraints, i);
      for (j = 0; t2 = $.CONSTANT5.$lt(j, cc.get$pointCount()), t3 = this.impulse, t2; ++j) {
        t2 = t3.normalImpulses;
        t3 = $.$$index(cc.get$points(), j).get$normalImpulse();
        if (j >= t2.length)
          throw $.ioore(j);
        t2[j] = t3;
        t3 = this.impulse.tangentImpulses;
        t2 = $.$$index(cc.get$points(), j).get$tangentImpulse();
        if (j >= t3.length)
          throw $.ioore(j);
        t3[j] = t2;
      }
      this.listener.postSolve$2(c, t3);
    }
  }
};

$$.Position = {"": "Object;x=,a=",
  Position$0: function() {
    this.x = $.Vector$(0, 0);
    this.a = 0;
  }
};

$$.Velocity = {"": "Object;v>,a=",
  Velocity$0: function() {
    this.v = $.Vector$(0, 0);
    this.a = 0;
  }
};

$$.TimeStep = {"": "Object;dt=,inv_dt=,dtRatio=,velocityIterations=,positionIterations=,warmStarting="};

$$.World = {"": "Object;_flags,_contactManager,_bodyList,_jointList,_bodyCount,_jointCount,_gravity,_allowSleep,_debugDraw,_fixtureDestructionListener,_jointDestructionListener,_pool,_inverseTimestep,_warmStarting,_continuousPhysics,_contactStacks,center>,axis,timestep,cA,cB,wqwrapper,toiInput,toiOutput,backup,toiSolver,contacts,island,stack",
  _addType$3: function(creatorStack, type1, type2) {
    var register, t1, register2;
    register = $.ContactRegister$();
    register.creator = creatorStack;
    register.primary = true;
    t1 = this._contactStacks;
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    $.$$indexSet(t1[type1], type2, register);
    if (type1 !== type2) {
      register2 = $.ContactRegister$();
      register2.creator = creatorStack;
      register2.primary = false;
      if (type2 < 0 || type2 >= t1.length)
        throw $.ioore(type2);
      $.$$indexSet(t1[type2], type1, register2);
    }
  },
  _initializeRegisters$0: function() {
    var t1 = this._pool;
    this._addType$3(t1.getCircleContactStack$0(), 0, 0);
    this._addType$3(t1.getPolyCircleContactStack$0(), 1, 0);
    this._addType$3(t1.getPolyContactStack$0(), 1, 1);
  },
  popContact$2: function(fixtureA, fixtureB) {
    var type1, type2, t1, reg, creator, c;
    type1 = fixtureA.get$type();
    type2 = fixtureB.get$type();
    t1 = this._contactStacks;
    if (type1 !== (type1 | 0))
      throw $.iae(type1);
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    reg = $.$$index(t1[type1], type2);
    creator = reg.get$creator();
    if (!(creator == null)) {
      if ($.isEmpty(creator) === true)
        creator = this._getFreshContactStack$2(type1, type2);
      if (reg.get$primary() === true) {
        c = creator.removeFirst$0();
        c.init$2(fixtureA, fixtureB);
        return c;
      } else {
        c = creator.removeFirst$0();
        c.init$2(fixtureB, fixtureA);
        return c;
      }
    } else
      return;
  },
  _getFreshContactStack$2: function(type1, type2) {
    var t1, t2;
    if (type1 === 0 && $.$$eq(type2, 0) === true)
      return this._pool.getCircleContactStack$0();
    else {
      t1 = type1 === 1 && $.$$eq(type2, 1) === true;
      t2 = this._pool;
      if (t1)
        return t2.getPolyContactStack$0();
      else
        return t2.getPolyCircleContactStack$0();
    }
  },
  pushContact$1: function(contact) {
    var type1, type2, t1;
    if ($.$$gt(contact.get$manifold().get$pointCount(), 0) === true) {
      contact.get$fixtureA().get$body().set$awake(true);
      contact.get$fixtureB().get$body().set$awake(true);
    }
    type1 = contact.get$fixtureA().get$type();
    type2 = contact.get$fixtureB().get$type();
    t1 = this._contactStacks;
    if (type1 !== (type1 | 0))
      throw $.iae(type1);
    if (type1 < 0 || type1 >= t1.length)
      throw $.ioore(type1);
    $.$$index(t1[type1], type2).get$creator().addFirst$1(contact);
  },
  get$contactListener: function() {
    return this._contactManager.get$contactListener();
  },
  createBody$1: function(def) {
    var b, t1;
    if (this.get$locked() === true)
      return;
    b = $.Body$(def, this);
    b.prev = null;
    b.next = this._bodyList;
    t1 = this._bodyList;
    if (!(t1 == null))
      t1.set$prev(b);
    this._bodyList = b;
    this._bodyCount = this._bodyCount + 1;
    return b;
  },
  createJoint$1: function(def) {
    var j, t1, bodyA, bodyB, edge;
    if (this.get$locked() === true)
      return;
    j = $.Joint_Joint$create(this, def);
    j.set$_prev(null);
    j.set$_liblib2$_next(this._jointList);
    t1 = this._jointList;
    if (!(t1 == null))
      t1.set$_prev(j);
    this._jointList = j;
    this._jointCount = this._jointCount + 1;
    j.get$edgeA().set$joint(j);
    t1 = j.get$bodyB();
    j.get$edgeA().set$other(t1);
    j.get$edgeA().set$prev(null);
    t1 = j.get$bodyA().get$jointList();
    j.get$edgeA().set$next(t1);
    if (!(j.get$bodyA().get$jointList() == null)) {
      t1 = j.get$edgeA();
      j.get$bodyA().get$jointList().set$prev(t1);
    }
    t1 = j.get$edgeA();
    j.get$bodyA().set$jointList(t1);
    j.get$edgeB().set$joint(j);
    t1 = j.get$bodyA();
    j.get$edgeB().set$other(t1);
    j.get$edgeB().set$prev(null);
    t1 = j.get$bodyB().get$jointList();
    j.get$edgeB().set$next(t1);
    if (!(j.get$bodyB().get$jointList() == null)) {
      t1 = j.get$edgeB();
      j.get$bodyB().get$jointList().set$prev(t1);
    }
    t1 = j.get$edgeB();
    j.get$bodyB().set$jointList(t1);
    bodyA = def.get$bodyA();
    bodyB = def.get$bodyB();
    t1 = def.get$collideConnected();
    if (typeof t1 !== "boolean")
      return this.createJoint$1$bailout(1, bodyA, j, bodyB, t1);
    if (!t1) {
      edge = bodyB.get$contactList();
      for (; !(edge == null);) {
        if ($.$$eq(edge.get$other(), bodyA) === true)
          edge.get$contact().flagForFiltering$0();
        edge = edge.get$next();
      }
    }
    return j;
  },
  createJoint$1$bailout: function(state0, bodyA, j, bodyB, t1) {
    var edge;
    if ($.$$eq(t1, false) === true) {
      edge = bodyB.get$contactList();
      for (; !(edge == null);) {
        if ($.$$eq(edge.get$other(), bodyA) === true)
          edge.get$contact().flagForFiltering$0();
        edge = edge.get$next();
      }
    }
    return j;
  },
  step$3: function(dt, velocityIterations, positionIterations) {
    var t1, t3;
    if (typeof dt !== "number")
      return this.step$3$bailout(1, dt, velocityIterations, positionIterations);
    t1 = this._flags;
    if (t1 !== (t1 | 0))
      return this.step$3$bailout(2, dt, velocityIterations, positionIterations, t1);
    if ((t1 & 1) === 1) {
      this._contactManager.findNewContacts$0();
      t1 = this._flags;
      if (t1 !== (t1 | 0))
        return this.step$3$bailout(3, dt, velocityIterations, positionIterations, t1);
      this._flags = (t1 & 4294967294) >>> 0;
    }
    t1 = this._flags;
    if (t1 !== (t1 | 0))
      return this.step$3$bailout(4, dt, velocityIterations, positionIterations, t1);
    this._flags = (t1 | 2) >>> 0;
    t3 = this.timestep;
    t3.dt = dt;
    t3.velocityIterations = velocityIterations;
    t3.positionIterations = positionIterations;
    if (dt > 0)
      t3.inv_dt = 1 / dt;
    else
      t3.inv_dt = 0;
    t1 = this._inverseTimestep;
    if (typeof t1 !== "number")
      return this.step$3$bailout(6, dt, 0, 0, t1, t3);
    t3.dtRatio = t1 * dt;
    t3.warmStarting = this._warmStarting;
    this._contactManager.collide$0();
    t1 = t3.dt;
    if (typeof t1 !== "number")
      return this.step$3$bailout(7, 0, 0, 0, t1, t3);
    if (t1 > 0)
      this.solve$1(t3);
    if (this._continuousPhysics) {
      t1 = t3.dt;
      if (typeof t1 !== "number")
        return this.step$3$bailout(8, 0, 0, 0, t1, t3);
      t1 = t1 > 0;
    } else
      t1 = false;
    if (t1)
      this.solveTimeOfImpact$0();
    t1 = t3.dt;
    if (typeof t1 !== "number")
      return this.step$3$bailout(9, 0, 0, 0, t1, t3);
    if (t1 > 0)
      this._inverseTimestep = t3.inv_dt;
    t1 = this._flags;
    if (t1 !== (t1 | 0))
      return this.step$3$bailout(10, 0, 0, 0, t1);
    if ((t1 & 4) === 4)
      this.clearForces$0();
    t1 = this._flags;
    if (t1 !== (t1 | 0))
      return this.step$3$bailout(11, 0, 0, 0, t1);
    this._flags = (t1 & 4294967293) >>> 0;
  },
  step$3$bailout: function(state0, dt, velocityIterations, positionIterations, t1, t3) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._flags;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$eq($.$$and(t1, 1), 1) === true)
          switch (state0) {
            case 0:
              this._contactManager.findNewContacts$0();
              t1 = this._flags;
            case 3:
              state0 = 0;
              this._flags = $.$$and(t1, 4294967294);
          }
        t1 = this._flags;
      case 4:
        state0 = 0;
        this._flags = $.$$or(t1, 2);
        t3 = this.timestep;
        t3.dt = dt;
        t3.velocityIterations = velocityIterations;
        t3.positionIterations = positionIterations;
      case 5:
        if (state0 === 5 || state0 === 0 && $.$$gt(dt, 0) === true)
          switch (state0) {
            case 0:
              if (typeof dt !== "number")
                throw $.iae(dt);
              t1 = 1 / dt;
            case 5:
              state0 = 0;
              t3.inv_dt = t1;
          }
        else
          t3.inv_dt = 0;
        t1 = this._inverseTimestep;
      case 6:
        state0 = 0;
        t3.dtRatio = $.$$mul(t1, dt);
        t3.warmStarting = this._warmStarting;
        this._contactManager.collide$0();
        t1 = t3.dt;
      case 7:
        state0 = 0;
        if ($.$$gt(t1, 0) === true)
          this.solve$1(t3);
      case 8:
        if (state0 === 8 || state0 === 0 && this._continuousPhysics)
          switch (state0) {
            case 0:
              t1 = t3.dt;
            case 8:
              state0 = 0;
              t4 = $.$$gt(t1, 0) === true;
              t1 = t4;
          }
        else
          t1 = false;
        if (t1)
          this.solveTimeOfImpact$0();
        t1 = t3.dt;
      case 9:
        state0 = 0;
        if ($.$$gt(t1, 0) === true)
          this._inverseTimestep = t3.inv_dt;
        t1 = this._flags;
      case 10:
        state0 = 0;
        if ($.$$eq($.$$and(t1, 4), 4) === true)
          this.clearForces$0();
        t1 = this._flags;
      case 11:
        var t4;
        state0 = 0;
        this._flags = $.$$and(t1, 4294967293);
    }
  },
  clearForces$0: function() {
    var body;
    for (var body = this._bodyList; !(body == null); body = body.get$next()) {
      body.get$_force().setZero$0();
      body.set$_torque(0);
    }
  },
  get$contactList: function() {
    return this._contactManager.get$contactList();
  },
  get$contactCount: function() {
    return this._contactManager.get$contactCount();
  },
  get$locked: function() {
    return $.$$eq($.$$and(this._flags, 2), 2);
  },
  get$jointList: function() {
    return this._jointList;
  },
  solve$1: function(timeStep) {
    var t1, b, c, j, stackSize, seed, t2, t3, t4, stackCount, ce, contact, sensorA, sensorB, other, stackCount0, je, i;
    t1 = this.island;
    t1.init$4(this._bodyCount, this._contactManager.get$contactCount(), this._jointCount, this._contactManager.get$contactListener());
    for (b = this._bodyList; !(b == null); b = b.get$next())
      b.set$flags($.$$and(b.get$flags(), 4294967294));
    for (c = this._contactManager.get$contactList(); !(c == null); c = c.get$next())
      c.set$flags($.$$and(c.get$flags(), 4294967294));
    for (j = this.get$jointList(); !(j == null); j = j.get$_liblib2$_next())
      j.set$islandFlag(false);
    stackSize = this._bodyCount;
    if (this.stack.length < stackSize)
      this.stack = $.List_List(stackSize);
    for (seed = this._bodyList, t2 = this._gravity, t3 = this._allowSleep; !(seed == null); seed = seed.get$next()) {
      if ($.$$eq($.$$and(seed.get$flags(), 1), 1) === true)
        continue;
      if ($.$$eq(seed.get$awake(), false) === true || $.$$eq(seed.get$active(), false) === true)
        continue;
      if ($.$$eq(seed.get$type(), 0) === true)
        continue;
      t1.clear$0();
      t4 = this.stack;
      if (0 >= t4.length)
        throw $.ioore(0);
      t4[0] = seed;
      seed.set$flags($.$$or(seed.get$flags(), 1));
      for (stackCount = 1; stackCount > 0;) {
        t4 = this.stack;
        --stackCount;
        if (stackCount >= t4.length)
          throw $.ioore(stackCount);
        b = t4[stackCount];
        t1.addBody$1(b);
        b.set$awake(true);
        if ($.$$eq(b.get$type(), 0) === true)
          continue;
        for (ce = b.get$contactList(); !(ce == null); ce = ce.get$next()) {
          contact = ce.get$contact();
          if ($.$$eq($.$$and(contact.get$flags(), 1), 1) === true)
            continue;
          if ($.$$eq(contact.get$enabled(), false) === true || $.$$eq(contact.get$touching(), false) === true)
            continue;
          sensorA = contact.get$fixtureA().get$isSensor();
          sensorB = contact.get$fixtureB().get$isSensor();
          if (sensorA === true || sensorB === true)
            continue;
          t1.addContact$1(contact);
          contact.set$flags($.$$or(contact.get$flags(), 1));
          other = ce.get$other();
          if ($.$$eq($.$$and(other.get$flags(), 1), 1) === true)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$$or(other.get$flags(), 1));
          stackCount = stackCount0;
        }
        for (je = b.get$jointList(); !(je == null); je = je.get$next()) {
          if ($.$$eq(je.get$joint().get$islandFlag(), true) === true)
            continue;
          other = je.get$other();
          if ($.$$eq(other.get$active(), false) === true)
            continue;
          t1.addJoint$1(je.get$joint());
          je.get$joint().set$islandFlag(true);
          if ($.$$eq($.$$and(other.get$flags(), 1), 1) === true)
            continue;
          t4 = this.stack;
          stackCount0 = stackCount + 1;
          if (stackCount >= t4.length)
            throw $.ioore(stackCount);
          t4[stackCount] = other;
          other.set$flags($.$$or(other.get$flags(), 1));
          stackCount = stackCount0;
        }
      }
      t1.solve$3(timeStep, t2, t3);
      for (i = 0; $.CONSTANT5.$lt(i, t1.bodyCount); ++i) {
        b = $.$$index(t1.bodies, i);
        if ($.$$eq(b.get$type(), 0) === true)
          b.set$flags($.$$and(b.get$flags(), 4294967294));
      }
    }
    for (b = this._bodyList; !(b == null); b = b.get$next()) {
      if ($.$$eq($.$$and(b.get$flags(), 1), 0) === true)
        continue;
      if ($.$$eq(b.get$type(), 0) === true)
        continue;
      b.synchronizeFixtures$0();
    }
    this._contactManager.findNewContacts$0();
  },
  solveTimeOfImpact$0: function() {
    var c, body, t1, t2;
    for (c = this._contactManager.get$contactList(); !(c == null); c = c.get$next()) {
      c.set$flags($.$$or(c.get$flags(), 4));
      c.set$toiCount(0);
    }
    for (body = this._bodyList; !(body == null); body = body.get$next()) {
      t1 = $.$$eq($.$$and(body.get$flags(), 1), 0) === true || $.$$eq(body.get$type(), 1) === true || $.$$eq(body.get$type(), 0) === true;
      t2 = body.get$flags();
      if (t1)
        body.set$flags($.$$or(t2, 64));
      else
        body.set$flags($.$$and(t2, 4294967231));
    }
    for (body = this._bodyList; !(body == null); body = body.get$next()) {
      if ($.$$eq($.$$and(body.get$flags(), 64), 64) === true)
        continue;
      if ($.$$eq(body.get$bullet(), true) === true)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$$or(body.get$flags(), 64));
    }
    for (body = this._bodyList; !(body == null); body = body.get$next()) {
      if ($.$$eq($.$$and(body.get$flags(), 64), 64) === true)
        continue;
      if ($.$$eq(body.get$bullet(), false) === true)
        continue;
      this.solveTimeOfImpactGivenBody$1(body);
      body.set$flags($.$$or(body.get$flags(), 64));
    }
  },
  solveTimeOfImpactGivenBody$1: function(body) {
    var bullet, t2, t3, t4, t5, t6, t7, t8, toiContact, toi, toiOther, iter, ce, found, count, other, type, t1, t10, contact, fixtureA, fixtureB, bodyA, bodyB, i;
    bullet = body.get$bullet();
    if (typeof bullet !== "boolean")
      return this.solveTimeOfImpactGivenBody$1$bailout(1, body, bullet);
    t2 = this.toiOutput;
    t3 = this.toiInput;
    t4 = t3.proxyA;
    t5 = t3.proxyB;
    t6 = t3.sweepA;
    t7 = t3.sweepB;
    t8 = this._pool;
    toiContact = null;
    toi = 1;
    toiOther = null;
    iter = 0;
    do {
      for (ce = body.get$contactList(), found = false, count = 0; !(ce == null); ce = ce.get$next()) {
        if ($.$$eq(ce.get$contact(), toiContact) === true)
          continue;
        other = ce.get$other();
        type = other.get$type();
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(2, body, bullet, other, type, t3, t4, $.CONSTANT6, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2);
        if (bullet) {
          t1 = other.get$flags();
          if (t1 !== (t1 | 0))
            return this.solveTimeOfImpactGivenBody$1$bailout(3, body, bullet, other, type, t3, t4, $.CONSTANT6, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1);
          if ((t1 & 64) === 0)
            continue;
          if (!(type === 0)) {
            t1 = ce.get$contact().get$flags();
            if (t1 !== (t1 | 0))
              return this.solveTimeOfImpactGivenBody$1$bailout(4, body, bullet, other, 0, t3, t4, $.CONSTANT6, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1);
            t10 = (t1 & 16) !== 0;
            t1 = t10;
          } else
            t1 = false;
          if (t1)
            continue;
        } else if (type === 2)
          continue;
        contact = ce.get$contact();
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(5, body, bullet, other, 0, t3, t4, $.CONSTANT6, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
        if (!t1)
          continue;
        t1 = contact.get$toiCount();
        if (typeof t1 !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(6, body, bullet, other, 0, t3, t4, $.CONSTANT6, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
        if (t1 > 10)
          continue;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          continue;
        bodyA = fixtureA.get$body();
        bodyB = fixtureB.get$body();
        t4.setFromShape$1(fixtureA.get$shape());
        t5.setFromShape$1(fixtureB.get$shape());
        t6.setFrom$1(bodyA.get$sweep());
        t7.setFrom$1(bodyB.get$sweep());
        t3.tMax = toi;
        t8.timeOfImpact.timeOfImpact$2(t2, t3);
        t1 = t2.state;
        if (typeof t1 !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(7, body, bullet, other, 0, t3, t4, $.CONSTANT6, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
        if (t1 === 3) {
          t1 = t2.t;
          if (typeof t1 !== "number")
            return this.solveTimeOfImpactGivenBody$1$bailout(8, body, bullet, other, 0, t3, t4, $.CONSTANT6, t5, iter, t6, t7, toiContact, toi, toiOther, found, count, t8, ce, t2, t1, contact);
          t1 = t1 < toi;
        } else
          t1 = false;
        if (t1) {
          toi = t2.t;
          if (toi !== (toi | 0))
            return this.solveTimeOfImpactGivenBody$1$bailout(9, body, bullet, other, 0, t3, t4, $.CONSTANT6, t5, iter, t6, t7, 0, toi, 0, 0, count, t8, ce, t2, 0, contact);
          toiOther = other;
          toiContact = contact;
          found = true;
        }
        ++count;
      }
      ++iter;
    } while (found && count > 1 && iter < 50);
    if (toiContact == null) {
      body.advance$1(1);
      return;
    }
    t1 = this.backup;
    t1.setFrom$1(body.get$sweep());
    body.advance$1(toi);
    toiContact.update$1(this._contactManager.get$contactListener());
    t2 = toiContact.get$enabled();
    if (typeof t2 !== "boolean")
      return this.solveTimeOfImpactGivenBody$1$bailout(10, body, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, toiContact, 0, toiOther, 0, 0, 0, 0, 0, t1);
    if (!t2) {
      body.get$sweep().setFrom$1(t1);
      this.solveTimeOfImpactGivenBody$1(body);
    }
    t1 = toiContact.get$toiCount();
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(11, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, 0, 0, 0, 0, t1);
    toiContact.set$toiCount(t1 + 1);
    t1 = this.contacts;
    if (t1.length < 32)
      this.contacts = $.List_List(32);
    ce = body.get$contactList();
    count = 0;
    while (true) {
      if (!(!(ce == null) && count < 32))
        break;
      c$0: {
        type = ce.get$other().get$type();
        if (typeof type !== "number")
          return this.solveTimeOfImpactGivenBody$1$bailout(12, body, 0, 0, type, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce);
        if (type === 2)
          break c$0;
        contact = ce.get$contact();
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(13, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, t1, contact);
        if (!t1)
          break c$0;
        fixtureA = contact.get$fixtureA();
        fixtureB = contact.get$fixtureB();
        if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
          break c$0;
        if ($.$$eq(contact, toiContact) !== true)
          contact.update$1(this._contactManager.get$contactListener());
        t1 = contact.get$enabled();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(14, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, t1, contact);
        if (!t1)
          break c$0;
        t1 = contact.get$touching();
        if (typeof t1 !== "boolean")
          return this.solveTimeOfImpactGivenBody$1$bailout(15, body, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, toiOther, 0, count, 0, ce, 0, t1, contact);
        if (!t1)
          break c$0;
        t1 = this.contacts;
        if (count >= t1.length)
          throw $.ioore(count);
        t1[count] = contact;
        ++count;
      }
      ce = ce.get$next();
    }
    t1 = this.toiSolver;
    t1.initialize$3(this.contacts, count, body);
    for (i = 0; i < 20; ++i)
      if (t1.solve$1(0.75) === true)
        break;
    t1 = toiOther.get$type();
    if (typeof t1 !== "number")
      return this.solveTimeOfImpactGivenBody$1$bailout(16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, 0, 0, 0, 0, 0, 0, t1);
    if (!(t1 === 0)) {
      t1 = toiContact.get$flags();
      if (t1 !== (t1 | 0))
        return this.solveTimeOfImpactGivenBody$1$bailout(17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, toiContact, 0, 0, 0, 0, 0, 0, 0, t1);
      toiContact.set$flags((t1 | 16) >>> 0);
    }
  },
  solveTimeOfImpactGivenBody$1$bailout: function(state0, body, bullet, other, type, t4, t5, t2, t6, iter, t7, t8, toiContact, toi, toiOther, found, count, t9, ce, t3, t1, contact) {
    switch (state0) {
      case 0:
        bullet = body.get$bullet();
      case 1:
        state0 = 0;
        t2 = $.getInterceptor(bullet);
        t3 = this.toiOutput;
        t4 = this.toiInput;
        t5 = t4.proxyA;
        t6 = t4.proxyB;
        t7 = t4.sweepA;
        t8 = t4.sweepB;
        t9 = this._pool;
        toiContact = null;
        toi = 1;
        toiOther = null;
        iter = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                ce = body.get$contactList();
                found = false;
                count = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        if (!!(ce == null))
                          break L1;
                      default:
                        c$1: {
                          switch (state0) {
                            case 0:
                              if ($.$$eq(ce.get$contact(), toiContact) === true)
                                break c$1;
                              other = ce.get$other();
                              type = other.get$type();
                            case 2:
                              state0 = 0;
                            default:
                              if (state0 === 4 || state0 === 3 || state0 === 0 && t2.$eq(bullet, true) === true)
                                switch (state0) {
                                  case 0:
                                    t1 = other.get$flags();
                                  case 3:
                                    state0 = 0;
                                    if ($.$$eq($.$$and(t1, 64), 0) === true)
                                      break c$1;
                                  case 4:
                                    if (state0 === 4 || state0 === 0 && $.$$eq(type, 0) !== true)
                                      switch (state0) {
                                        case 0:
                                          t1 = ce.get$contact().get$flags();
                                        case 4:
                                          state0 = 0;
                                          t11 = $.$$eq($.$$and(t1, 16), 0) !== true;
                                          t1 = t11;
                                      }
                                    else
                                      t1 = false;
                                    if (t1)
                                      break c$1;
                                }
                              else if ($.$$eq(type, 2) === true)
                                break c$1;
                              contact = ce.get$contact();
                              t1 = contact.get$enabled();
                            case 5:
                              state0 = 0;
                              if ($.$$eq(t1, false) === true)
                                break c$1;
                              t1 = contact.get$toiCount();
                            case 6:
                              state0 = 0;
                              if ($.$$gt(t1, 10) === true)
                                break c$1;
                              fixtureA = contact.get$fixtureA();
                              fixtureB = contact.get$fixtureB();
                              if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                                break c$1;
                              bodyA = fixtureA.get$body();
                              bodyB = fixtureB.get$body();
                              t5.setFromShape$1(fixtureA.get$shape());
                              t6.setFromShape$1(fixtureB.get$shape());
                              t7.setFrom$1(bodyA.get$sweep());
                              t8.setFrom$1(bodyB.get$sweep());
                              t4.tMax = toi;
                              t9.timeOfImpact.timeOfImpact$2(t3, t4);
                              t1 = t3.state;
                            case 7:
                              state0 = 0;
                            case 8:
                              if (state0 === 8 || state0 === 0 && $.$$eq(t1, 3) === true)
                                switch (state0) {
                                  case 0:
                                    t1 = t3.t;
                                  case 8:
                                    state0 = 0;
                                    t11 = $.$$lt(t1, toi) === true;
                                    t1 = t11;
                                }
                              else
                                t1 = false;
                            case 9:
                              if (state0 === 9 || state0 === 0 && t1)
                                switch (state0) {
                                  case 0:
                                    toi = t3.t;
                                  case 9:
                                    state0 = 0;
                                    toiOther = other;
                                    toiContact = contact;
                                    found = true;
                                }
                              ++count;
                          }
                        }
                        ce = ce.get$next();
                    }
                ++iter;
                if (!(found && count > 1 && iter < 50))
                  break L0;
            }
        if (toiContact == null) {
          body.advance$1(1);
          return;
        }
        t1 = this.backup;
        t1.setFrom$1(body.get$sweep());
        body.advance$1(toi);
        toiContact.update$1(this._contactManager.get$contactListener());
        t2 = toiContact.get$enabled();
      case 10:
        state0 = 0;
        if ($.$$eq(t2, false) === true) {
          body.get$sweep().setFrom$1(t1);
          this.solveTimeOfImpactGivenBody$1(body);
        }
        t1 = toiContact.get$toiCount();
      case 11:
        state0 = 0;
        toiContact.set$toiCount($.$$add(t1, 1));
        t1 = this.contacts;
        if (t1.length < 32)
          this.contacts = $.List_List(32);
        ce = body.get$contactList();
        count = 0;
      case 12:
      case 13:
      case 14:
      case 15:
        L2:
          while (true)
            switch (state0) {
              case 0:
                if (!(!(ce == null) && count < 32))
                  break L2;
              default:
                c$0: {
                  switch (state0) {
                    case 0:
                      type = ce.get$other().get$type();
                    case 12:
                      state0 = 0;
                      if ($.$$eq(type, 2) === true)
                        break c$0;
                      contact = ce.get$contact();
                      t1 = contact.get$enabled();
                    case 13:
                      state0 = 0;
                      if ($.$$eq(t1, false) === true)
                        break c$0;
                      fixtureA = contact.get$fixtureA();
                      fixtureB = contact.get$fixtureB();
                      if (fixtureA.get$isSensor() === true || fixtureB.get$isSensor() === true)
                        break c$0;
                      if ($.$$eq(contact, toiContact) !== true)
                        contact.update$1(this._contactManager.get$contactListener());
                      t1 = contact.get$enabled();
                    case 14:
                      state0 = 0;
                      if ($.$$eq(t1, false) === true)
                        break c$0;
                      t1 = contact.get$touching();
                    case 15:
                      state0 = 0;
                      if ($.$$eq(t1, false) === true)
                        break c$0;
                      t1 = this.contacts;
                      if (count >= t1.length)
                        throw $.ioore(count);
                      t1[count] = contact;
                      ++count;
                  }
                }
                ce = ce.get$next();
            }
        t1 = this.toiSolver;
        t1.initialize$3(this.contacts, count, body);
        for (i = 0; i < 20; ++i)
          if (t1.solve$1(0.75) === true)
            break;
        t1 = toiOther.get$type();
      case 16:
        state0 = 0;
      case 17:
        var t11, fixtureA, fixtureB, bodyA, bodyB, i;
        if (state0 === 17 || state0 === 0 && $.$$eq(t1, 0) !== true)
          switch (state0) {
            case 0:
              t1 = toiContact.get$flags();
            case 17:
              state0 = 0;
              toiContact.set$flags($.$$or(t1, 16));
          }
    }
  },
  World$3: function(gravity, doSleep, argPool) {
    var t1, i, t2;
    this._contactManager = $.ContactManager$(this);
    for (t1 = this._contactStacks, i = 0; i < t1.length; ++i) {
      t2 = $.List_List(2);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
    this._initializeRegisters$0();
  }
};

$$.WorldQueryWrapper = {"": "Object;broadPhase>,callback"};

$$.Contact = {"": "Object;flags=,prev=,next=,edge1>,edge2>,fixtureA>,fixtureB>,manifold=,toiCount=",
  init$2: function(fixA, fixB) {
    var t1;
    this.flags = 0;
    this.fixtureA = fixA;
    this.fixtureB = fixB;
    this.manifold.set$pointCount(0);
    this.prev = null;
    this.next = null;
    t1 = this.edge1;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    t1 = this.edge2;
    t1.contact = null;
    t1.prev = null;
    t1.next = null;
    t1.other = null;
    this.toiCount = 0;
  },
  get$touching: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$touching$bailout(1, t1);
    return (t1 & 2) === 2;
  },
  get$touching$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 2), 2);
  },
  get$enabled: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.get$enabled$bailout(1, t1);
    return (t1 & 4) === 4;
  },
  get$enabled$bailout: function(state0, t1) {
    return $.$$eq($.$$and(t1, 4), 4);
  },
  flagForFiltering$0: function() {
    var t1 = this.flags;
    if (t1 !== (t1 | 0))
      return this.flagForFiltering$0$bailout(1, t1);
    this.flags = (t1 | 8) >>> 0;
  },
  flagForFiltering$0$bailout: function(state0, t1) {
    this.flags = $.$$or(t1, 8);
  },
  update$1: function(listener) {
    var t1, t2, t4, wasTouching, t6, sensorA, t7, sensorB, sensor, bodyA, bodyB, xfA, xfB, shapeA, shapeB, touching, i, t3, mp2, id2, j, mp1;
    t1 = this._oldManifold;
    t1.setFrom$1(this.manifold);
    t2 = this.flags;
    if (t2 !== (t2 | 0))
      return this.update$1$bailout(1, listener, t1, t2);
    this.flags = (t2 | 4) >>> 0;
    t4 = this.flags;
    if (t4 !== (t4 | 0))
      return this.update$1$bailout(2, listener, t1, 0, t4);
    wasTouching = (t4 & 2) === 2;
    t6 = this.fixtureA;
    sensorA = t6.get$isSensor();
    t7 = this.fixtureB;
    sensorB = t7.get$isSensor();
    sensor = sensorA === true || sensorB === true;
    bodyA = t6.get$body();
    bodyB = t7.get$body();
    xfA = bodyA.get$originTransform();
    xfB = bodyB.get$originTransform();
    if (sensor) {
      shapeA = t6.get$shape();
      shapeB = t7.get$shape();
      touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
      if (typeof touching !== "boolean")
        return this.update$1$bailout(3, listener, t1, 0, 0, touching, wasTouching, sensor);
      this.manifold.set$pointCount(0);
    } else {
      this.evaluate$3(this.manifold, xfA, xfB);
      t2 = this.manifold.get$pointCount();
      if (typeof t2 !== "number")
        return this.update$1$bailout(4, listener, t1, t2, 0, 0, wasTouching, sensor, bodyA, bodyB);
      touching = t2 > 0;
      t2 = t1.points;
      i = 0;
      while (true) {
        t3 = this.manifold;
        t4 = t3.get$pointCount();
        if (typeof t4 !== "number")
          return this.update$1$bailout(5, listener, t1, t2, 0, touching, wasTouching, sensor, bodyA, bodyB, i, t4);
        if (!(i < t4))
          break;
        t3 = t3.get$points();
        if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
          return this.update$1$bailout(6, listener, t1, t2, 0, touching, wasTouching, sensor, bodyA, bodyB, i, t3);
        if (i >= t3.length)
          throw $.ioore(i);
        mp2 = t3[i];
        mp2.set$normalImpulse(0);
        mp2.set$tangentImpulse(0);
        id2 = mp2.get$id();
        j = 0;
        while (true) {
          t3 = t1.pointCount;
          if (typeof t3 !== "number")
            return this.update$1$bailout(7, listener, t1, t2, 0, touching, wasTouching, sensor, bodyA, bodyB, i, t3, j, id2, mp2);
          if (!(j < t3))
            break;
          if (j >= t2.length)
            throw $.ioore(j);
          mp1 = t2[j];
          if (mp1.get$id().isEqual$1(id2) === true) {
            mp2.set$normalImpulse(mp1.get$normalImpulse());
            mp2.set$tangentImpulse(mp1.get$tangentImpulse());
            break;
          }
          ++j;
        }
        ++i;
      }
      if (!(touching === wasTouching)) {
        bodyA.set$awake(true);
        bodyB.set$awake(true);
      }
    }
    t2 = this.flags;
    if (t2 !== (t2 | 0))
      return this.update$1$bailout(8, listener, t1, touching, 0, touching, wasTouching, sensor, 0, 0, 0, t2);
    if (touching)
      this.flags = (t2 | 2) >>> 0;
    else
      this.flags = (t2 & 4294967293) >>> 0;
    if (listener == null)
      return;
    if (!wasTouching && touching)
      listener.beginContact$1(this);
    if (wasTouching && !touching)
      listener.endContact$1(this);
    if (!sensor && touching)
      listener.preSolve$2(this, t1);
  },
  update$1$bailout: function(state0, listener, t1, t2, t4, touching, wasTouching, sensor, bodyA, bodyB, i, t3, j, id2, mp2) {
    switch (state0) {
      case 0:
        t1 = this._oldManifold;
        t1.setFrom$1(this.manifold);
        t2 = this.flags;
      case 1:
        state0 = 0;
        this.flags = $.$$or(t2, 4);
        t4 = this.flags;
      case 2:
        state0 = 0;
        wasTouching = $.$$eq($.$$and(t4, 2), 2);
        t6 = this.fixtureA;
        sensorA = t6.get$isSensor();
        t7 = this.fixtureB;
        sensorB = t7.get$isSensor();
        sensor = sensorA === true || sensorB === true;
        bodyA = t6.get$body();
        bodyB = t7.get$body();
        xfA = bodyA.get$originTransform();
        xfB = bodyB.get$originTransform();
      default:
        if (state0 === 3 || state0 === 0 && sensor)
          switch (state0) {
            case 0:
              shapeA = t6.get$shape();
              shapeB = t7.get$shape();
              touching = this.pool.collision.testOverlap$4(shapeA, shapeB, xfA, xfB);
            case 3:
              state0 = 0;
              this.manifold.set$pointCount(0);
          }
        else
          switch (state0) {
            case 0:
              this.evaluate$3(this.manifold, xfA, xfB);
              t2 = this.manifold.get$pointCount();
            case 4:
              state0 = 0;
              touching = $.$$gt(t2, 0);
              t2 = t1.points;
              i = 0;
            default:
              L0:
                while (true)
                  switch (state0) {
                    case 0:
                      t3 = this.manifold.get$pointCount();
                    case 5:
                      state0 = 0;
                      if (!$.CONSTANT5.$lt(i, t3))
                        break L0;
                      t3 = this.manifold.get$points();
                    case 6:
                      state0 = 0;
                      mp2 = $.$$index(t3, i);
                      mp2.set$normalImpulse(0);
                      mp2.set$tangentImpulse(0);
                      id2 = mp2.get$id();
                      j = 0;
                    case 7:
                      L1:
                        while (true)
                          switch (state0) {
                            case 0:
                              t3 = t1.pointCount;
                            case 7:
                              state0 = 0;
                              if (!$.CONSTANT5.$lt(j, t3))
                                break L1;
                              if (j >= t2.length)
                                throw $.ioore(j);
                              mp1 = t2[j];
                              if (mp1.get$id().isEqual$1(id2) === true) {
                                mp2.set$normalImpulse(mp1.get$normalImpulse());
                                mp2.set$tangentImpulse(mp1.get$tangentImpulse());
                                break L1;
                              }
                              ++j;
                          }
                      ++i;
                  }
              if ($.$$eq(touching, wasTouching) !== true) {
                bodyA.set$awake(true);
                bodyB.set$awake(true);
              }
          }
        t2 = touching === true;
        t3 = this.flags;
      case 8:
        var t6, sensorA, t7, sensorB, xfA, xfB, shapeA, shapeB, mp1;
        state0 = 0;
        if (t2)
          this.flags = $.$$or(t3, 2);
        else
          this.flags = $.$$and(t3, 4294967293);
        if (listener == null)
          return;
        t3 = $.getInterceptor(wasTouching);
        if (t3.$eq(wasTouching, false) === true && $.$$eq(touching, true) === true)
          listener.beginContact$1(this);
        if (t3.$eq(wasTouching, true) === true && $.$$eq(touching, false) === true)
          listener.endContact$1(this);
        if (!sensor && t2)
          listener.preSolve$2(this, t1);
    }
  }
};

$$.ContactConstraint = {"": "Object;points>,localNormal>,localPoint>,normal>,normalMass>,K>,bodyA=,bodyB=,type=,radius=,friction=,restitution=,pointCount=,manifold=",
  setFrom$1: function(cp) {
    var t1, i, t2, t3;
    this.pointCount = cp.get$pointCount();
    this.localNormal.setFrom$1(cp.get$localNormal());
    this.localPoint.setFrom$1(cp.get$localPoint());
    this.normal.setFrom$1(cp.get$normal());
    this.normalMass.setFrom$1(cp.get$normalMass());
    this.K.setFrom$1(cp.get$K());
    this.bodyA = cp.get$bodyA();
    this.bodyB = cp.get$bodyB();
    this.type = cp.get$type();
    this.radius = cp.get$radius();
    this.friction = cp.get$friction();
    this.restitution = cp.get$restitution();
    this.manifold = cp.get$manifold();
    t1 = this.points;
    i = 0;
    while (true) {
      t2 = cp.get$pointCount();
      if (typeof t2 !== "number")
        return this.setFrom$1$bailout(1, cp, t1, i, t2);
      if (!(i < t2))
        break;
      if (i >= t1.length)
        throw $.ioore(i);
      t2 = t1[i];
      t3 = cp.get$points();
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
        return this.setFrom$1$bailout(2, cp, t1, i, t2, t3);
      if (i >= t3.length)
        throw $.ioore(i);
      t2.setFrom$1(t3[i]);
      ++i;
    }
  },
  setFrom$1$bailout: function(state0, cp, t1, i, t2, t3) {
    switch (state0) {
      case 0:
        this.pointCount = cp.get$pointCount();
        this.localNormal.setFrom$1(cp.get$localNormal());
        this.localPoint.setFrom$1(cp.get$localPoint());
        this.normal.setFrom$1(cp.get$normal());
        this.normalMass.setFrom$1(cp.get$normalMass());
        this.K.setFrom$1(cp.get$K());
        this.bodyA = cp.get$bodyA();
        this.bodyB = cp.get$bodyB();
        this.type = cp.get$type();
        this.radius = cp.get$radius();
        this.friction = cp.get$friction();
        this.restitution = cp.get$restitution();
        this.manifold = cp.get$manifold();
        t1 = this.points;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = cp.get$pointCount();
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t2))
                  break L0;
                if (i >= t1.length)
                  throw $.ioore(i);
                t2 = t1[i];
                t3 = cp.get$points();
              case 2:
                state0 = 0;
                t2.setFrom$1($.$$index(t3, i));
                ++i;
            }
    }
  },
  toString$0: function() {
    return "localNormal: \"" + $.S(this.localNormal) + "\", localPoint: \"" + $.S(this.localPoint) + "\" " + "normal: \"" + $.S(this.normal) + "\", radius: \"" + $.S(this.radius) + "\" friction: \"" + $.S(this.friction) + "\" " + "restitution: \"" + $.S(this.restitution) + "\", pointCount: \"" + $.S(this.pointCount) + "\"";
  },
  ContactConstraint$0: function() {
    var t1, i, t2;
    for (t1 = this.points, i = 0; i < 2; ++i) {
      t2 = $.ContactConstraintPoint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.ContactConstraintPoint = {"": "Object;localPoint>,rA>,rB>,normalImpulse=,tangentImpulse=,normalMass=,tangentMass=,velocityBias=",
  setFrom$1: function(cp) {
    this.localPoint.setFrom$1(cp.get$localPoint());
    this.rA.setFrom$1(cp.get$rA());
    this.rB.setFrom$1(cp.get$rB());
    this.normalImpulse = cp.get$normalImpulse();
    this.tangentImpulse = cp.get$tangentImpulse();
    this.normalMass = cp.get$normalMass();
    this.tangentMass = cp.get$tangentMass();
    this.velocityBias = cp.get$velocityBias();
  },
  toString$0: function() {
    return "normal impulse: " + $.S(this.normalImpulse) + ", tangentImpulse: " + $.S(this.tangentImpulse) + ", normalMass: " + $.S(this.normalMass) + ", tangentMass: " + $.S(this.tangentMass) + ", velocityBias: " + $.S(this.velocityBias) + ", localPoint: " + $.S(this.localPoint) + ", rA: " + $.S(this.rA) + ", rB: " + $.S(this.rB);
  }
};

$$.ContactEdge = {"": "Object;other=,contact=,prev=,next="};

$$.CircleContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Expect_equals(0, fA.get$type(), null);
    $.Expect_equals(0, fB.get$type(), null);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collideCircles$5(argManifold, this.fixtureA.get$shape(), xfA, this.fixtureB.get$shape(), xfB);
  }
};

$$.ContactRegister = {"": "Object;creator>,primary>"};

$$.ContactSolver = {"": "Object;constraints>,constraintCount,worldManifold,tangent,temp1,temp2,P,dv,dv1,dv2,x>,d,P1,P2,psolver,rA>,rB>",
  init$3: function(contacts, contactCount, impulseRatio) {
    var old, i, t1, t2, t3, t4, t5, t6, t7, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, friction, restitution, vA, vB, wA, wB, t11, cc, t8, t9, t10, j, cp, ccp, t12, t13, rnA, rnB, kNormal, t14, rtA, rtB, kTangent, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, rn2A, rn2B, k11, k22, k12;
    if (typeof contacts !== "string" && (typeof contacts !== "object" || contacts === null || contacts.constructor !== Array && !contacts.$isJavaScriptIndexingBehavior))
      return this.init$3$bailout(1, contacts, contactCount, impulseRatio);
    if (typeof impulseRatio !== "number")
      return this.init$3$bailout(1, contacts, contactCount, impulseRatio);
    this.constraintCount = contactCount;
    if ($.CONSTANT5.$lt(this.constraints.length, contactCount)) {
      old = this.constraints;
      this.constraints = $.List_List($.max(old.length * 2, this.constraintCount));
      $.CONSTANT0.setRange$3(this.constraints, 0, old.length, old);
      for (i = old.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = $.ContactConstraint$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    for (t1 = this.worldManifold, t2 = t1.points, t3 = this.tangent, t4 = this.temp2, t5 = this.temp1, t6 = $.getInterceptor$JSArrayJSString(contacts), t7 = t1.normal, i = 0; $.CONSTANT5.$lt(i, this.constraintCount); ++i) {
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.get$shape();
      shapeB = fixtureB.get$shape();
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      manifold = contact.get$manifold();
      friction = Math.sqrt($.checkNum($.$$mul(fixtureA.get$friction(), fixtureB.get$friction())));
      restitution = $.Settings_mixRestitution(fixtureA.get$restitution(), fixtureB.get$restitution());
      if (typeof restitution !== "number")
        return this.init$3$bailout(2, contacts, 0, impulseRatio, t2, restitution, i, t3, t6, radiusA, radiusB, bodyA, bodyB, manifold, t4, t7, t5, friction, t1, $.CONSTANT4);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.init$3$bailout(3, contacts, 0, impulseRatio, t2, restitution, i, t3, t6, radiusA, radiusB, bodyA, bodyB, manifold, t4, t7, t5, friction, t1, $.CONSTANT4, vA, vB, wA);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.init$3$bailout(4, contacts, 0, impulseRatio, t2, restitution, i, t3, t6, radiusA, radiusB, bodyA, bodyB, manifold, t4, t7, t5, friction, t1, $.CONSTANT4, vA, vB, wA, wB);
      t1.initialize$5(manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
      t11 = this.constraints;
      if (i >= t11.length)
        throw $.ioore(i);
      cc = t11[i];
      cc.set$bodyA(bodyA);
      cc.set$bodyB(bodyB);
      cc.set$manifold(manifold);
      t11 = t7.x;
      cc.get$normal().set$x(t11);
      t11 = t7.y;
      cc.get$normal().set$y(t11);
      cc.set$pointCount(manifold.get$pointCount());
      cc.set$friction(friction);
      cc.set$restitution(restitution);
      t11 = manifold.get$localNormal().get$x();
      cc.get$localNormal().set$x(t11);
      t11 = manifold.get$localNormal().get$y();
      cc.get$localNormal().set$y(t11);
      t11 = manifold.get$localPoint().get$x();
      cc.get$localPoint().set$x(t11);
      t11 = manifold.get$localPoint().get$y();
      cc.get$localPoint().set$y(t11);
      cc.set$radius($.$$add(radiusA, radiusB));
      cc.set$type(manifold.get$type());
      for (t8 = -restitution, t9 = -wA, t10 = -wB, j = 0; $.CONSTANT5.$lt(j, cc.get$pointCount()); ++j) {
        cp = $.$$index(manifold.get$points(), j);
        ccp = $.$$index(cc.get$points(), j);
        t11 = cp.get$normalImpulse();
        if (typeof t11 !== "number")
          throw $.iae(t11);
        ccp.set$normalImpulse(impulseRatio * t11);
        t12 = cp.get$tangentImpulse();
        if (typeof t12 !== "number")
          throw $.iae(t12);
        ccp.set$tangentImpulse(impulseRatio * t12);
        t13 = cp.get$localPoint().get$x();
        ccp.get$localPoint().set$x(t13);
        t13 = cp.get$localPoint().get$y();
        ccp.get$localPoint().set$y(t13);
        if (j >= t2.length)
          throw $.ioore(j);
        t13 = $.$$sub(t2[j].get$x(), bodyA.get$sweep().get$center().get$x());
        ccp.get$rA().set$x(t13);
        if (j >= t2.length)
          throw $.ioore(j);
        t13 = $.$$sub(t2[j].get$y(), bodyA.get$sweep().get$center().get$y());
        ccp.get$rA().set$y(t13);
        if (j >= t2.length)
          throw $.ioore(j);
        t13 = $.$$sub(t2[j].get$x(), bodyB.get$sweep().get$center().get$x());
        ccp.get$rB().set$x(t13);
        if (j >= t2.length)
          throw $.ioore(j);
        t13 = $.$$sub(t2[j].get$y(), bodyB.get$sweep().get$center().get$y());
        ccp.get$rB().set$y(t13);
        rnA = $.$$sub($.$$mul(ccp.get$rA().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rA().get$y(), cc.get$normal().get$x()));
        rnB = $.$$sub($.$$mul(ccp.get$rB().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rB().get$y(), cc.get$normal().get$x()));
        rnA = $.$$mul(rnA, rnA);
        rnB = $.$$mul(rnB, rnB);
        kNormal = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rnA)), $.$$mul(bodyB.get$invInertia(), rnB));
        if (typeof kNormal !== "number")
          throw $.iae(kNormal);
        ccp.set$normalMass(1 / kNormal);
        t13 = cc.get$normal().get$y();
        if (typeof t13 !== "number")
          throw $.iae(t13);
        t3.x = 1 * t13;
        t14 = cc.get$normal().get$x();
        if (typeof t14 !== "number")
          throw $.iae(t14);
        t3.y = -1 * t14;
        rtA = $.$$sub($.$$mul(ccp.get$rA().get$x(), t3.y), $.$$mul(ccp.get$rA().get$y(), t3.x));
        rtB = $.$$sub($.$$mul(ccp.get$rB().get$x(), t3.y), $.$$mul(ccp.get$rB().get$y(), t3.x));
        rtA = $.$$mul(rtA, rtA);
        rtB = $.$$mul(rtB, rtB);
        kTangent = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rtA)), $.$$mul(bodyB.get$invInertia(), rtB));
        if (typeof kTangent !== "number")
          throw $.iae(kTangent);
        ccp.set$tangentMass(1 / kTangent);
        ccp.set$velocityBias(0);
        t15 = ccp.get$rA().get$y();
        if (typeof t15 !== "number")
          throw $.iae(t15);
        t4.x = t9 * t15;
        t16 = ccp.get$rA().get$x();
        if (typeof t16 !== "number")
          throw $.iae(t16);
        t4.y = wA * t16;
        t17 = ccp.get$rB().get$y();
        if (typeof t17 !== "number")
          throw $.iae(t17);
        t18 = vB.get$x();
        if (typeof t18 !== "number")
          throw $.iae(t18);
        t19 = vA.get$x();
        if (typeof t19 !== "number")
          throw $.iae(t19);
        t20 = t4.x;
        if (typeof t20 !== "number")
          throw $.iae(t20);
        t5.x = t10 * t17 + t18 - t19 - t20;
        t21 = ccp.get$rB().get$x();
        if (typeof t21 !== "number")
          throw $.iae(t21);
        t22 = vB.get$y();
        if (typeof t22 !== "number")
          throw $.iae(t22);
        t23 = vA.get$y();
        if (typeof t23 !== "number")
          throw $.iae(t23);
        t24 = t4.y;
        if (typeof t24 !== "number")
          throw $.iae(t24);
        t5.y = wB * t21 + t22 - t23 - t24;
        a = cc.get$normal();
        vRel = $.$$add($.$$mul(a.get$x(), t5.x), $.$$mul(a.get$y(), t5.y));
        if ($.$$lt(vRel, -1) === true) {
          if (typeof vRel !== "number")
            throw $.iae(vRel);
          ccp.set$velocityBias(t8 * vRel);
        }
      }
      if ($.$$eq(cc.get$pointCount(), 2) === true) {
        ccp1 = $.$$index(cc.get$points(), 0);
        ccp2 = $.$$index(cc.get$points(), 1);
        invMassA = bodyA.get$invMass();
        invIA = bodyA.get$invInertia();
        invMassB = bodyB.get$invMass();
        invIB = bodyB.get$invInertia();
        t8 = ccp1.get$rA();
        t9 = cc.get$normal();
        rn1A = $.$$sub($.$$mul(t8.get$x(), t9.get$y()), $.$$mul(t8.get$y(), t9.get$x()));
        t10 = ccp1.get$rB();
        t11 = cc.get$normal();
        rn1B = $.$$sub($.$$mul(t10.get$x(), t11.get$y()), $.$$mul(t10.get$y(), t11.get$x()));
        t12 = ccp2.get$rA();
        t13 = cc.get$normal();
        rn2A = $.$$sub($.$$mul(t12.get$x(), t13.get$y()), $.$$mul(t12.get$y(), t13.get$x()));
        t14 = ccp2.get$rB();
        t15 = cc.get$normal();
        rn2B = $.$$sub($.$$mul(t14.get$x(), t15.get$y()), $.$$mul(t14.get$y(), t15.get$x()));
        t16 = $.getInterceptor$JSNumber(invMassA);
        t17 = $.getInterceptor$JSNumber(invIA);
        t18 = $.getInterceptor$JSNumber(invIB);
        k11 = $.$$add($.$$add(t16.$add(invMassA, invMassB), $.$$mul(t17.$mul(invIA, rn1A), rn1A)), $.$$mul(t18.$mul(invIB, rn1B), rn1B));
        k22 = $.$$add($.$$add(t16.$add(invMassA, invMassB), $.$$mul(t17.$mul(invIA, rn2A), rn2A)), $.$$mul(t18.$mul(invIB, rn2B), rn2B));
        k12 = $.$$add($.$$add(t16.$add(invMassA, invMassB), $.$$mul(t17.$mul(invIA, rn1A), rn2A)), $.$$mul(t18.$mul(invIB, rn1B), rn2B));
        t8 = $.getInterceptor$JSNumber(k11);
        t9 = t8.$mul(k11, k11);
        t10 = $.$$sub(t8.$mul(k11, k22), $.$$mul(k12, k12));
        if (typeof t10 !== "number")
          throw $.iae(t10);
        if ($.$$lt(t9, 100 * t10) === true) {
          cc.get$K().get$col1().set$x(k11);
          cc.get$K().get$col1().set$y(k12);
          cc.get$K().get$col2().set$x(k12);
          cc.get$K().get$col2().set$y(k22);
          t8 = cc.get$K().get$col1().get$x();
          cc.get$normalMass().get$col1().set$x(t8);
          t8 = cc.get$K().get$col1().get$y();
          cc.get$normalMass().get$col1().set$y(t8);
          t8 = cc.get$K().get$col2().get$x();
          cc.get$normalMass().get$col2().set$x(t8);
          t8 = cc.get$K().get$col2().get$y();
          cc.get$normalMass().get$col2().set$y(t8);
          cc.get$normalMass().invertLocal$0();
        } else
          cc.set$pointCount(1);
      }
    }
  },
  init$3$bailout: function(state0, contacts, contactCount, impulseRatio, t3, restitution, i, t4, t7, radiusA, radiusB, bodyA, bodyB, manifold, t5, t8, t6, friction, t2, t1, vA, vB, wA, wB) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        this.constraintCount = contactCount;
        if ($.CONSTANT5.$lt(this.constraints.length, contactCount)) {
          old = this.constraints;
          this.constraints = $.List_List($.max(old.length * 2, this.constraintCount));
          $.CONSTANT0.setRange$3(this.constraints, 0, old.length, old);
          for (i = old.length; t1 = this.constraints, i < t1.length; ++i) {
            t2 = $.ContactConstraint$();
            if (i >= t1.length)
              throw $.ioore(i);
            t1[i] = t2;
          }
        }
        t1 = $.getInterceptor$JSNumber(impulseRatio);
        t2 = this.worldManifold;
        t3 = t2.points;
        t4 = this.tangent;
        t5 = this.temp2;
        t6 = this.temp1;
        t7 = $.getInterceptor$JSArrayJSString(contacts);
        t8 = t2.normal;
        i = 0;
      default:
        var old, contact, fixtureA, fixtureB, shapeA, shapeB, t12, cc, t9, t10, t11, j, cp, ccp, rnA, rnB, kNormal, t13, rtA, rtB, kTangent, a, vRel, ccp1, ccp2, invMassA, invIA, invMassB, invIB, rn1A, rn1B, t14, rn2A, t15, t16, rn2B, t17, t18, t19, k11, k22, k12;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT5.$lt(i, this.constraintCount))
                  break L0;
                contact = t7.$index(contacts, i);
                fixtureA = contact.get$fixtureA();
                fixtureB = contact.get$fixtureB();
                shapeA = fixtureA.get$shape();
                shapeB = fixtureB.get$shape();
                radiusA = shapeA.get$radius();
                radiusB = shapeB.get$radius();
                bodyA = fixtureA.get$body();
                bodyB = fixtureB.get$body();
                manifold = contact.get$manifold();
                friction = Math.sqrt($.checkNum($.$$mul(fixtureA.get$friction(), fixtureB.get$friction())));
                restitution = $.Settings_mixRestitution(fixtureA.get$restitution(), fixtureB.get$restitution());
              case 2:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                wA = bodyA.get$angularVelocity();
              case 3:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 4:
                state0 = 0;
                t2.initialize$5(manifold, bodyA.get$originTransform(), radiusA, bodyB.get$originTransform(), radiusB);
                t12 = this.constraints;
                if (i >= t12.length)
                  throw $.ioore(i);
                cc = t12[i];
                cc.set$bodyA(bodyA);
                cc.set$bodyB(bodyB);
                cc.set$manifold(manifold);
                t12 = t8.x;
                cc.get$normal().set$x(t12);
                t12 = t8.y;
                cc.get$normal().set$y(t12);
                cc.set$pointCount(manifold.get$pointCount());
                cc.set$friction(friction);
                cc.set$restitution(restitution);
                t12 = manifold.get$localNormal().get$x();
                cc.get$localNormal().set$x(t12);
                t12 = manifold.get$localNormal().get$y();
                cc.get$localNormal().set$y(t12);
                t12 = manifold.get$localPoint().get$x();
                cc.get$localPoint().set$x(t12);
                t12 = manifold.get$localPoint().get$y();
                cc.get$localPoint().set$y(t12);
                cc.set$radius($.$$add(radiusA, radiusB));
                cc.set$type(manifold.get$type());
                for (t9 = $.getInterceptor$JSNumber(restitution), t10 = $.getInterceptor$JSNumber(wA), t11 = $.getInterceptor$JSNumber(wB), j = 0; $.CONSTANT5.$lt(j, cc.get$pointCount()); ++j) {
                  cp = $.$$index(manifold.get$points(), j);
                  ccp = $.$$index(cc.get$points(), j);
                  ccp.set$normalImpulse(t1.$mul(impulseRatio, cp.get$normalImpulse()));
                  ccp.set$tangentImpulse(t1.$mul(impulseRatio, cp.get$tangentImpulse()));
                  t12 = cp.get$localPoint().get$x();
                  ccp.get$localPoint().set$x(t12);
                  t12 = cp.get$localPoint().get$y();
                  ccp.get$localPoint().set$y(t12);
                  if (j >= t3.length)
                    throw $.ioore(j);
                  t12 = $.$$sub(t3[j].get$x(), bodyA.get$sweep().get$center().get$x());
                  ccp.get$rA().set$x(t12);
                  if (j >= t3.length)
                    throw $.ioore(j);
                  t12 = $.$$sub(t3[j].get$y(), bodyA.get$sweep().get$center().get$y());
                  ccp.get$rA().set$y(t12);
                  if (j >= t3.length)
                    throw $.ioore(j);
                  t12 = $.$$sub(t3[j].get$x(), bodyB.get$sweep().get$center().get$x());
                  ccp.get$rB().set$x(t12);
                  if (j >= t3.length)
                    throw $.ioore(j);
                  t12 = $.$$sub(t3[j].get$y(), bodyB.get$sweep().get$center().get$y());
                  ccp.get$rB().set$y(t12);
                  rnA = $.$$sub($.$$mul(ccp.get$rA().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rA().get$y(), cc.get$normal().get$x()));
                  rnB = $.$$sub($.$$mul(ccp.get$rB().get$x(), cc.get$normal().get$y()), $.$$mul(ccp.get$rB().get$y(), cc.get$normal().get$x()));
                  rnA = $.$$mul(rnA, rnA);
                  rnB = $.$$mul(rnB, rnB);
                  kNormal = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rnA)), $.$$mul(bodyB.get$invInertia(), rnB));
                  if (typeof kNormal !== "number")
                    throw $.iae(kNormal);
                  ccp.set$normalMass(1 / kNormal);
                  t12 = cc.get$normal().get$y();
                  if (typeof t12 !== "number")
                    throw $.iae(t12);
                  t4.x = 1 * t12;
                  t13 = cc.get$normal().get$x();
                  if (typeof t13 !== "number")
                    throw $.iae(t13);
                  t4.y = -1 * t13;
                  rtA = $.$$sub($.$$mul(ccp.get$rA().get$x(), t4.y), $.$$mul(ccp.get$rA().get$y(), t4.x));
                  rtB = $.$$sub($.$$mul(ccp.get$rB().get$x(), t4.y), $.$$mul(ccp.get$rB().get$y(), t4.x));
                  rtA = $.$$mul(rtA, rtA);
                  rtB = $.$$mul(rtB, rtB);
                  kTangent = $.$$add($.$$add($.$$add(bodyA.get$invMass(), bodyB.get$invMass()), $.$$mul(bodyA.get$invInertia(), rtA)), $.$$mul(bodyB.get$invInertia(), rtB));
                  if (typeof kTangent !== "number")
                    throw $.iae(kTangent);
                  ccp.set$tangentMass(1 / kTangent);
                  ccp.set$velocityBias(0);
                  t5.x = $.$$mul(t10.$negate(wA), ccp.get$rA().get$y());
                  t5.y = t10.$mul(wA, ccp.get$rA().get$x());
                  t6.x = $.$$sub($.$$sub($.$$add($.$$mul(t11.$negate(wB), ccp.get$rB().get$y()), vB.get$x()), vA.get$x()), t5.x);
                  t6.y = $.$$sub($.$$sub($.$$add(t11.$mul(wB, ccp.get$rB().get$x()), vB.get$y()), vA.get$y()), t5.y);
                  a = cc.get$normal();
                  vRel = $.$$add($.$$mul(a.get$x(), t6.x), $.$$mul(a.get$y(), t6.y));
                  if ($.$$lt(vRel, -1) === true)
                    ccp.set$velocityBias($.$$mul(t9.$negate(restitution), vRel));
                }
                if ($.$$eq(cc.get$pointCount(), 2) === true) {
                  ccp1 = $.$$index(cc.get$points(), 0);
                  ccp2 = $.$$index(cc.get$points(), 1);
                  invMassA = bodyA.get$invMass();
                  invIA = bodyA.get$invInertia();
                  invMassB = bodyB.get$invMass();
                  invIB = bodyB.get$invInertia();
                  t9 = ccp1.get$rA();
                  t10 = cc.get$normal();
                  rn1A = $.$$sub($.$$mul(t9.get$x(), t10.get$y()), $.$$mul(t9.get$y(), t10.get$x()));
                  t11 = ccp1.get$rB();
                  t12 = cc.get$normal();
                  rn1B = $.$$sub($.$$mul(t11.get$x(), t12.get$y()), $.$$mul(t11.get$y(), t12.get$x()));
                  t13 = ccp2.get$rA();
                  t14 = cc.get$normal();
                  rn2A = $.$$sub($.$$mul(t13.get$x(), t14.get$y()), $.$$mul(t13.get$y(), t14.get$x()));
                  t15 = ccp2.get$rB();
                  t16 = cc.get$normal();
                  rn2B = $.$$sub($.$$mul(t15.get$x(), t16.get$y()), $.$$mul(t15.get$y(), t16.get$x()));
                  t17 = $.getInterceptor$JSNumber(invMassA);
                  t18 = $.getInterceptor$JSNumber(invIA);
                  t19 = $.getInterceptor$JSNumber(invIB);
                  k11 = $.$$add($.$$add(t17.$add(invMassA, invMassB), $.$$mul(t18.$mul(invIA, rn1A), rn1A)), $.$$mul(t19.$mul(invIB, rn1B), rn1B));
                  k22 = $.$$add($.$$add(t17.$add(invMassA, invMassB), $.$$mul(t18.$mul(invIA, rn2A), rn2A)), $.$$mul(t19.$mul(invIB, rn2B), rn2B));
                  k12 = $.$$add($.$$add(t17.$add(invMassA, invMassB), $.$$mul(t18.$mul(invIA, rn1A), rn2A)), $.$$mul(t19.$mul(invIB, rn1B), rn2B));
                  t9 = $.getInterceptor$JSNumber(k11);
                  t10 = t9.$mul(k11, k11);
                  t11 = $.$$sub(t9.$mul(k11, k22), $.$$mul(k12, k12));
                  if (typeof t11 !== "number")
                    throw $.iae(t11);
                  if ($.$$lt(t10, 100 * t11) === true) {
                    cc.get$K().get$col1().set$x(k11);
                    cc.get$K().get$col1().set$y(k12);
                    cc.get$K().get$col2().set$x(k12);
                    cc.get$K().get$col2().set$y(k22);
                    t9 = cc.get$K().get$col1().get$x();
                    cc.get$normalMass().get$col1().set$x(t9);
                    t9 = cc.get$K().get$col1().get$y();
                    cc.get$normalMass().get$col1().set$y(t9);
                    t9 = cc.get$K().get$col2().get$x();
                    cc.get$normalMass().get$col2().set$x(t9);
                    t9 = cc.get$K().get$col2().get$y();
                    cc.get$normalMass().get$col2().set$y(t9);
                    cc.get$normalMass().invertLocal$0();
                  } else
                    cc.set$pointCount(1);
                }
                ++i;
            }
    }
  },
  warmStart$0: function() {
    var t1, i, t2, c, bodyA, bodyB, invMassA, invIA, invMassB, invIB, normal, j, ccp, Px, Py, t3, t4, t5, t6, t7, t8;
    for (t1 = this.tangent, i = 0; $.CONSTANT5.$lt(i, this.constraintCount); ++i) {
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      c = t2[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      invMassA = bodyA.get$invMass();
      if (typeof invMassA !== "number")
        return this.warmStart$0$bailout(1, invMassA, bodyA, i, c, t1, bodyB);
      invIA = bodyA.get$invInertia();
      if (typeof invIA !== "number")
        return this.warmStart$0$bailout(2, invMassA, bodyA, i, c, t1, bodyB, invIA);
      invMassB = bodyB.get$invMass();
      if (typeof invMassB !== "number")
        return this.warmStart$0$bailout(3, invMassA, bodyA, i, c, t1, bodyB, invIA, invMassB);
      invIB = bodyB.get$invInertia();
      if (typeof invIB !== "number")
        return this.warmStart$0$bailout(4, invMassA, bodyA, i, c, t1, bodyB, invIA, invMassB, invIB);
      normal = c.get$normal();
      $.Vector_crossVectorAndNumToOut(normal, 1, t1);
      for (j = 0; $.CONSTANT5.$lt(j, c.get$pointCount()); ++j) {
        ccp = $.$$index(c.get$points(), j);
        Px = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$x()), $.$$mul(ccp.get$tangentImpulse(), t1.x));
        Py = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$y()), $.$$mul(ccp.get$tangentImpulse(), t1.y));
        t2 = bodyA.get$angularVelocity();
        t3 = $.$$sub($.$$mul(ccp.get$rA().get$x(), Py), $.$$mul(ccp.get$rA().get$y(), Px));
        if (typeof t3 !== "number")
          throw $.iae(t3);
        bodyA.set$angularVelocity($.$$sub(t2, invIA * t3));
        t4 = bodyA.get$linearVelocity();
        t5 = $.getInterceptor$JSNumber(Px);
        t4.set$x($.$$sub(t4.get$x(), t5.$mul(Px, invMassA)));
        t4 = bodyA.get$linearVelocity();
        t6 = $.getInterceptor$JSNumber(Py);
        t4.set$y($.$$sub(t4.get$y(), t6.$mul(Py, invMassA)));
        t4 = bodyB.get$angularVelocity();
        t7 = $.$$sub($.$$mul(ccp.get$rB().get$x(), Py), $.$$mul(ccp.get$rB().get$y(), Px));
        if (typeof t7 !== "number")
          throw $.iae(t7);
        bodyB.set$angularVelocity($.$$add(t4, invIB * t7));
        t8 = bodyB.get$linearVelocity();
        t8.set$x($.$$add(t8.get$x(), t5.$mul(Px, invMassB)));
        t8 = bodyB.get$linearVelocity();
        t8.set$y($.$$add(t8.get$y(), t6.$mul(Py, invMassB)));
      }
    }
  },
  warmStart$0$bailout: function(state0, invMassA, bodyA, i, c, t1, bodyB, invIA, invMassB, invIB) {
    switch (state0) {
      case 0:
        t1 = this.tangent;
        i = 0;
      default:
        var t2, normal, t3, j, ccp, Px, Py, t4, t5, t6;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!$.CONSTANT5.$lt(i, this.constraintCount))
                  break L0;
                t2 = this.constraints;
                if (i >= t2.length)
                  throw $.ioore(i);
                c = t2[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                invMassA = bodyA.get$invMass();
              case 1:
                state0 = 0;
                invIA = bodyA.get$invInertia();
              case 2:
                state0 = 0;
                invMassB = bodyB.get$invMass();
              case 3:
                state0 = 0;
                invIB = bodyB.get$invInertia();
              case 4:
                state0 = 0;
                normal = c.get$normal();
                $.Vector_crossVectorAndNumToOut(normal, 1, t1);
                for (t2 = $.getInterceptor$JSNumber(invIA), t3 = $.getInterceptor$JSNumber(invIB), j = 0; $.CONSTANT5.$lt(j, c.get$pointCount()); ++j) {
                  ccp = $.$$index(c.get$points(), j);
                  Px = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$x()), $.$$mul(ccp.get$tangentImpulse(), t1.x));
                  Py = $.$$add($.$$mul(ccp.get$normalImpulse(), normal.get$y()), $.$$mul(ccp.get$tangentImpulse(), t1.y));
                  bodyA.set$angularVelocity($.$$sub(bodyA.get$angularVelocity(), t2.$mul(invIA, $.$$sub($.$$mul(ccp.get$rA().get$x(), Py), $.$$mul(ccp.get$rA().get$y(), Px)))));
                  t4 = bodyA.get$linearVelocity();
                  t5 = $.getInterceptor$JSNumber(Px);
                  t4.set$x($.$$sub(t4.get$x(), t5.$mul(Px, invMassA)));
                  t4 = bodyA.get$linearVelocity();
                  t6 = $.getInterceptor$JSNumber(Py);
                  t4.set$y($.$$sub(t4.get$y(), t6.$mul(Py, invMassA)));
                  bodyB.set$angularVelocity($.$$add(bodyB.get$angularVelocity(), t3.$mul(invIB, $.$$sub($.$$mul(ccp.get$rB().get$x(), Py), $.$$mul(ccp.get$rB().get$y(), Px)))));
                  t4 = bodyB.get$linearVelocity();
                  t4.set$x($.$$add(t4.get$x(), t5.$mul(Px, invMassB)));
                  t4 = bodyB.get$linearVelocity();
                  t4.set$y($.$$add(t4.get$y(), t6.$mul(Py, invMassB)));
                }
                ++i;
            }
    }
  },
  solveVelocityConstraints$0: function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, i, t11, c, bodyA, bodyB, wA, wB, vA, vB, invMassA, invIA, invMassB, invIB, t17, t18, friction, j, ccp, a, t13, t20, t24, t26, t29, vt, lambda, maxFriction, newImpulse, t34, lambda0, Px, Py, t38, t40, t41, t44, t46, t48, t49, t12, t14, t15, a1, b, t28, t30, vn, t33, t16, t19, t21, t23, cp1, cp2, t25, t32, t36, t39, vn1, vn2, t47, t51, t54, t56, t57, t59, t62, t64, t66, t68, t70, t22, t27, t31;
    t1 = this.dv;
    t2 = this.tangent;
    t3 = this.d;
    t4 = this.x;
    t5 = this.P1;
    t6 = this.P2;
    t7 = this.temp1;
    t8 = this.temp2;
    t9 = this.dv1;
    t10 = this.dv2;
    i = 0;
    while (true) {
      t11 = this.constraintCount;
      if (typeof t11 !== "number")
        return this.solveVelocityConstraints$0$bailout(1, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9);
      if (!(i < t11))
        break;
      t11 = this.constraints;
      if (i >= t11.length)
        throw $.ioore(i);
      c = t11[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      wA = bodyA.get$angularVelocity();
      if (typeof wA !== "number")
        return this.solveVelocityConstraints$0$bailout(2, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c);
      wB = bodyB.get$angularVelocity();
      if (typeof wB !== "number")
        return this.solveVelocityConstraints$0$bailout(3, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB);
      vA = bodyA.get$linearVelocity();
      vB = bodyB.get$linearVelocity();
      invMassA = bodyA.get$invMass();
      if (typeof invMassA !== "number")
        return this.solveVelocityConstraints$0$bailout(4, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA);
      invIA = bodyA.get$invInertia();
      if (typeof invIA !== "number")
        return this.solveVelocityConstraints$0$bailout(5, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA);
      invMassB = bodyB.get$invMass();
      if (typeof invMassB !== "number")
        return this.solveVelocityConstraints$0$bailout(6, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB);
      invIB = bodyB.get$invInertia();
      if (typeof invIB !== "number")
        return this.solveVelocityConstraints$0$bailout(7, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB);
      t17 = c.get$normal().get$y();
      if (typeof t17 !== "number")
        throw $.iae(t17);
      t2.x = 1 * t17;
      t18 = c.get$normal().get$x();
      if (typeof t18 !== "number")
        throw $.iae(t18);
      t2.y = -1 * t18;
      friction = c.get$friction();
      if (typeof friction !== "number")
        return this.solveVelocityConstraints$0$bailout(8, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction);
      j = 0;
      while (true) {
        t11 = c.get$pointCount();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(9, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, t11, $.CONSTANT4);
        if (!(j < t11))
          break;
        t11 = c.get$points();
        if (typeof t11 !== "string" && (typeof t11 !== "object" || t11 === null || t11.constructor !== Array && !t11.$isJavaScriptIndexingBehavior))
          return this.solveVelocityConstraints$0$bailout(10, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, t11, $.CONSTANT4);
        if (j >= t11.length)
          throw $.ioore(j);
        ccp = t11[j];
        a = ccp.get$rA();
        t11 = -wB;
        t13 = ccp.get$rB().get$y();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(11, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t13 = t11 * t13;
        t11 = vB.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(12, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t11 = t13 + t11;
        t13 = vA.get$x();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(13, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t13 = t11 - t13;
        t11 = a.get$y();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(14, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, t11, t13, ccp);
        t1.x = t13 + wA * t11;
        t18 = ccp.get$rB().get$x();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(15, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, 0, 0, ccp, $.CONSTANT4, t18);
        t18 = wB * t18;
        t20 = vB.get$y();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(16, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, 0, 0, ccp, $.CONSTANT4, t18, t20);
        t20 = t18 + t20;
        t18 = vA.get$y();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(17, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, a, 0, 0, ccp, $.CONSTANT4, t18, t20);
        t18 = t20 - t18;
        t20 = a.get$x();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(18, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, t18, t20);
        t1.y = t18 - wA * t20;
        t24 = t1.x;
        t26 = t2.x;
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(19, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24);
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(20, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24, t26);
        t26 = t24 * t26;
        t24 = t1.y;
        t29 = t2.y;
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(21, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24, t26);
        if (typeof t29 !== "number")
          return this.solveVelocityConstraints$0$bailout(22, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, t24, t26, t29);
        vt = t26 + t24 * t29;
        t26 = ccp.get$tangentMass();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(23, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, t26, 0, vt);
        lambda = t26 * -vt;
        t26 = ccp.get$normalImpulse();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(24, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, t26, 0, 0, lambda);
        maxFriction = friction * t26;
        t26 = ccp.get$tangentImpulse();
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(25, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, t26, 0, 0, lambda, maxFriction);
        newImpulse = $.max(-maxFriction, $.min(t26 + lambda, maxFriction));
        t34 = ccp.get$tangentImpulse();
        if (typeof t34 !== "number")
          throw $.iae(t34);
        lambda0 = newImpulse - t34;
        t34 = t2.x;
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(26, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, lambda0, 0, newImpulse, t34);
        Px = t34 * lambda0;
        t34 = t2.y;
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(27, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, lambda0, 0, newImpulse, t34, Px);
        Py = t34 * lambda0;
        t34 = vA.get$x();
        if (typeof t34 !== "number")
          return this.solveVelocityConstraints$0$bailout(28, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, t34, Px, Py);
        vA.set$x(t34 - Px * invMassA);
        t38 = vA.get$y();
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(29, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, t38);
        vA.set$y(t38 - Py * invMassA);
        t40 = ccp.get$rA();
        t41 = t40.get$x();
        if (typeof t41 !== "number")
          return this.solveVelocityConstraints$0$bailout(30, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, 0, $.CONSTANT4, t41);
        t41 *= Py;
        t40 = t40.get$y();
        if (typeof t40 !== "number")
          return this.solveVelocityConstraints$0$bailout(31, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, 0, $.CONSTANT4, t41, t40);
        wA -= invIA * (t41 - t40 * Px);
        t44 = vB.get$x();
        if (typeof t44 !== "number")
          return this.solveVelocityConstraints$0$bailout(32, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, t44, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, $.CONSTANT4, 0, $.CONSTANT4);
        vB.set$x(t44 + Px * invMassB);
        t46 = vB.get$y();
        if (typeof t46 !== "number")
          return this.solveVelocityConstraints$0$bailout(33, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, $.CONSTANT4, 0, 0, t46);
        vB.set$y(t46 + Py * invMassB);
        t48 = ccp.get$rB();
        t49 = t48.get$x();
        if (typeof t49 !== "number")
          return this.solveVelocityConstraints$0$bailout(34, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, t49);
        t49 *= Py;
        t48 = t48.get$y();
        if (typeof t48 !== "number")
          return this.solveVelocityConstraints$0$bailout(35, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, $.CONSTANT4, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, $.CONSTANT4, j, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, 0, 0, 0, 0, 0, 0, 0, t49, t48);
        wB += invIB * (t49 - t48 * Px);
        ccp.set$tangentImpulse(newImpulse);
        ++j;
      }
      t11 = t11 === 1;
      t12 = c.get$points();
      if (typeof t12 !== "string" && (typeof t12 !== "object" || t12 === null || t12.constructor !== Array && !t12.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$0$bailout(37, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t12);
      t14 = -wB;
      t15 = t12.length;
      if (t11) {
        if (0 >= t15)
          throw $.ioore(0);
        ccp = t12[0];
        a1 = ccp.get$rA();
        t11 = ccp.get$rB().get$y();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(38, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t11 = t14 * t11;
        t14 = vB.get$x();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(39, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t14 = t11 + t14;
        t11 = vA.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(40, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t11 = t14 - t11;
        t14 = a1.get$y();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(41, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, t11, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1);
        t1.x = t11 + wA * t14;
        t18 = ccp.get$rB().get$x();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(42, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1, t18);
        t18 = wB * t18;
        t20 = vB.get$y();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(43, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1, t18);
        t20 = t18 + t20;
        t18 = vA.get$y();
        if (typeof t18 !== "number")
          return this.solveVelocityConstraints$0$bailout(44, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a1, t18);
        t18 = t20 - t18;
        t20 = a1.get$x();
        if (typeof t20 !== "number")
          return this.solveVelocityConstraints$0$bailout(45, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18);
        t1.y = t18 - wA * t20;
        b = c.get$normal();
        t24 = t1.x;
        t26 = b.get$x();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(46, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, t24);
        if (typeof t26 !== "number")
          return this.solveVelocityConstraints$0$bailout(47, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, t24);
        t24 *= t26;
        t28 = t1.y;
        t30 = b.get$y();
        if (typeof t28 !== "number")
          return this.solveVelocityConstraints$0$bailout(48, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, t28);
        if (typeof t30 !== "number")
          return this.solveVelocityConstraints$0$bailout(49, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, t30);
        vn = t24 + t28 * t30;
        t24 = ccp.get$normalMass();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(50, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, vn);
        t24 = -t24;
        t33 = ccp.get$velocityBias();
        if (typeof t33 !== "number")
          return this.solveVelocityConstraints$0$bailout(51, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, vn, t33);
        lambda = t24 * (vn - t33);
        t24 = ccp.get$normalImpulse();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(52, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, t24, 0, 0, 0, lambda);
        a = t24 + lambda;
        newImpulse = a > 0 ? a : 0;
        lambda = newImpulse - t24;
        Px = t26 * lambda;
        Py = t30 * lambda;
        t11 = vA.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(56, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py);
        vA.set$x(t11 - Px * invMassA);
        t13 = vA.get$y();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(57, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, 0, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, 0, 0, $.CONSTANT4);
        vA.set$y(t13 - Py * invMassA);
        t15 = ccp.get$rA();
        t16 = t15.get$x();
        if (typeof t16 !== "number")
          return this.solveVelocityConstraints$0$bailout(58, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, t16);
        t16 *= Py;
        t15 = t15.get$y();
        if (typeof t15 !== "number")
          return this.solveVelocityConstraints$0$bailout(59, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, t16, t15);
        wA -= invIA * (t16 - t15 * Px);
        t19 = vB.get$x();
        if (typeof t19 !== "number")
          return this.solveVelocityConstraints$0$bailout(60, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, invMassB, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t19, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4);
        vB.set$x(t19 + Px * invMassB);
        t21 = vB.get$y();
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(61, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, invMassB, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, ccp, 0, $.CONSTANT4, 0, t21, 0, 0, 0, 0, 0, newImpulse, 0, Px, Py);
        vB.set$y(t21 + Py * invMassB);
        t23 = ccp.get$rB();
        t24 = t23.get$x();
        if (typeof t24 !== "number")
          return this.solveVelocityConstraints$0$bailout(62, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, ccp, 0, 0, 0, 0, t24, 0, 0, 0, 0, newImpulse, 0, Px, Py);
        t24 *= Py;
        t23 = t23.get$y();
        if (typeof t23 !== "number")
          return this.solveVelocityConstraints$0$bailout(63, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, ccp, 0, 0, 0, 0, t24, 0, 0, 0, 0, newImpulse, 0, Px, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23);
        wB += invIB * (t24 - t23 * Px);
        ccp.set$normalImpulse(newImpulse);
      } else {
        if (0 >= t15)
          throw $.ioore(0);
        cp1 = t12[0];
        if (1 >= t12.length)
          throw $.ioore(1);
        cp2 = t12[1];
        a = $.Vector$(cp1.get$normalImpulse(), cp2.get$normalImpulse());
        t11 = cp1.get$rB().get$y();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(65, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t14, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t11 = t14 * t11;
        t13 = vB.get$x();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(66, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t13, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t13 = t11 + t13;
        t11 = vA.get$x();
        if (typeof t11 !== "number")
          return this.solveVelocityConstraints$0$bailout(67, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t13, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t11 = t13 - t11;
        t13 = cp1.get$rA().get$y();
        if (typeof t13 !== "number")
          return this.solveVelocityConstraints$0$bailout(68, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t13, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t9.x = t11 + wA * t13;
        t19 = cp1.get$rB().get$x();
        if (typeof t19 !== "number")
          return this.solveVelocityConstraints$0$bailout(69, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t19 = wB * t19;
        t21 = vB.get$y();
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(70, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, cp1, cp2);
        t21 = t19 + t21;
        t19 = vA.get$y();
        if (typeof t19 !== "number")
          return this.solveVelocityConstraints$0$bailout(71, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, cp1, cp2);
        t19 = t21 - t19;
        t21 = cp1.get$rA().get$x();
        if (typeof t21 !== "number")
          return this.solveVelocityConstraints$0$bailout(72, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, cp1, cp2);
        t9.y = t19 - wA * t21;
        t25 = cp2.get$rB().get$y();
        if (typeof t25 !== "number")
          return this.solveVelocityConstraints$0$bailout(73, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t25 = t14 * t25;
        t14 = vB.get$x();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(74, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t14 = t25 + t14;
        t25 = vA.get$x();
        if (typeof t25 !== "number")
          return this.solveVelocityConstraints$0$bailout(75, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t25 = t14 - t25;
        t14 = cp2.get$rA().get$y();
        if (typeof t14 !== "number")
          return this.solveVelocityConstraints$0$bailout(76, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, t14);
        t10.x = t25 + wA * t14;
        t30 = cp2.get$rB().get$x();
        if (typeof t30 !== "number")
          return this.solveVelocityConstraints$0$bailout(77, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
        t30 = wB * t30;
        t32 = vB.get$y();
        if (typeof t32 !== "number")
          return this.solveVelocityConstraints$0$bailout(78, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32);
        t32 = t30 + t32;
        t30 = vA.get$y();
        if (typeof t30 !== "number")
          return this.solveVelocityConstraints$0$bailout(79, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32);
        t30 = t32 - t30;
        t32 = cp2.get$rA().get$x();
        if (typeof t32 !== "number")
          return this.solveVelocityConstraints$0$bailout(80, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, t32);
        t10.y = t30 - wA * t32;
        t36 = t9.x;
        t38 = c.get$normal();
        t39 = t38.get$x();
        if (typeof t36 !== "number")
          return this.solveVelocityConstraints$0$bailout(81, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t36);
        if (typeof t39 !== "number")
          return this.solveVelocityConstraints$0$bailout(82, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t36, t39);
        t36 *= t39;
        t41 = t9.y;
        t38 = t38.get$y();
        if (typeof t41 !== "number")
          return this.solveVelocityConstraints$0$bailout(83, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t41, t36);
        if (typeof t38 !== "number")
          return this.solveVelocityConstraints$0$bailout(84, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, t41, t36, t38);
        vn1 = t36 + t41 * t38;
        t36 = t10.x;
        if (typeof t36 !== "number")
          return this.solveVelocityConstraints$0$bailout(85, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t36, 0, vn1);
        t39 = t36 * t39;
        t36 = t10.y;
        if (typeof t36 !== "number")
          return this.solveVelocityConstraints$0$bailout(87, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, t36, 0, vn1, t39);
        vn2 = t39 + t36 * t38;
        t39 = cp1.get$velocityBias();
        if (typeof t39 !== "number")
          return this.solveVelocityConstraints$0$bailout(89, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1, t39, 0, vn2);
        t39 = vn1 - t39;
        t47 = cp2.get$velocityBias();
        if (typeof t47 !== "number")
          return this.solveVelocityConstraints$0$bailout(90, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t39, 0, vn2);
        b = $.Vector$(t39, vn2 - t47);
        t39 = c.get$K();
        t49 = t39.get$col1().get$x();
        t51 = a.x;
        if (typeof t49 !== "number")
          return this.solveVelocityConstraints$0$bailout(91, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49);
        if (typeof t51 !== "number")
          return this.solveVelocityConstraints$0$bailout(92, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49, 0, 0, t51);
        t51 = t49 * t51;
        t49 = t39.get$col2().get$x();
        t54 = a.y;
        if (typeof t49 !== "number")
          return this.solveVelocityConstraints$0$bailout(93, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49, 0, 0, t51);
        if (typeof t54 !== "number")
          return this.solveVelocityConstraints$0$bailout(94, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, t49, 0, 0, t51, t54);
        t8.x = t51 + t49 * t54;
        t56 = c.get$K();
        t57 = t56.get$col1().get$y();
        t59 = a.x;
        if (typeof t57 !== "number")
          return this.solveVelocityConstraints$0$bailout(95, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57);
        if (typeof t59 !== "number")
          return this.solveVelocityConstraints$0$bailout(96, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59);
        t59 = t57 * t59;
        t57 = t56.get$col2().get$y();
        t62 = a.y;
        if (typeof t57 !== "number")
          return this.solveVelocityConstraints$0$bailout(97, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59);
        if (typeof t62 !== "number")
          return this.solveVelocityConstraints$0$bailout(98, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59, t62);
        t8.y = t59 + t57 * t62;
        t64 = b.x;
        t66 = t8.x;
        if (typeof t64 !== "number")
          return this.solveVelocityConstraints$0$bailout(99, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64);
        if (typeof t66 !== "number")
          return this.solveVelocityConstraints$0$bailout(100, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, t66);
        b.x = t64 - t66;
        t68 = b.y;
        t70 = t8.y;
        if (typeof t68 !== "number")
          return this.solveVelocityConstraints$0$bailout(101, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68);
        if (typeof t70 !== "number")
          return this.solveVelocityConstraints$0$bailout(102, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, t70);
        b.y = t68 - t70;
        $loop$1: {
          $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
          t4.mulLocal$1(-1);
          t11 = t4.get$x();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(103, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          if (t11 >= 0) {
            t11 = t4.get$y();
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(104, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t11 = t11 >= 0;
          } else
            t11 = false;
          if (t11) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(105, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(106, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(107, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(108, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(109, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(110, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(111, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(112, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(113, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(115, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(117, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(119, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          t11 = cp1.get$normalMass();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(121, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t11 = -t11;
          t13 = b.x;
          if (typeof t13 !== "number")
            return this.solveVelocityConstraints$0$bailout(122, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t4.set$x(t11 * t13);
          t4.set$y(0);
          t15 = c.get$K().get$col1().get$y();
          t17 = t4.get$x();
          if (typeof t15 !== "number")
            return this.solveVelocityConstraints$0$bailout(123, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          if (typeof t17 !== "number")
            return this.solveVelocityConstraints$0$bailout(124, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          t15 *= t17;
          t19 = b.y;
          if (typeof t19 !== "number")
            return this.solveVelocityConstraints$0$bailout(125, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19);
          if (t17 >= 0 && t15 + t19 >= 0) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(127, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(128, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(129, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(130, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(131, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(132, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(133, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(134, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(135, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(137, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(139, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(141, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          t4.set$x(0);
          t11 = cp2.get$normalMass();
          if (typeof t11 !== "number")
            return this.solveVelocityConstraints$0$bailout(143, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t11 = -t11;
          t13 = b.y;
          if (typeof t13 !== "number")
            return this.solveVelocityConstraints$0$bailout(144, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
          t4.set$y(t11 * t13);
          t15 = c.get$K().get$col2().get$x();
          t17 = t4.get$y();
          if (typeof t15 !== "number")
            return this.solveVelocityConstraints$0$bailout(145, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          if (typeof t17 !== "number")
            return this.solveVelocityConstraints$0$bailout(146, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15);
          t15 *= t17;
          t19 = b.x;
          if (typeof t19 !== "number")
            return this.solveVelocityConstraints$0$bailout(147, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19);
          if (t17 >= 0 && t15 + t19 >= 0) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(149, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(150, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(151, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(152, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(153, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(154, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(155, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(156, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(157, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(159, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(161, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(163, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          t4.set$x(0);
          t4.set$y(0);
          vn1 = b.x;
          vn2 = b.y;
          if (typeof vn1 !== "number")
            return this.solveVelocityConstraints$0$bailout(165, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1);
          if (vn1 >= 0) {
            if (typeof vn2 !== "number")
              return this.solveVelocityConstraints$0$bailout(166, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, a, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, vn1, 0, 0, vn2);
            t11 = vn2 >= 0;
          } else
            t11 = false;
          if (t11) {
            t3.setFrom$1(t4).subLocal$1(a);
            t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
            t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
            t7.setFrom$1(t5).addLocal$1(t6);
            t8.setFrom$1(t7).mulLocal$1(invMassA);
            vA.subLocal$1(t8);
            t8.setFrom$1(t7).mulLocal$1(invMassB);
            vB.addLocal$1(t8);
            t11 = cp1.get$rA();
            t12 = t11.get$x();
            t14 = t5.y;
            if (typeof t12 !== "number")
              return this.solveVelocityConstraints$0$bailout(167, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t14 !== "number")
              return this.solveVelocityConstraints$0$bailout(168, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, t12, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t12 *= t14;
            t11 = t11.get$y();
            t17 = t5.x;
            if (typeof t11 !== "number")
              return this.solveVelocityConstraints$0$bailout(169, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t17 !== "number")
              return this.solveVelocityConstraints$0$bailout(170, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, cp1, cp2);
            t12 -= t11 * t17;
            t19 = cp2.get$rA();
            t20 = t19.get$x();
            t22 = t6.y;
            if (typeof t20 !== "number")
              return this.solveVelocityConstraints$0$bailout(171, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t22 !== "number")
              return this.solveVelocityConstraints$0$bailout(172, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, t20, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t20 *= t22;
            t19 = t19.get$y();
            t25 = t6.x;
            if (typeof t19 !== "number")
              return this.solveVelocityConstraints$0$bailout(173, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            if (typeof t25 !== "number")
              return this.solveVelocityConstraints$0$bailout(174, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, invIA, 0, invIB, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, $.CONSTANT4, $.CONSTANT4, 0, t19, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            wA -= invIA * (t12 + (t20 - t19 * t25));
            t27 = cp1.get$rB();
            t28 = t27.get$x();
            if (typeof t28 !== "number")
              return this.solveVelocityConstraints$0$bailout(175, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 = t28 * t14;
            t27 = t27.get$y();
            if (typeof t27 !== "number")
              return this.solveVelocityConstraints$0$bailout(177, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, t27, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, cp1, cp2);
            t14 -= t27 * t17;
            t30 = cp2.get$rB();
            t31 = t30.get$x();
            if (typeof t31 !== "number")
              return this.solveVelocityConstraints$0$bailout(179, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, t31);
            t22 = t31 * t22;
            t30 = t30.get$y();
            if (typeof t30 !== "number")
              return this.solveVelocityConstraints$0$bailout(181, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, 0, t9, bodyA, bodyB, wA, 0, wB, vA, vB, 0, 0, 0, invIB, 0, 0, 0, 0, $.CONSTANT4, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, cp1, cp2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22);
            wB += invIB * (t14 + (t22 - t30 * t25));
            cp1.set$normalImpulse(t4.get$x());
            cp2.set$normalImpulse(t4.get$y());
            break $loop$1;
          }
          break $loop$1;
        }
      }
      bodyA.get$linearVelocity().setFrom$1(vA);
      bodyA.set$angularVelocity(wA);
      bodyB.get$linearVelocity().setFrom$1(vB);
      bodyB.set$angularVelocity(wB);
      ++i;
    }
  },
  solveVelocityConstraints$0$bailout: function(state0, t10, t3, t4, t5, i, t6, t7, t2, t8, t1, t11, t9, bodyA, bodyB, wA, c, wB, vA, vB, invMassA, invIA, invMassB, invIB, friction, t12, j, t14, t13, a, t16, t17, ccp, t22, t23, t25, t29, t31, t34, vt, lambda, maxFriction, newImpulse, t39, Px, Py, t43, t44, t46, t47, t49, t52, t54, t56, t15, t18, a1, t21, b, t27, t32, vn, t35, t20, t24, t26, t33, cp1, cp2, t28, t36, t40, t42, t45, vn1, t48, t51, vn2, t57, t60, t62, t64, t67, t69, t71, t73, t75, t38, t19) {
    switch (state0) {
      case 0:
        t1 = this.dv;
        t2 = this.tangent;
        t3 = this.d;
        t4 = this.x;
        t5 = this.P1;
        t6 = this.P2;
        t7 = this.temp1;
        t8 = this.temp2;
        t9 = this.dv1;
        t10 = this.dv2;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t11 = this.constraintCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t11))
                  break L0;
                t11 = this.constraints;
                if (i >= t11.length)
                  throw $.ioore(i);
                c = t11[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                wA = bodyA.get$angularVelocity();
              case 2:
                state0 = 0;
                wB = bodyB.get$angularVelocity();
              case 3:
                state0 = 0;
                vA = bodyA.get$linearVelocity();
                vB = bodyB.get$linearVelocity();
                invMassA = bodyA.get$invMass();
              case 4:
                state0 = 0;
                invIA = bodyA.get$invInertia();
              case 5:
                state0 = 0;
                invMassB = bodyB.get$invMass();
              case 6:
                state0 = 0;
                invIB = bodyB.get$invInertia();
              case 7:
                state0 = 0;
                t17 = c.get$normal().get$y();
                if (typeof t17 !== "number")
                  throw $.iae(t17);
                t2.x = 1 * t17;
                t18 = c.get$normal().get$x();
                if (typeof t18 !== "number")
                  throw $.iae(t18);
                t2.y = -1 * t18;
                friction = c.get$friction();
              case 8:
                state0 = 0;
                t11 = $.getInterceptor$JSNumber(friction);
                t12 = $.getInterceptor$JSNumber(invIA);
                t13 = $.getInterceptor$JSNumber(invIB);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t14 = c.get$pointCount();
                      case 9:
                        state0 = 0;
                        if (!$.CONSTANT5.$lt(j, t14))
                          break L1;
                        t14 = c.get$points();
                      case 10:
                        state0 = 0;
                        ccp = $.$$index(t14, j);
                        a = ccp.get$rA();
                        t14 = $.getInterceptor$JSNumber(wB);
                        t16 = t14.$negate(wB);
                        t17 = ccp.get$rB().get$y();
                      case 11:
                        state0 = 0;
                        t17 = $.$$mul(t16, t17);
                        t16 = vB.get$x();
                      case 12:
                        state0 = 0;
                        t16 = $.$$add(t17, t16);
                        t17 = vA.get$x();
                      case 13:
                        state0 = 0;
                        t17 = $.$$sub(t16, t17);
                        t16 = a.get$y();
                      case 14:
                        state0 = 0;
                        t22 = $.getInterceptor$JSNumber(wA);
                        t1.x = $.$$add(t17, t22.$mul(wA, t16));
                        t23 = ccp.get$rB().get$x();
                      case 15:
                        state0 = 0;
                        t23 = t14.$mul(wB, t23);
                        t25 = vB.get$y();
                      case 16:
                        state0 = 0;
                        t25 = $.$$add(t23, t25);
                        t23 = vA.get$y();
                      case 17:
                        state0 = 0;
                        t23 = $.$$sub(t25, t23);
                        t25 = a.get$x();
                      case 18:
                        state0 = 0;
                        t1.y = $.$$sub(t23, t22.$mul(wA, t25));
                        t29 = t1.x;
                      case 19:
                        state0 = 0;
                        t31 = t2.x;
                      case 20:
                        state0 = 0;
                        t31 = $.$$mul(t29, t31);
                        t29 = t1.y;
                      case 21:
                        state0 = 0;
                        t34 = t2.y;
                      case 22:
                        state0 = 0;
                        vt = $.$$add(t31, $.$$mul(t29, t34));
                        t31 = ccp.get$tangentMass();
                      case 23:
                        state0 = 0;
                        lambda = $.$$mul(t31, $.$$negate(vt));
                        t31 = ccp.get$normalImpulse();
                      case 24:
                        state0 = 0;
                        maxFriction = t11.$mul(friction, t31);
                        t31 = ccp.get$tangentImpulse();
                      case 25:
                        state0 = 0;
                        t31 = $.$$add(t31, lambda);
                        newImpulse = $.max($.$$negate(maxFriction), $.min(t31, maxFriction));
                        t39 = ccp.get$tangentImpulse();
                        if (typeof t39 !== "number")
                          throw $.iae(t39);
                        lambda = newImpulse - t39;
                        t39 = t2.x;
                      case 26:
                        state0 = 0;
                        Px = $.$$mul(t39, lambda);
                        t39 = t2.y;
                      case 27:
                        state0 = 0;
                        Py = $.$$mul(t39, lambda);
                        t39 = vA.get$x();
                      case 28:
                        state0 = 0;
                        t43 = $.getInterceptor$JSNumber(Px);
                        vA.set$x($.$$sub(t39, t43.$mul(Px, invMassA)));
                        t44 = vA.get$y();
                      case 29:
                        state0 = 0;
                        t46 = $.getInterceptor$JSNumber(Py);
                        vA.set$y($.$$sub(t44, t46.$mul(Py, invMassA)));
                        t47 = ccp.get$rA().get$x();
                      case 30:
                        state0 = 0;
                        t47 = $.$$mul(t47, Py);
                        t49 = ccp.get$rA().get$y();
                      case 31:
                        state0 = 0;
                        wA = t22.$sub(wA, t12.$mul(invIA, $.$$sub(t47, $.$$mul(t49, Px))));
                        t22 = vB.get$x();
                      case 32:
                        state0 = 0;
                        vB.set$x($.$$add(t22, t43.$mul(Px, invMassB)));
                        t52 = vB.get$y();
                      case 33:
                        state0 = 0;
                        vB.set$y($.$$add(t52, t46.$mul(Py, invMassB)));
                        t54 = ccp.get$rB().get$x();
                      case 34:
                        state0 = 0;
                        t54 = $.$$mul(t54, Py);
                        t56 = ccp.get$rB().get$y();
                      case 35:
                        state0 = 0;
                        wB = t14.$add(wB, t13.$mul(invIB, $.$$sub(t54, $.$$mul(t56, Px))));
                        ccp.set$tangentImpulse(newImpulse);
                        ++j;
                    }
                t11 = c.get$pointCount();
              case 36:
                state0 = 0;
                t15 = $.$$eq(t11, 1) === true;
                t16 = $.getInterceptor$JSNumber(wA);
                t17 = $.getInterceptor$JSNumber(wB);
                t18 = c.get$points();
              case 37:
                state0 = 0;
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 82:
              case 83:
              case 84:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
              case 114:
              case 115:
              case 116:
              case 117:
              case 118:
              case 119:
              case 120:
              case 121:
              case 122:
              case 123:
              case 124:
              case 125:
              case 126:
              case 127:
              case 128:
              case 129:
              case 130:
              case 131:
              case 132:
              case 133:
              case 134:
              case 135:
              case 136:
              case 137:
              case 138:
              case 139:
              case 140:
              case 141:
              case 142:
              case 143:
              case 144:
              case 145:
              case 146:
              case 147:
              case 148:
              case 149:
              case 150:
              case 151:
              case 152:
              case 153:
              case 154:
              case 155:
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
              case 161:
              case 162:
              case 163:
              case 164:
              case 165:
              case 166:
              case 167:
              case 168:
              case 169:
              case 170:
              case 171:
              case 172:
              case 173:
              case 174:
              case 175:
              case 176:
              case 177:
              case 178:
              case 179:
              case 180:
              case 181:
              case 182:
                if (state0 === 63 || state0 === 62 || state0 === 61 || state0 === 60 || state0 === 59 || state0 === 58 || state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 51 || state0 === 50 || state0 === 49 || state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 0 && t15)
                  switch (state0) {
                    case 0:
                      ccp = $.$$index(t18, 0);
                      a1 = ccp.get$rA();
                      t11 = t17.$negate(wB);
                      t14 = ccp.get$rB().get$y();
                    case 38:
                      state0 = 0;
                      t14 = $.$$mul(t11, t14);
                      t11 = vB.get$x();
                    case 39:
                      state0 = 0;
                      t11 = $.$$add(t14, t11);
                      t14 = vA.get$x();
                    case 40:
                      state0 = 0;
                      t14 = $.$$sub(t11, t14);
                      t11 = a1.get$y();
                    case 41:
                      state0 = 0;
                      t1.x = $.$$add(t14, t16.$mul(wA, t11));
                      t21 = ccp.get$rB().get$x();
                    case 42:
                      state0 = 0;
                      t21 = t17.$mul(wB, t21);
                      t23 = vB.get$y();
                    case 43:
                      state0 = 0;
                      t23 = $.$$add(t21, t23);
                      t21 = vA.get$y();
                    case 44:
                      state0 = 0;
                      t21 = $.$$sub(t23, t21);
                      t23 = a1.get$x();
                    case 45:
                      state0 = 0;
                      t1.y = $.$$sub(t21, t16.$mul(wA, t23));
                      b = c.get$normal();
                      t27 = t1.x;
                    case 46:
                      state0 = 0;
                      t29 = b.get$x();
                    case 47:
                      state0 = 0;
                      t29 = $.$$mul(t27, t29);
                      t27 = t1.y;
                    case 48:
                      state0 = 0;
                      t32 = b.get$y();
                    case 49:
                      state0 = 0;
                      vn = $.$$add(t29, $.$$mul(t27, t32));
                      t29 = ccp.get$normalMass();
                    case 50:
                      state0 = 0;
                      t29 = $.$$negate(t29);
                      t35 = ccp.get$velocityBias();
                    case 51:
                      state0 = 0;
                      lambda = $.$$mul(t29, $.$$sub(vn, t35));
                      t29 = ccp.get$normalImpulse();
                    case 52:
                      state0 = 0;
                      a = $.$$add(t29, lambda);
                      newImpulse = $.$$gt(a, 0) === true ? a : 0;
                      t11 = ccp.get$normalImpulse();
                    case 53:
                      state0 = 0;
                      lambda = $.$$sub(newImpulse, t11);
                      t11 = c.get$normal().get$x();
                    case 54:
                      state0 = 0;
                      Px = $.$$mul(t11, lambda);
                      t11 = c.get$normal().get$y();
                    case 55:
                      state0 = 0;
                      Py = $.$$mul(t11, lambda);
                      t11 = vA.get$x();
                    case 56:
                      state0 = 0;
                      t20 = $.getInterceptor$JSNumber(Px);
                      vA.set$x($.$$sub(t11, t20.$mul(Px, invMassA)));
                      t21 = vA.get$y();
                    case 57:
                      state0 = 0;
                      t23 = $.getInterceptor$JSNumber(Py);
                      vA.set$y($.$$sub(t21, t23.$mul(Py, invMassA)));
                      t24 = ccp.get$rA().get$x();
                    case 58:
                      state0 = 0;
                      t24 = $.$$mul(t24, Py);
                      t26 = ccp.get$rA().get$y();
                    case 59:
                      state0 = 0;
                      wA = t16.$sub(wA, t12.$mul(invIA, $.$$sub(t24, $.$$mul(t26, Px))));
                      t16 = vB.get$x();
                    case 60:
                      state0 = 0;
                      vB.set$x($.$$add(t16, t20.$mul(Px, invMassB)));
                      t29 = vB.get$y();
                    case 61:
                      state0 = 0;
                      vB.set$y($.$$add(t29, t23.$mul(Py, invMassB)));
                      t31 = ccp.get$rB().get$x();
                    case 62:
                      state0 = 0;
                      t31 = $.$$mul(t31, Py);
                      t33 = ccp.get$rB().get$y();
                    case 63:
                      state0 = 0;
                      wB = t17.$add(wB, t13.$mul(invIB, $.$$sub(t31, $.$$mul(t33, Px))));
                      ccp.set$normalImpulse(newImpulse);
                  }
                else
                  switch (state0) {
                    case 0:
                      cp1 = $.$$index(t18, 0);
                      t11 = c.get$points();
                    case 64:
                      state0 = 0;
                      cp2 = $.$$index(t11, 1);
                      a = $.Vector$(cp1.get$normalImpulse(), cp2.get$normalImpulse());
                      t11 = t17.$negate(wB);
                      t15 = cp1.get$rB().get$y();
                    case 65:
                      state0 = 0;
                      t15 = $.$$mul(t11, t15);
                      t11 = vB.get$x();
                    case 66:
                      state0 = 0;
                      t11 = $.$$add(t15, t11);
                      t15 = vA.get$x();
                    case 67:
                      state0 = 0;
                      t15 = $.$$sub(t11, t15);
                      t11 = cp1.get$rA().get$y();
                    case 68:
                      state0 = 0;
                      t9.x = $.$$add(t15, t16.$mul(wA, t11));
                      t22 = cp1.get$rB().get$x();
                    case 69:
                      state0 = 0;
                      t22 = t17.$mul(wB, t22);
                      t24 = vB.get$y();
                    case 70:
                      state0 = 0;
                      t24 = $.$$add(t22, t24);
                      t22 = vA.get$y();
                    case 71:
                      state0 = 0;
                      t22 = $.$$sub(t24, t22);
                      t24 = cp1.get$rA().get$x();
                    case 72:
                      state0 = 0;
                      t9.y = $.$$sub(t22, t16.$mul(wA, t24));
                      t28 = t17.$negate(wB);
                      t29 = cp2.get$rB().get$y();
                    case 73:
                      state0 = 0;
                      t29 = $.$$mul(t28, t29);
                      t28 = vB.get$x();
                    case 74:
                      state0 = 0;
                      t28 = $.$$add(t29, t28);
                      t29 = vA.get$x();
                    case 75:
                      state0 = 0;
                      t29 = $.$$sub(t28, t29);
                      t28 = cp2.get$rA().get$y();
                    case 76:
                      state0 = 0;
                      t10.x = $.$$add(t29, t16.$mul(wA, t28));
                      t34 = cp2.get$rB().get$x();
                    case 77:
                      state0 = 0;
                      t34 = t17.$mul(wB, t34);
                      t36 = vB.get$y();
                    case 78:
                      state0 = 0;
                      t36 = $.$$add(t34, t36);
                      t34 = vA.get$y();
                    case 79:
                      state0 = 0;
                      t34 = $.$$sub(t36, t34);
                      t36 = cp2.get$rA().get$x();
                    case 80:
                      state0 = 0;
                      t10.y = $.$$sub(t34, t16.$mul(wA, t36));
                      t40 = t9.x;
                    case 81:
                      state0 = 0;
                      t42 = c.get$normal().get$x();
                    case 82:
                      state0 = 0;
                      t42 = $.$$mul(t40, t42);
                      t40 = t9.y;
                    case 83:
                      state0 = 0;
                      t45 = c.get$normal().get$y();
                    case 84:
                      state0 = 0;
                      vn1 = $.$$add(t42, $.$$mul(t40, t45));
                      t42 = t10.x;
                    case 85:
                      state0 = 0;
                      t48 = c.get$normal().get$x();
                    case 86:
                      state0 = 0;
                      t48 = $.$$mul(t42, t48);
                      t42 = t10.y;
                    case 87:
                      state0 = 0;
                      t51 = c.get$normal().get$y();
                    case 88:
                      state0 = 0;
                      vn2 = $.$$add(t48, $.$$mul(t42, t51));
                      t48 = cp1.get$velocityBias();
                    case 89:
                      state0 = 0;
                      t48 = $.$$sub(vn1, t48);
                      t54 = cp2.get$velocityBias();
                    case 90:
                      state0 = 0;
                      b = $.Vector$(t48, $.$$sub(vn2, t54));
                      t48 = c.get$K().get$col1().get$x();
                    case 91:
                      state0 = 0;
                      t57 = a.x;
                    case 92:
                      state0 = 0;
                      t57 = $.$$mul(t48, t57);
                      t48 = c.get$K().get$col2().get$x();
                    case 93:
                      state0 = 0;
                      t60 = a.y;
                    case 94:
                      state0 = 0;
                      t8.x = $.$$add(t57, $.$$mul(t48, t60));
                      t62 = c.get$K().get$col1().get$y();
                    case 95:
                      state0 = 0;
                      t64 = a.x;
                    case 96:
                      state0 = 0;
                      t64 = $.$$mul(t62, t64);
                      t62 = c.get$K().get$col2().get$y();
                    case 97:
                      state0 = 0;
                      t67 = a.y;
                    case 98:
                      state0 = 0;
                      t8.y = $.$$add(t64, $.$$mul(t62, t67));
                      t69 = b.x;
                    case 99:
                      state0 = 0;
                      t71 = t8.x;
                    case 100:
                      state0 = 0;
                      b.x = $.$$sub(t69, t71);
                      t73 = b.y;
                    case 101:
                      state0 = 0;
                      t75 = t8.y;
                    case 102:
                      state0 = 0;
                      b.y = $.$$sub(t73, t75);
                    default:
                      $loop$1: {
                        switch (state0) {
                          case 0:
                            $.Matrix22_mulMatrixAndVectorToOut(c.get$normalMass(), b, t4);
                            t4.mulLocal$1(-1);
                            t11 = t4.get$x();
                          case 103:
                            state0 = 0;
                          case 104:
                            if (state0 === 104 || state0 === 0 && $.$$ge(t11, 0) === true)
                              switch (state0) {
                                case 0:
                                  t11 = t4.get$y();
                                case 104:
                                  state0 = 0;
                                  t15 = $.$$ge(t11, 0) === true;
                                  t11 = t15;
                              }
                            else
                              t11 = false;
                          default:
                            if (state0 === 120 || state0 === 119 || state0 === 118 || state0 === 117 || state0 === 116 || state0 === 115 || state0 === 114 || state0 === 113 || state0 === 112 || state0 === 111 || state0 === 110 || state0 === 109 || state0 === 108 || state0 === 107 || state0 === 106 || state0 === 105 || state0 === 0 && t11)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 105:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 106:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 107:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 108:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 109:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 110:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 111:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 112:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 113:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 114:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 115:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 116:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 117:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 118:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 119:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 120:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            t11 = cp1.get$normalMass();
                          case 121:
                            state0 = 0;
                            t11 = $.$$negate(t11);
                            t15 = b.x;
                          case 122:
                            state0 = 0;
                            t4.set$x($.$$mul(t11, t15));
                            t4.set$y(0);
                            t19 = c.get$K().get$col1().get$y();
                          case 123:
                            state0 = 0;
                            t21 = t4.get$x();
                          case 124:
                            state0 = 0;
                            t21 = $.$$mul(t19, t21);
                            t19 = b.y;
                          case 125:
                            state0 = 0;
                            vn2 = $.$$add(t21, t19);
                            t11 = t4.get$x();
                          case 126:
                            state0 = 0;
                          case 127:
                          case 128:
                          case 129:
                          case 130:
                          case 131:
                          case 132:
                          case 133:
                          case 134:
                          case 135:
                          case 136:
                          case 137:
                          case 138:
                          case 139:
                          case 140:
                          case 141:
                          case 142:
                            if (state0 === 142 || state0 === 141 || state0 === 140 || state0 === 139 || state0 === 138 || state0 === 137 || state0 === 136 || state0 === 135 || state0 === 134 || state0 === 133 || state0 === 132 || state0 === 131 || state0 === 130 || state0 === 129 || state0 === 128 || state0 === 127 || state0 === 0 && $.$$ge(t11, 0) === true && $.$$ge(vn2, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 127:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 128:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 129:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 130:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 131:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 132:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 133:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 134:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 135:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 136:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 137:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 138:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 139:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 140:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 141:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 142:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            t4.set$x(0);
                            t11 = cp2.get$normalMass();
                          case 143:
                            state0 = 0;
                            t11 = $.$$negate(t11);
                            t15 = b.y;
                          case 144:
                            state0 = 0;
                            t4.set$y($.$$mul(t11, t15));
                            t19 = c.get$K().get$col2().get$x();
                          case 145:
                            state0 = 0;
                            t21 = t4.get$y();
                          case 146:
                            state0 = 0;
                            t21 = $.$$mul(t19, t21);
                            t19 = b.x;
                          case 147:
                            state0 = 0;
                            vn1 = $.$$add(t21, t19);
                            t11 = t4.get$y();
                          case 148:
                            state0 = 0;
                          case 149:
                          case 150:
                          case 151:
                          case 152:
                          case 153:
                          case 154:
                          case 155:
                          case 156:
                          case 157:
                          case 158:
                          case 159:
                          case 160:
                          case 161:
                          case 162:
                          case 163:
                          case 164:
                            if (state0 === 164 || state0 === 163 || state0 === 162 || state0 === 161 || state0 === 160 || state0 === 159 || state0 === 158 || state0 === 157 || state0 === 156 || state0 === 155 || state0 === 154 || state0 === 153 || state0 === 152 || state0 === 151 || state0 === 150 || state0 === 149 || state0 === 0 && $.$$ge(t11, 0) === true && $.$$ge(vn1, 0) === true)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 149:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 150:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 151:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 152:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 153:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 154:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 155:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 156:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 157:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 158:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 159:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 160:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 161:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 162:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 163:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 164:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            t4.set$x(0);
                            t4.set$y(0);
                            vn1 = b.x;
                          case 165:
                            state0 = 0;
                            vn2 = b.y;
                          case 166:
                            state0 = 0;
                            if ($.$$ge(vn1, 0) === true)
                              t11 = $.$$ge(vn2, 0) === true;
                            else
                              t11 = false;
                          case 167:
                          case 168:
                          case 169:
                          case 170:
                          case 171:
                          case 172:
                          case 173:
                          case 174:
                          case 175:
                          case 176:
                          case 177:
                          case 178:
                          case 179:
                          case 180:
                          case 181:
                          case 182:
                            if (state0 === 182 || state0 === 181 || state0 === 180 || state0 === 179 || state0 === 178 || state0 === 177 || state0 === 176 || state0 === 175 || state0 === 174 || state0 === 173 || state0 === 172 || state0 === 171 || state0 === 170 || state0 === 169 || state0 === 168 || state0 === 167 || state0 === 0 && t11)
                              switch (state0) {
                                case 0:
                                  t3.setFrom$1(t4).subLocal$1(a);
                                  t5.setFrom$1(c.get$normal()).mulLocal$1(t3.x);
                                  t6.setFrom$1(c.get$normal()).mulLocal$1(t3.y);
                                  t7.setFrom$1(t5).addLocal$1(t6);
                                  t8.setFrom$1(t7).mulLocal$1(invMassA);
                                  vA.subLocal$1(t8);
                                  t8.setFrom$1(t7).mulLocal$1(invMassB);
                                  vB.addLocal$1(t8);
                                  t11 = cp1.get$rA();
                                  t14 = t11.get$x();
                                case 167:
                                  state0 = 0;
                                  t18 = t5.y;
                                case 168:
                                  state0 = 0;
                                  t18 = $.$$mul(t14, t18);
                                  t11 = t11.get$y();
                                case 169:
                                  state0 = 0;
                                  t20 = t5.x;
                                case 170:
                                  state0 = 0;
                                  t18 = $.$$sub(t18, $.$$mul(t11, t20));
                                  t22 = cp2.get$rA();
                                  t23 = t22.get$x();
                                case 171:
                                  state0 = 0;
                                  t25 = t6.y;
                                case 172:
                                  state0 = 0;
                                  t25 = $.$$mul(t23, t25);
                                  t22 = t22.get$y();
                                case 173:
                                  state0 = 0;
                                  t27 = t6.x;
                                case 174:
                                  state0 = 0;
                                  wA = t16.$sub(wA, t12.$mul(invIA, $.$$add(t18, $.$$sub(t25, $.$$mul(t22, t27)))));
                                  t16 = cp1.get$rB();
                                  t29 = t16.get$x();
                                case 175:
                                  state0 = 0;
                                  t31 = t5.y;
                                case 176:
                                  state0 = 0;
                                  t31 = $.$$mul(t29, t31);
                                  t16 = t16.get$y();
                                case 177:
                                  state0 = 0;
                                  t33 = t5.x;
                                case 178:
                                  state0 = 0;
                                  t31 = $.$$sub(t31, $.$$mul(t16, t33));
                                  t35 = cp2.get$rB();
                                  t36 = t35.get$x();
                                case 179:
                                  state0 = 0;
                                  t38 = t6.y;
                                case 180:
                                  state0 = 0;
                                  t38 = $.$$mul(t36, t38);
                                  t35 = t35.get$y();
                                case 181:
                                  state0 = 0;
                                  t40 = t6.x;
                                case 182:
                                  state0 = 0;
                                  wB = t17.$add(wB, t13.$mul(invIB, $.$$add(t31, $.$$sub(t38, $.$$mul(t35, t40)))));
                                  cp1.set$normalImpulse(t4.get$x());
                                  cp2.set$normalImpulse(t4.get$y());
                                  break $loop$1;
                              }
                            break $loop$1;
                        }
                      }
                  }
                bodyA.get$linearVelocity().setFrom$1(vA);
                bodyA.set$angularVelocity(wA);
                bodyB.get$linearVelocity().setFrom$1(vB);
                bodyB.set$angularVelocity(wB);
                ++i;
            }
    }
  },
  storeImpulses$0: function() {
    var i, t1, c, m, j;
    for (i = 0; $.CONSTANT5.$lt(i, this.constraintCount); ++i) {
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      c = t1[i];
      m = c.get$manifold();
      for (j = 0; $.CONSTANT5.$lt(j, c.get$pointCount()); ++j) {
        t1 = $.$$index(c.get$points(), j).get$normalImpulse();
        $.$$index(m.get$points(), j).set$normalImpulse(t1);
        t1 = $.$$index(c.get$points(), j).get$tangentImpulse();
        $.$$index(m.get$points(), j).set$tangentImpulse(t1);
      }
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, t2, t3, t4, psm, normal, point, minSeparation, i, t5, c, bodyA, bodyB, t7, invMassA, invIA, t10, invMassB, invIB, j, t6, separation, C, t8, t12, t14, rnA, rnB, K, impulse, t9, t11, t16, t18, t20, t23;
    t1 = this.P;
    t2 = this.temp1;
    t3 = this.rA;
    t4 = this.rB;
    psm = this.psolver;
    normal = psm.normal;
    point = psm.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t5 = this.constraintCount;
      if (typeof t5 !== "number")
        return this.solvePositionConstraints$1$bailout(1, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5);
      if (!(i < t5))
        break;
      t5 = this.constraints;
      if (i >= t5.length)
        throw $.ioore(i);
      c = t5[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      t5 = bodyA.get$mass();
      t7 = bodyA.get$invMass();
      if (typeof t5 !== "number")
        return this.solvePositionConstraints$1$bailout(2, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5, c, bodyB, bodyA);
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(3, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5, c, bodyB, bodyA, t7);
      invMassA = t5 * t7;
      t7 = bodyA.get$invInertia();
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(5, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, t5, invMassA, t7);
      invIA = t5 * t7;
      t7 = bodyB.get$mass();
      t10 = bodyB.get$invMass();
      if (typeof t7 !== "number")
        return this.solvePositionConstraints$1$bailout(6, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, 0, invMassA, t7, invIA);
      if (typeof t10 !== "number")
        return this.solvePositionConstraints$1$bailout(7, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, 0, invMassA, t7, invIA, t10);
      invMassB = t7 * t10;
      t10 = bodyB.get$invInertia();
      if (typeof t10 !== "number")
        return this.solvePositionConstraints$1$bailout(9, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, 0, c, bodyB, bodyA, 0, invMassA, 0, invIA, t7, invMassB, t10);
      invIB = t7 * t10;
      t5 = invMassA + invMassB;
      j = 0;
      while (true) {
        t6 = c.get$pointCount();
        if (typeof t6 !== "number")
          return this.solvePositionConstraints$1$bailout(10, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4);
        if (!(j < t6))
          break;
        psm.initialize$2(c, j);
        separation = psm.separation;
        if (typeof separation !== "number")
          return this.solvePositionConstraints$1$bailout(11, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, 0, $.CONSTANT4, separation);
        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
        minSeparation = $.min(minSeparation, separation);
        if (minSeparation !== (minSeparation | 0))
          return this.solvePositionConstraints$1$bailout(12, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, 0, $.CONSTANT4, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t8 = t3.x;
        t10 = normal.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(13, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t8, invMassB, 0, invIB, j, 0, $.CONSTANT4, 0, C);
        if (typeof t10 !== "number")
          return this.solvePositionConstraints$1$bailout(14, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t8, invMassB, t10, invIB, j, 0, $.CONSTANT4, 0, C);
        t8 *= t10;
        t12 = t3.y;
        t14 = normal.x;
        if (typeof t12 !== "number")
          return this.solvePositionConstraints$1$bailout(15, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t12, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C);
        if (typeof t14 !== "number")
          return this.solvePositionConstraints$1$bailout(16, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, t12, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C, t14);
        rnA = t8 - t12 * t14;
        t8 = t4.x;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(17, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C, 0, rnA);
        t10 = t8 * t10;
        t8 = t4.y;
        if (typeof t8 !== "number")
          return this.solvePositionConstraints$1$bailout(19, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, t8, invIB, j, 0, $.CONSTANT4, 0, C, 0, rnA, t10);
        rnB = t10 - t8 * t14;
        K = t5 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.setFrom$1(normal).mulLocal$1(impulse);
        t2.setFrom$1(t1).mulLocal$1(invMassA);
        bodyA.get$sweep().get$center().subLocal$1(t2);
        t6 = bodyA.get$sweep();
        t7 = t6.get$angle();
        t9 = t3.x;
        t11 = t1.y;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(23, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, 0, invIB, j, t6, $.CONSTANT4);
        if (typeof t11 !== "number")
          return this.solvePositionConstraints$1$bailout(24, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, t11, invIB, j, t6, $.CONSTANT4);
        t11 = t9 * t11;
        t9 = t3.y;
        t14 = t1.x;
        if (typeof t9 !== "number")
          return this.solvePositionConstraints$1$bailout(25, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, t11, invIB, j, t6, $.CONSTANT4);
        if (typeof t14 !== "number")
          return this.solvePositionConstraints$1$bailout(26, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, t9, invMassB, t11, invIB, j, t6, $.CONSTANT4, 0, 0, t14);
        if (typeof t7 !== "number")
          return this.solvePositionConstraints$1$bailout(22, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, t7, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4);
        t6.set$angle(t7 - invIA * (t11 - t9 * t14));
        bodyA.synchronizeTransform$0();
        t2.setFrom$1(t1).mulLocal$1(invMassB);
        bodyB.get$sweep().get$center().addLocal$1(t2);
        t6 = bodyB.get$sweep();
        t16 = t6.get$angle();
        t18 = t4.x;
        t20 = t1.y;
        if (typeof t18 !== "number")
          return this.solvePositionConstraints$1$bailout(28, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t16, t18);
        if (typeof t20 !== "number")
          return this.solvePositionConstraints$1$bailout(29, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, t20, t16, t18);
        t20 = t18 * t20;
        t18 = t4.y;
        t23 = t1.x;
        if (typeof t18 !== "number")
          return this.solvePositionConstraints$1$bailout(30, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, t20, t16, t18);
        if (typeof t23 !== "number")
          return this.solvePositionConstraints$1$bailout(31, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, t20, t16, t18, t23);
        if (typeof t16 !== "number")
          return this.solvePositionConstraints$1$bailout(27, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, $.CONSTANT4, c, bodyB, bodyA, $.CONSTANT4, invMassA, 0, invIA, 0, invMassB, 0, invIB, j, t6, $.CONSTANT4, 0, 0, 0, 0, 0, 0, t16);
        t6.set$angle(t16 + invIB * (t20 - t18 * t23));
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solvePositionConstraints$1$bailout: function(state0, baumgarte, t4, psm, normal, t1, t2, minSeparation, t3, i, point, t5, c, bodyB, bodyA, t7, invMassA, t9, invIA, t11, invMassB, t13, invIB, j, t8, t6, separation, C, t16, rnA, t19, t22, t18, t20, t25) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp1;
        t3 = this.rA;
        t4 = this.rB;
        psm = this.psolver;
        normal = psm.normal;
        point = psm.point;
        minSeparation = 0;
        i = 0;
      default:
        var t10, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t5 = this.constraintCount;
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t5))
                  break L0;
                t5 = this.constraints;
                if (i >= t5.length)
                  throw $.ioore(i);
                c = t5[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                t5 = bodyA.get$mass();
              case 2:
                state0 = 0;
                t7 = bodyA.get$invMass();
              case 3:
                state0 = 0;
                invMassA = $.$$mul(t5, t7);
                t7 = bodyA.get$mass();
              case 4:
                state0 = 0;
                t9 = bodyA.get$invInertia();
              case 5:
                state0 = 0;
                invIA = $.$$mul(t7, t9);
                t9 = bodyB.get$mass();
              case 6:
                state0 = 0;
                t11 = bodyB.get$invMass();
              case 7:
                state0 = 0;
                invMassB = $.$$mul(t9, t11);
                t11 = bodyB.get$mass();
              case 8:
                state0 = 0;
                t13 = bodyB.get$invInertia();
              case 9:
                state0 = 0;
                invIB = $.$$mul(t11, t13);
                t5 = $.getInterceptor$JSNumber(invIA);
                t6 = $.getInterceptor$JSNumber(invIB);
                t7 = $.getInterceptor$JSNumber(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t8 = c.get$pointCount();
                      case 10:
                        state0 = 0;
                        if (!$.CONSTANT5.$lt(j, t8))
                          break L1;
                        psm.initialize$2(c, j);
                        separation = psm.separation;
                      case 11:
                        state0 = 0;
                        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
                        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
                        minSeparation = $.min(minSeparation, separation);
                      case 12:
                        state0 = 0;
                        t10 = $.$$add(separation, 0.005);
                        if (typeof t10 !== "number")
                          throw $.iae(t10);
                        C = $.max(-0.2, $.min(baumgarte * t10, 0));
                        t11 = t3.x;
                      case 13:
                        state0 = 0;
                        t13 = normal.y;
                      case 14:
                        state0 = 0;
                        t13 = $.$$mul(t11, t13);
                        t11 = t3.y;
                      case 15:
                        state0 = 0;
                        t16 = normal.x;
                      case 16:
                        state0 = 0;
                        rnA = $.$$sub(t13, $.$$mul(t11, t16));
                        t13 = t4.x;
                      case 17:
                        state0 = 0;
                        t19 = normal.y;
                      case 18:
                        state0 = 0;
                        t19 = $.$$mul(t13, t19);
                        t13 = t4.y;
                      case 19:
                        state0 = 0;
                        t22 = normal.x;
                      case 20:
                        state0 = 0;
                        rnB = $.$$sub(t19, $.$$mul(t13, t22));
                        K = $.$$add($.$$add(t7.$add(invMassA, invMassB), $.$$mul(t5.$mul(invIA, rnA), rnA)), $.$$mul(t6.$mul(invIB, rnB), rnB));
                      case 21:
                        if (state0 === 21 || state0 === 0 && $.$$gt(K, 0) === true)
                          switch (state0) {
                            case 0:
                              if (typeof K !== "number")
                                throw $.iae(K);
                              t8 = -C / K;
                            case 21:
                              state0 = 0;
                              impulse = t8;
                          }
                        else
                          impulse = 0;
                        t1.setFrom$1(normal).mulLocal$1(impulse);
                        t2.setFrom$1(t1).mulLocal$1(invMassA);
                        bodyA.get$sweep().get$center().subLocal$1(t2);
                        t8 = bodyA.get$sweep();
                        t9 = t8.get$angle();
                      case 22:
                        state0 = 0;
                        t11 = t3.x;
                      case 23:
                        state0 = 0;
                        t13 = t1.y;
                      case 24:
                        state0 = 0;
                        t13 = $.$$mul(t11, t13);
                        t11 = t3.y;
                      case 25:
                        state0 = 0;
                        t16 = t1.x;
                      case 26:
                        state0 = 0;
                        t8.set$angle($.$$sub(t9, t5.$mul(invIA, $.$$sub(t13, $.$$mul(t11, t16)))));
                        bodyA.synchronizeTransform$0();
                        t2.setFrom$1(t1).mulLocal$1(invMassB);
                        bodyB.get$sweep().get$center().addLocal$1(t2);
                        t8 = bodyB.get$sweep();
                        t18 = t8.get$angle();
                      case 27:
                        state0 = 0;
                        t20 = t4.x;
                      case 28:
                        state0 = 0;
                        t22 = t1.y;
                      case 29:
                        state0 = 0;
                        t22 = $.$$mul(t20, t22);
                        t20 = t4.y;
                      case 30:
                        state0 = 0;
                        t25 = t1.x;
                      case 31:
                        state0 = 0;
                        t8.set$angle($.$$add(t18, t6.$mul(invIB, $.$$sub(t22, $.$$mul(t20, t25)))));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  ContactSolver$0: function() {
    var i, t1, t2;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i) {
      t2 = $.ContactConstraint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.PositionSolverManifold = {"": "Object;normal>,point>,separation>,pointA>,pointB>,temp,planePoint,clipPoint",
  initialize$2: function(cc, index) {
    var t1, t2, t3, t4, t5;
    switch (cc.get$type()) {
      case 0:
        t1 = cc.get$bodyA();
        t2 = cc.get$localPoint();
        t3 = this.pointA;
        t1.getWorldPointToOut$2(t2, t3);
        t2 = cc.get$bodyB();
        t1 = $.$$index(cc.get$points(), 0).get$localPoint();
        t4 = this.pointB;
        t2.getWorldPointToOut$2(t1, t4);
        t1 = $.$$gt($.MathBox_distanceSquared(t3, t4), 1.4208639999999999e-14);
        t2 = this.normal;
        if (t1 === true) {
          t2.setFrom$1(t4).subLocal$1(t3);
          t2.normalize$0();
        } else
          t2.setCoords$2(1, 0);
        this.point.setFrom$1(t3).addLocal$1(t4).mulLocal$1(0.5);
        t1 = this.temp;
        t1.setFrom$1(t4).subLocal$1(t3);
        t3 = this.normal;
        this.separation = $.$$sub($.$$add($.$$mul(t1.x, t3.x), $.$$mul(t1.y, t3.y)), cc.get$radius());
        break;
      case 1:
        t1 = cc.get$bodyA();
        t2 = cc.get$localNormal();
        t3 = this.normal;
        t1.getWorldVectorToOut$2(t2, t3);
        t2 = cc.get$bodyA();
        t1 = cc.get$localPoint();
        t4 = this.planePoint;
        t2.getWorldPointToOut$2(t1, t4);
        t1 = cc.get$bodyB();
        t2 = $.$$index(cc.get$points(), index).get$localPoint();
        t5 = this.clipPoint;
        t1.getWorldPointToOut$2(t2, t5);
        t2 = this.temp;
        t2.setFrom$1(t5).subLocal$1(t4);
        this.separation = $.$$sub($.$$add($.$$mul(t2.x, t3.x), $.$$mul(t2.y, t3.y)), cc.get$radius());
        this.point.setFrom$1(t5);
        break;
      case 2:
        t1 = cc.get$bodyB();
        t2 = cc.get$localNormal();
        t3 = this.normal;
        t1.getWorldVectorToOut$2(t2, t3);
        t2 = cc.get$bodyB();
        t1 = cc.get$localPoint();
        t4 = this.planePoint;
        t2.getWorldPointToOut$2(t1, t4);
        t1 = cc.get$bodyA();
        t2 = $.$$index(cc.get$points(), index).get$localPoint();
        t5 = this.clipPoint;
        t1.getWorldPointToOut$2(t2, t5);
        t2 = this.temp;
        t2.setFrom$1(t5).subLocal$1(t4);
        this.separation = $.$$sub($.$$add($.$$mul(t2.x, t3.x), $.$$mul(t2.y, t3.y)), cc.get$radius());
        this.point.setFrom$1(t5);
        t3.negateLocal$0();
        break;
    }
  }
};

$$.PolygonAndCircleContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Expect_equals(1, fA.get$type(), null);
    $.Expect_equals(0, fB.get$type(), null);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygonAndCircle$5(argManifold, this.fixtureA.get$shape(), xfA, this.fixtureB.get$shape(), xfB);
  }
};

$$.PolygonContact = {"": "Contact;flags,prev,next,edge1,edge2,fixtureA,fixtureB,manifold,toiCount,pool,_oldManifold",
  init$2: function(fA, fB) {
    $.Expect_equals(1, fA.get$type(), null);
    $.Expect_equals(1, fB.get$type(), null);
    $.Contact.prototype.init$2.call(this, fA, fB);
  },
  evaluate$3: function(argManifold, xfA, xfB) {
    this.pool.collision.collidePolygons$5(argManifold, this.fixtureA.get$shape(), xfA, this.fixtureB.get$shape(), xfB);
  }
};

$$.TimeOfImpactSolver = {"": "Object;constraints>,count=,toiBody,psm,rA>,rB>,P,temp",
  initialize$3: function(contacts, argCount, argToiBody) {
    var old, i, t1, t2, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp;
    if (typeof contacts !== "string" && (typeof contacts !== "object" || contacts === null || contacts.constructor !== Array && !contacts.$isJavaScriptIndexingBehavior))
      return this.initialize$3$bailout(1, contacts, argCount, argToiBody);
    this.count = argCount;
    this.toiBody = argToiBody;
    if ($.$$ge(this.count, this.constraints.length) === true) {
      old = this.constraints;
      this.constraints = $.List_List($.max(this.count, old.length * 2));
      $.CONSTANT0.setRange$3(this.constraints, 0, old.length, old);
      for (i = old.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = $.TimeOfImpactConstraint$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    for (i = 0; $.CONSTANT5.$lt(i, this.count); ++i) {
      if (i >= contacts.length)
        throw $.ioore(i);
      contact = contacts[i];
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.get$shape();
      shapeB = fixtureB.get$shape();
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      manifold = contact.get$manifold();
      t1 = this.constraints;
      if (i >= t1.length)
        throw $.ioore(i);
      constraint = t1[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      constraint.get$localNormal().setFrom$1(manifold.get$localNormal());
      constraint.get$localPoint().setFrom$1(manifold.get$localPoint());
      constraint.set$type(manifold.get$type());
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$$add(radiusA, radiusB));
      for (j = 0; $.CONSTANT5.$lt(j, constraint.get$pointCount()); ++j) {
        cp = $.$$index(manifold.get$points(), j);
        $.$$indexSet(constraint.get$localPoints(), j, cp.get$localPoint());
      }
    }
  },
  initialize$3$bailout: function(state0, contacts, argCount, argToiBody) {
    var old, i, t1, t2, contact, fixtureA, fixtureB, shapeA, shapeB, radiusA, radiusB, bodyA, bodyB, manifold, constraint, j, cp;
    this.count = argCount;
    this.toiBody = argToiBody;
    if ($.$$ge(this.count, this.constraints.length) === true) {
      old = this.constraints;
      this.constraints = $.List_List($.max(this.count, old.length * 2));
      $.CONSTANT0.setRange$3(this.constraints, 0, old.length, old);
      for (i = old.length; t1 = this.constraints, i < t1.length; ++i) {
        t2 = $.TimeOfImpactConstraint$();
        if (i >= t1.length)
          throw $.ioore(i);
        t1[i] = t2;
      }
    }
    for (t1 = $.getInterceptor$JSArrayJSString(contacts), i = 0; $.CONSTANT5.$lt(i, this.count); ++i) {
      contact = t1.$index(contacts, i);
      fixtureA = contact.get$fixtureA();
      fixtureB = contact.get$fixtureB();
      shapeA = fixtureA.get$shape();
      shapeB = fixtureB.get$shape();
      radiusA = shapeA.get$radius();
      radiusB = shapeB.get$radius();
      bodyA = fixtureA.get$body();
      bodyB = fixtureB.get$body();
      manifold = contact.get$manifold();
      t2 = this.constraints;
      if (i >= t2.length)
        throw $.ioore(i);
      constraint = t2[i];
      constraint.set$bodyA(bodyA);
      constraint.set$bodyB(bodyB);
      constraint.get$localNormal().setFrom$1(manifold.get$localNormal());
      constraint.get$localPoint().setFrom$1(manifold.get$localPoint());
      constraint.set$type(manifold.get$type());
      constraint.set$pointCount(manifold.get$pointCount());
      constraint.set$radius($.$$add(radiusA, radiusB));
      for (j = 0; $.CONSTANT5.$lt(j, constraint.get$pointCount()); ++j) {
        cp = $.$$index(manifold.get$points(), j);
        $.$$indexSet(constraint.get$localPoints(), j, cp.get$localPoint());
      }
    }
  },
  solve$1: function(baumgarte) {
    var t1, t2, t3, t4, t5, normal, point, minSeparation, i, t6, c, bodyA, bodyB, massA, massB, invMassA, invIA, invMassB, invIB, j, t7, separation, C, t9, t11, t13, t15, rnA, rnB, K, impulse, t8, t10, t12, t17, t19, t21, t24;
    t1 = this.P;
    t2 = this.temp;
    t3 = this.rA;
    t4 = this.rB;
    t5 = this.psm;
    normal = t5.normal;
    point = t5.point;
    minSeparation = 0;
    i = 0;
    while (true) {
      t6 = this.count;
      if (typeof t6 !== "number")
        return this.solve$1$bailout(1, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6);
      if (!(i < t6))
        break;
      t6 = this.constraints;
      if (i >= t6.length)
        throw $.ioore(i);
      c = t6[i];
      bodyA = c.get$bodyA();
      bodyB = c.get$bodyB();
      massA = bodyA.get$mass();
      if (typeof massA !== "number")
        return this.solve$1$bailout(2, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, 0, bodyA, bodyB, massA, c);
      massB = bodyB.get$mass();
      if (typeof massB !== "number")
        return this.solve$1$bailout(3, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, 0, bodyA, bodyB, massA, c, massB);
      if ($.$$eq(bodyA, this.toiBody) === true)
        massB = 0;
      else
        massA = 0;
      t6 = bodyA.get$invMass();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(4, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, massA, c, massB);
      invMassA = massA * t6;
      t6 = bodyA.get$invInertia();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(5, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, massA, c, massB, invMassA, $.CONSTANT4);
      invIA = massA * t6;
      t6 = bodyB.get$invMass();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(6, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, 0, c, massB, invMassA, 0, invIA);
      invMassB = massB * t6;
      t6 = bodyB.get$invInertia();
      if (typeof t6 !== "number")
        return this.solve$1$bailout(7, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, 0, c, massB, invMassA, 0, invIA, invMassB, $.CONSTANT4);
      invIB = massB * t6;
      t6 = invMassA + invMassB;
      j = 0;
      while (true) {
        t7 = c.get$pointCount();
        if (typeof t7 !== "number")
          return this.solve$1$bailout(8, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7);
        if (!(j < t7))
          break;
        t5.initialize$2(c, j);
        separation = t5.separation;
        if (typeof separation !== "number")
          return this.solve$1$bailout(9, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, separation);
        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
        minSeparation = $.min(minSeparation, separation);
        if (minSeparation !== (minSeparation | 0))
          return this.solve$1$bailout(10, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, separation);
        C = $.max(-0.2, $.min(baumgarte * (separation + 0.005), 0));
        t9 = t3.x;
        t11 = normal.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(11, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t9);
        if (typeof t11 !== "number")
          return this.solve$1$bailout(12, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t9, t11);
        t9 *= t11;
        t13 = t3.y;
        t15 = normal.x;
        if (typeof t13 !== "number")
          return this.solve$1$bailout(13, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t13, t9);
        if (typeof t15 !== "number")
          return this.solve$1$bailout(14, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, t13, t9, t15);
        rnA = t9 - t13 * t15;
        t9 = t4.x;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(15, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, 0, t9, 0, rnA);
        t11 = t9 * t11;
        t9 = t4.y;
        if (typeof t9 !== "number")
          return this.solve$1$bailout(17, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, 0, 0, C, 0, t9, 0, rnA, t11);
        rnB = t11 - t9 * t15;
        K = t6 + invIA * rnA * rnA + invIB * rnB * rnB;
        impulse = K > 0 ? -C / K : 0;
        t1.setFrom$1(normal).mulLocal$1(impulse);
        t2.setFrom$1(t1).mulLocal$1(invMassA);
        bodyA.get$sweep().get$center().subLocal$1(t2);
        t7 = bodyA.get$sweep();
        t8 = t7.get$angle();
        t10 = t3.x;
        t12 = t1.y;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(21, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10);
        if (typeof t12 !== "number")
          return this.solve$1$bailout(22, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10, t12);
        t12 = t10 * t12;
        t10 = t3.y;
        t15 = t1.x;
        if (typeof t10 !== "number")
          return this.solve$1$bailout(23, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10, t12);
        if (typeof t15 !== "number")
          return this.solve$1$bailout(24, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7, 0, 0, t10, t12, t15);
        if (typeof t8 !== "number")
          return this.solve$1$bailout(20, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, t8, $.CONSTANT4, invIB, j, t7);
        t7.set$angle(t8 - invIA * (t12 - t10 * t15));
        bodyA.synchronizeTransform$0();
        t2.setFrom$1(t1).mulLocal$1(invMassB);
        bodyB.get$sweep().get$center().addLocal$1(t2);
        t7 = bodyB.get$sweep();
        t17 = t7.get$angle();
        t19 = t4.x;
        t21 = t1.y;
        if (typeof t19 !== "number")
          return this.solve$1$bailout(26, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, 0, t17, t19);
        if (typeof t21 !== "number")
          return this.solve$1$bailout(27, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, t21, t17, t19);
        t21 = t19 * t21;
        t19 = t4.y;
        t24 = t1.x;
        if (typeof t19 !== "number")
          return this.solve$1$bailout(28, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, t21, t17, t19);
        if (typeof t24 !== "number")
          return this.solve$1$bailout(29, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, t21, t17, t19, t24);
        if (typeof t17 !== "number")
          return this.solve$1$bailout(25, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, $.CONSTANT4, bodyA, bodyB, 0, c, 0, invMassA, $.CONSTANT4, invIA, invMassB, 0, $.CONSTANT4, invIB, j, t7, 0, 0, 0, 0, 0, 0, 0, 0, t17);
        t7.set$angle(t17 + invIB * (t21 - t19 * t24));
        bodyB.synchronizeTransform$0();
        ++j;
      }
      ++i;
    }
    return minSeparation >= -0.0075;
  },
  solve$1$bailout: function(state0, baumgarte, t5, t4, normal, point, t1, t2, minSeparation, i, t3, t6, bodyA, bodyB, massA, c, massB, invMassA, t8, invIA, invMassB, t10, t7, invIB, j, t9, separation, C, t12, t14, t17, rnA, t20, t23, t19, t21, t26) {
    switch (state0) {
      case 0:
        t1 = this.P;
        t2 = this.temp;
        t3 = this.rA;
        t4 = this.rB;
        t5 = this.psm;
        normal = t5.normal;
        point = t5.point;
        minSeparation = 0;
        i = 0;
      default:
        var t11, rnB, K, impulse;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t6 = this.count;
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t6))
                  break L0;
                t6 = this.constraints;
                if (i >= t6.length)
                  throw $.ioore(i);
                c = t6[i];
                bodyA = c.get$bodyA();
                bodyB = c.get$bodyB();
                massA = bodyA.get$mass();
              case 2:
                state0 = 0;
                massB = bodyB.get$mass();
              case 3:
                state0 = 0;
                if ($.$$eq(bodyA, this.toiBody) === true)
                  massB = 0;
                else
                  massA = 0;
                t6 = bodyA.get$invMass();
              case 4:
                state0 = 0;
                t8 = $.getInterceptor$JSNumber(massA);
                invMassA = t8.$mul(massA, t6);
                t6 = bodyA.get$invInertia();
              case 5:
                state0 = 0;
                invIA = t8.$mul(massA, t6);
                t6 = bodyB.get$invMass();
              case 6:
                state0 = 0;
                t10 = $.getInterceptor$JSNumber(massB);
                invMassB = t10.$mul(massB, t6);
                t6 = bodyB.get$invInertia();
              case 7:
                state0 = 0;
                invIB = t10.$mul(massB, t6);
                t6 = $.getInterceptor$JSNumber(invIA);
                t7 = $.getInterceptor$JSNumber(invIB);
                t8 = $.getInterceptor$JSNumber(invMassA);
                j = 0;
              default:
                L1:
                  while (true)
                    switch (state0) {
                      case 0:
                        t9 = c.get$pointCount();
                      case 8:
                        state0 = 0;
                        if (!$.CONSTANT5.$lt(j, t9))
                          break L1;
                        t5.initialize$2(c, j);
                        separation = t5.separation;
                      case 9:
                        state0 = 0;
                        t3.setFrom$1(point).subLocal$1(bodyA.get$sweep().get$center());
                        t4.setFrom$1(point).subLocal$1(bodyB.get$sweep().get$center());
                        minSeparation = $.min(minSeparation, separation);
                      case 10:
                        state0 = 0;
                        t11 = $.$$add(separation, 0.005);
                        if (typeof t11 !== "number")
                          throw $.iae(t11);
                        C = $.max(-0.2, $.min(baumgarte * t11, 0));
                        t12 = t3.x;
                      case 11:
                        state0 = 0;
                        t14 = normal.y;
                      case 12:
                        state0 = 0;
                        t14 = $.$$mul(t12, t14);
                        t12 = t3.y;
                      case 13:
                        state0 = 0;
                        t17 = normal.x;
                      case 14:
                        state0 = 0;
                        rnA = $.$$sub(t14, $.$$mul(t12, t17));
                        t14 = t4.x;
                      case 15:
                        state0 = 0;
                        t20 = normal.y;
                      case 16:
                        state0 = 0;
                        t20 = $.$$mul(t14, t20);
                        t14 = t4.y;
                      case 17:
                        state0 = 0;
                        t23 = normal.x;
                      case 18:
                        state0 = 0;
                        rnB = $.$$sub(t20, $.$$mul(t14, t23));
                        K = $.$$add($.$$add(t8.$add(invMassA, invMassB), $.$$mul(t6.$mul(invIA, rnA), rnA)), $.$$mul(t7.$mul(invIB, rnB), rnB));
                      case 19:
                        if (state0 === 19 || state0 === 0 && $.$$gt(K, 0) === true)
                          switch (state0) {
                            case 0:
                              if (typeof K !== "number")
                                throw $.iae(K);
                              t9 = -C / K;
                            case 19:
                              state0 = 0;
                              impulse = t9;
                          }
                        else
                          impulse = 0;
                        t1.setFrom$1(normal).mulLocal$1(impulse);
                        t2.setFrom$1(t1).mulLocal$1(invMassA);
                        bodyA.get$sweep().get$center().subLocal$1(t2);
                        t9 = bodyA.get$sweep();
                        t10 = t9.get$angle();
                      case 20:
                        state0 = 0;
                        t12 = t3.x;
                      case 21:
                        state0 = 0;
                        t14 = t1.y;
                      case 22:
                        state0 = 0;
                        t14 = $.$$mul(t12, t14);
                        t12 = t3.y;
                      case 23:
                        state0 = 0;
                        t17 = t1.x;
                      case 24:
                        state0 = 0;
                        t9.set$angle($.$$sub(t10, t6.$mul(invIA, $.$$sub(t14, $.$$mul(t12, t17)))));
                        bodyA.synchronizeTransform$0();
                        t2.setFrom$1(t1).mulLocal$1(invMassB);
                        bodyB.get$sweep().get$center().addLocal$1(t2);
                        t9 = bodyB.get$sweep();
                        t19 = t9.get$angle();
                      case 25:
                        state0 = 0;
                        t21 = t4.x;
                      case 26:
                        state0 = 0;
                        t23 = t1.y;
                      case 27:
                        state0 = 0;
                        t23 = $.$$mul(t21, t23);
                        t21 = t4.y;
                      case 28:
                        state0 = 0;
                        t26 = t1.x;
                      case 29:
                        state0 = 0;
                        t9.set$angle($.$$add(t19, t7.$mul(invIB, $.$$sub(t23, $.$$mul(t21, t26)))));
                        bodyB.synchronizeTransform$0();
                        ++j;
                    }
                ++i;
            }
        return minSeparation >= -0.0075;
    }
  },
  TimeOfImpactSolver$0: function() {
    var i, t1, t2;
    for (i = 0; t1 = this.constraints, i < t1.length; ++i) {
      t2 = $.TimeOfImpactConstraint$();
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.TimeOfImpactSolverManifold = {"": "Object;normal>,point>,separation>,pointA>,pointB>,temp,planePoint,clipPoint",
  initialize$2: function(cc, index) {
    var t1, t2, t3, t4;
    switch (cc.get$type()) {
      case 0:
        t1 = this.pointA;
        t1.setFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t2 = this.pointB;
        t2.setFrom$1(cc.get$bodyB().getWorldPoint$1($.$$index(cc.get$localPoints(), 0)));
        t3 = $.$$gt($.MathBox_distanceSquared(t1, t2), 1.4208639999999999e-14);
        t4 = this.normal;
        if (t3 === true) {
          t4.setFrom$1(t2).subLocal$1(t1);
          t4.normalize$0();
        } else
          t4.setCoords$2(1, 0);
        this.point.setFrom$1(t1).addLocal$1(t2).mulLocal$1(0.5);
        t3 = this.temp;
        t3.setFrom$1(t2).subLocal$1(t1);
        t1 = this.normal;
        this.separation = $.$$sub($.$$add($.$$mul(t3.x, t1.x), $.$$mul(t3.y, t1.y)), cc.get$radius());
        break;
      case 1:
        t1 = this.normal;
        t1.setFrom$1(cc.get$bodyA().getWorldVector$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.setFrom$1(cc.get$bodyA().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t3.setFrom$1(cc.get$bodyB().getWorldPoint$1($.$$index(cc.get$localPoints(), index)));
        t4 = this.temp;
        t4.setFrom$1(t3).subLocal$1(t2);
        this.separation = $.$$sub($.$$add($.$$mul(t4.x, t1.x), $.$$mul(t4.y, t1.y)), cc.get$radius());
        this.point.setFrom$1(t3);
        break;
      case 2:
        t1 = this.normal;
        t1.setFrom$1(cc.get$bodyB().getWorldVector$1(cc.get$localNormal()));
        t2 = this.planePoint;
        t2.setFrom$1(cc.get$bodyB().getWorldPoint$1(cc.get$localPoint()));
        t3 = this.clipPoint;
        t3.setFrom$1(cc.get$bodyA().getWorldPoint$1($.$$index(cc.get$localPoints(), index)));
        t4 = this.temp;
        t4.setFrom$1(t3).subLocal$1(t2);
        this.separation = $.$$sub($.$$add($.$$mul(t4.x, t1.x), $.$$mul(t4.y, t1.y)), cc.get$radius());
        this.point.setFrom$1(t3);
        t1.negateLocal$0();
        break;
    }
  }
};

$$.TimeOfImpactConstraint = {"": "Object;localPoints>,localNormal>,localPoint>,type=,radius=,pointCount=,bodyA=,bodyB=",
  setFrom$1: function(argOther) {
    var t1, i, t2, t3;
    for (t1 = this.localPoints, i = 0; i < t1.length; ++i) {
      t2 = t1[i];
      t3 = argOther.get$localPoints();
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
        return this.setFrom$1$bailout(1, argOther, t2, t3, t1, i);
      if (i >= t3.length)
        throw $.ioore(i);
      t2.setFrom$1(t3[i]);
    }
    this.localNormal.setFrom$1(argOther.get$localNormal());
    this.localPoint.setFrom$1(argOther.get$localPoint());
    this.type = argOther.get$type();
    this.radius = argOther.get$radius();
    this.pointCount = argOther.get$pointCount();
    this.bodyA = argOther.get$bodyA();
    this.bodyB = argOther.get$bodyB();
  },
  setFrom$1$bailout: function(state0, argOther, t2, t3, t1, i) {
    switch (state0) {
      case 0:
        t1 = this.localPoints;
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!(i < t1.length))
                  break L0;
                t2 = t1[i];
                t3 = argOther.get$localPoints();
              case 1:
                state0 = 0;
                t2.setFrom$1($.$$index(t3, i));
                ++i;
            }
        this.localNormal.setFrom$1(argOther.get$localNormal());
        this.localPoint.setFrom$1(argOther.get$localPoint());
        this.type = argOther.get$type();
        this.radius = argOther.get$radius();
        this.pointCount = argOther.get$pointCount();
        this.bodyA = argOther.get$bodyA();
        this.bodyB = argOther.get$bodyB();
    }
  },
  TimeOfImpactConstraint$0: function() {
    var t1, i, t2;
    for (t1 = this.localPoints, i = 0; i < t1.length; ++i) {
      t2 = $.Vector$(0, 0);
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i] = t2;
    }
  }
};

$$.Joint = {"": "Object;type=,_prev<,_liblib2$_next=,edgeA>,edgeB>,bodyA=,bodyB=,islandFlag=,collideConnected>,userData=",
  get$active: function() {
    return this.bodyA.get$active() === true && this.bodyB.get$active() === true;
  },
  initVelocityConstraints$1: function(step) {
  },
  solveVelocityConstraints$1: function(step) {
  },
  solvePositionConstraints$1: function(baumgarte) {
  }
};

$$.JointEdge = {"": "Object;other=,joint=,prev=,next="};

$$.JointDef = {"": "Object;type=,userData=,bodyA=,bodyB=,collideConnected>"};

$$.ConstantVolumeJoint = {"": "Joint;bodies>,targetLengths,targetVolume,normals>,step,_impulse,_world,distanceJoints,frequencyHz>,dampingRatio>,type,_prev,_liblib2$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  step$3: function(arg0, arg1, arg2) {
    return this.step.call$3(arg0, arg1, arg2);
  },
  get$area: function() {
    var t1, t2, t3, t4, t5, t6, result, i, i0;
    t1 = this.bodies;
    t2 = $.getInterceptor$JSArrayJSString(t1);
    t3 = $.$$mul(t2.$index(t1, $.$$sub(t2.get$length(t1), 1)).get$worldCenter().get$x(), $.$$index(this.bodies, 0).get$worldCenter().get$y());
    t4 = $.$$index(this.bodies, 0).get$worldCenter().get$x();
    t5 = this.bodies;
    t6 = $.getInterceptor$JSArrayJSString(t5);
    t3 = $.$$sub(t3, $.$$mul(t4, t6.$index(t5, $.$$sub(t6.get$length(t5), 1)).get$worldCenter().get$y()));
    if (typeof t3 !== "number")
      throw $.iae(t3);
    result = 0 + t3;
    for (i = 0; $.CONSTANT5.$lt(i, $.$$sub($.length(this.bodies), 1)); i = i0) {
      i0 = i + 1;
      t1 = $.$$sub($.$$mul($.$$index(this.bodies, i).get$worldCenter().get$x(), $.$$index(this.bodies, i0).get$worldCenter().get$y()), $.$$mul($.$$index(this.bodies, i0).get$worldCenter().get$x(), $.$$index(this.bodies, i).get$worldCenter().get$y()));
      if (typeof t1 !== "number")
        throw $.iae(t1);
      result += t1;
    }
    return result * 0.5;
  },
  constrainEdges$1: function(argStep) {
    var perimeter, i, next, dx, dy, t1, t2, dist, delta, deltaArea, toExtrude, done, norm;
    for (perimeter = 0, i = 0; $.CONSTANT5.$lt(i, $.length(this.bodies)); ++i) {
      next = i === $.$$sub($.length(this.bodies), 1) ? 0 : i + 1;
      dx = $.$$sub($.$$index(this.bodies, next).get$worldCenter().get$x(), $.$$index(this.bodies, i).get$worldCenter().get$x());
      dy = $.$$sub($.$$index(this.bodies, next).get$worldCenter().get$y(), $.$$index(this.bodies, i).get$worldCenter().get$y());
      t1 = $.getInterceptor$JSNumber(dx);
      t2 = $.getInterceptor$JSNumber(dy);
      dist = Math.sqrt($.checkNum($.$$add(t1.$mul(dx, dx), t2.$mul(dy, dy))));
      if (dist < 1.192e-7)
        dist = 1;
      t2 = t2.$div(dy, dist);
      $.$$index(this.normals, i).set$x(t2);
      t2 = $.$$div(t1.$negate(dx), dist);
      $.$$index(this.normals, i).set$y(t2);
      perimeter += dist;
    }
    delta = $.Vector$(0, 0);
    deltaArea = $.$$sub(this.targetVolume, this.get$area());
    if (typeof deltaArea !== "number")
      throw $.iae(deltaArea);
    toExtrude = 0.5 * deltaArea / perimeter;
    for (done = true, i = 0; $.CONSTANT5.$lt(i, $.length(this.bodies)); ++i) {
      next = i === $.$$sub($.length(this.bodies), 1) ? 0 : i + 1;
      t1 = $.$$add($.$$index(this.normals, i).get$x(), $.$$index(this.normals, next).get$x());
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = $.$$add($.$$index(this.normals, i).get$y(), $.$$index(this.normals, next).get$y());
      if (typeof t2 !== "number")
        throw $.iae(t2);
      delta.setCoords$2(toExtrude * t1, toExtrude * t2);
      norm = delta.get$length();
      t1 = $.getInterceptor$JSNumber(norm);
      if (t1.$gt(norm, 0.2) === true) {
        if (typeof norm !== "number")
          throw $.iae(norm);
        delta.mulLocal$1(0.2 / norm);
      }
      if (t1.$gt(norm, 0.005) === true)
        done = false;
      t1 = $.$$index(this.bodies, next).get$sweep().get$center();
      t1.set$x($.$$add(t1.get$x(), delta.x));
      t1 = $.$$index(this.bodies, next).get$sweep().get$center();
      t1.set$y($.$$add(t1.get$y(), delta.y));
      $.$$index(this.bodies, next).synchronizeTransform$0();
    }
    return done;
  },
  initVelocityConstraints$1: function(argStep) {
    var d, i, t1, prev, next, t2, t4, t3, t6, t8, t10, t12, t13, t16, t17, t19, t21, t23, t25, t26;
    this.step = argStep;
    d = $.List_List($.length(this.bodies));
    i = 0;
    while (true) {
      t1 = $.length(this.bodies);
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(1, d, i, t1);
      if (!(i < t1))
        break;
      t1 = $.Vector$(0, 0);
      if (i >= d.length)
        throw $.ioore(i);
      d[i] = t1;
      ++i;
    }
    i = 0;
    while (true) {
      t1 = $.length(this.bodies);
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(2, d, i, t1);
      if (!(i < t1))
        break;
      if (i === 0) {
        t1 = $.length(this.bodies);
        if (typeof t1 !== "number")
          return this.initVelocityConstraints$1$bailout1(3, d, i, t1);
        prev = t1 - 1;
      } else
        prev = i - 1;
      t1 = $.length(this.bodies);
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(4, d, i, t1, prev);
      next = i === t1 - 1 ? 0 : i + 1;
      if (i >= d.length)
        throw $.ioore(i);
      t1 = d[i];
      t2 = this.bodies;
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
        return this.initVelocityConstraints$1$bailout1(5, d, i, t1, prev, t2, next);
      if (next >= t2.length)
        throw $.ioore(next);
      t1.setFrom$1(t2[next].get$worldCenter());
      if (i >= d.length)
        throw $.ioore(i);
      t1 = d[i];
      t4 = this.bodies;
      if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior))
        return this.initVelocityConstraints$1$bailout1(6, d, i, t1, prev, 0, 0, t4);
      if (prev !== (prev | 0))
        throw $.iae(prev);
      if (prev < 0 || prev >= t4.length)
        throw $.ioore(prev);
      t1.subLocal$1(t4[prev].get$worldCenter());
      ++i;
    }
    t1 = this.step;
    if (t1.get$warmStarting() === true) {
      t2 = this._impulse;
      t4 = t1.get$dtRatio();
      if (typeof t2 !== "number")
        return this.initVelocityConstraints$1$bailout1(7, d, 0, t1, 0, t2);
      if (typeof t4 !== "number")
        return this.initVelocityConstraints$1$bailout1(8, d, 0, 0, 0, t2, 0, t4);
      this._impulse = t2 * t4;
      i = 0;
      while (true) {
        t1 = $.length(this.bodies);
        if (typeof t1 !== "number")
          return this.initVelocityConstraints$1$bailout1(9, d, i, t1);
        if (!(i < t1))
          break;
        t1 = this.bodies;
        if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
          return this.initVelocityConstraints$1$bailout1(10, d, i, t1);
        if (i >= t1.length)
          throw $.ioore(i);
        t3 = t1[i].get$linearVelocity();
        t4 = t3.get$x();
        t6 = this.bodies;
        if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior))
          return this.initVelocityConstraints$1$bailout1(12, d, i, 0, 0, 0, 0, t4, t3, t6);
        if (i >= t6.length)
          throw $.ioore(i);
        t8 = t6[i].get$invMass();
        if (i >= d.length)
          throw $.ioore(i);
        t10 = d[i].get$y();
        if (typeof t8 !== "number")
          return this.initVelocityConstraints$1$bailout1(13, d, i, 0, 0, 0, 0, t4, t3, 0, t8);
        if (typeof t10 !== "number")
          return this.initVelocityConstraints$1$bailout1(14, d, i, 0, 0, 0, 0, t4, t3, 0, t8, t10);
        t12 = t8 * t10 * 0.5;
        t13 = this._impulse;
        if (typeof t13 !== "number")
          return this.initVelocityConstraints$1$bailout1(15, d, i, 0, 0, 0, 0, t4, t3, 0, 0, 0, t13, t12);
        if (typeof t4 !== "number")
          return this.initVelocityConstraints$1$bailout1(11, d, i, 0, 0, 0, 0, t4, t3);
        t3.set$x(t4 + t12 * t13);
        t3 = this.bodies;
        if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
          return this.initVelocityConstraints$1$bailout1(16, d, i, 0, 0, 0, 0, 0, t3);
        if (i >= t3.length)
          throw $.ioore(i);
        t16 = t3[i].get$linearVelocity();
        t17 = t16.get$y();
        t19 = this.bodies;
        if (typeof t19 !== "string" && (typeof t19 !== "object" || t19 === null || t19.constructor !== Array && !t19.$isJavaScriptIndexingBehavior))
          return this.initVelocityConstraints$1$bailout1(18, d, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, t16, t19);
        if (i >= t19.length)
          throw $.ioore(i);
        t21 = t19[i].get$invMass();
        if (i >= d.length)
          throw $.ioore(i);
        t23 = d[i].get$x();
        if (typeof t23 !== "number")
          return this.initVelocityConstraints$1$bailout1(20, d, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, t16, 0, t21, t23);
        if (typeof t21 !== "number")
          return this.initVelocityConstraints$1$bailout1(19, d, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, t16, 0, t21);
        t25 = t21 * -t23 * 0.5;
        t26 = this._impulse;
        if (typeof t26 !== "number")
          return this.initVelocityConstraints$1$bailout1(21, d, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, t16, 0, 0, 0, t26, t25);
        if (typeof t17 !== "number")
          return this.initVelocityConstraints$1$bailout1(17, d, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, t16);
        t16.set$y(t17 + t25 * t26);
        ++i;
      }
    } else
      this._impulse = 0;
  },
  initVelocityConstraints$1$bailout1: function(state0, d, i, t1, prev, t2, next, t4, t3, t6, t8, t10, t13, t12, t17, t16, t19, t21, t23, t26, t25) {
    switch (state0) {
      case 0:
        this.step = argStep;
        d = $.List_List($.length(this.bodies));
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(this.bodies);
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L0;
                t1 = $.Vector$(0, 0);
                if (i >= d.length)
                  throw $.ioore(i);
                d[i] = t1;
                ++i;
            }
        i = 0;
      default:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(this.bodies);
              case 2:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L1;
              case 3:
                if (state0 === 3 || state0 === 0 && i === 0)
                  switch (state0) {
                    case 0:
                      t1 = $.length(this.bodies);
                    case 3:
                      state0 = 0;
                      prev = $.$$sub(t1, 1);
                  }
                else
                  prev = i - 1;
                t1 = $.length(this.bodies);
              case 4:
                state0 = 0;
                next = i === $.$$sub(t1, 1) ? 0 : i + 1;
                if (i >= d.length)
                  throw $.ioore(i);
                t1 = d[i];
                t2 = this.bodies;
              case 5:
                state0 = 0;
                t1.setFrom$1($.$$index(t2, next).get$worldCenter());
                if (i >= d.length)
                  throw $.ioore(i);
                t1 = d[i];
                t4 = this.bodies;
              case 6:
                state0 = 0;
                t1.subLocal$1($.$$index(t4, prev).get$worldCenter());
                ++i;
            }
        t1 = this.step;
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
        if (state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 0 && t1.get$warmStarting() === true)
          switch (state0) {
            case 0:
              t2 = this._impulse;
            case 7:
              state0 = 0;
              t4 = t1.get$dtRatio();
            case 8:
              state0 = 0;
              this._impulse = $.$$mul(t2, t4);
              i = 0;
            default:
              L2:
                while (true)
                  switch (state0) {
                    case 0:
                      t1 = $.length(this.bodies);
                    case 9:
                      state0 = 0;
                      if (!$.CONSTANT5.$lt(i, t1))
                        break L2;
                      t1 = this.bodies;
                    case 10:
                      state0 = 0;
                      t3 = $.$$index(t1, i).get$linearVelocity();
                      t4 = t3.get$x();
                    case 11:
                      state0 = 0;
                      t6 = this.bodies;
                    case 12:
                      state0 = 0;
                      t8 = $.$$index(t6, i).get$invMass();
                    case 13:
                      state0 = 0;
                      if (i >= d.length)
                        throw $.ioore(i);
                      t10 = d[i].get$y();
                    case 14:
                      state0 = 0;
                      t12 = $.$$mul($.$$mul(t8, t10), 0.5);
                      t13 = this._impulse;
                    case 15:
                      state0 = 0;
                      t3.set$x($.$$add(t4, $.$$mul(t12, t13)));
                      t3 = this.bodies;
                    case 16:
                      state0 = 0;
                      t16 = $.$$index(t3, i).get$linearVelocity();
                      t17 = t16.get$y();
                    case 17:
                      state0 = 0;
                      t19 = this.bodies;
                    case 18:
                      state0 = 0;
                      t21 = $.$$index(t19, i).get$invMass();
                    case 19:
                      state0 = 0;
                      if (i >= d.length)
                        throw $.ioore(i);
                      t23 = d[i].get$x();
                    case 20:
                      state0 = 0;
                      t25 = $.$$mul($.$$mul(t21, $.$$negate(t23)), 0.5);
                      t26 = this._impulse;
                    case 21:
                      state0 = 0;
                      t16.set$y($.$$add(t17, $.$$mul(t25, t26)));
                      ++i;
                  }
          }
        else
          this._impulse = 0;
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    return this.constrainEdges$1(this.step);
  },
  solveVelocityConstraints$1: function(argStep) {
    var d, i, t1, crossMassSum, dotMassSum, prev, next, t2, t4, t7, t9, t12, t13, t14, t16, t18, lambda, t3, t6, t8, t10, t20;
    d = $.List_List($.length(this.bodies));
    i = 0;
    while (true) {
      t1 = $.length(this.bodies);
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(1, d, t1, i);
      if (!(i < t1))
        break;
      t1 = $.Vector$(0, 0);
      if (i >= d.length)
        throw $.ioore(i);
      d[i] = t1;
      ++i;
    }
    crossMassSum = 0;
    dotMassSum = 0;
    i = 0;
    while (true) {
      t1 = $.length(this.bodies);
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(2, d, t1, i, crossMassSum, dotMassSum);
      if (!(i < t1))
        break;
      if (i === 0) {
        t1 = $.length(this.bodies);
        if (typeof t1 !== "number")
          return this.solveVelocityConstraints$1$bailout1(3, d, t1, i, crossMassSum, dotMassSum);
        prev = t1 - 1;
      } else
        prev = i - 1;
      t1 = $.length(this.bodies);
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(4, d, t1, i, crossMassSum, dotMassSum, prev);
      next = i === t1 - 1 ? 0 : i + 1;
      if (i >= d.length)
        throw $.ioore(i);
      t1 = d[i];
      t2 = this.bodies;
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$1$bailout1(5, d, t1, i, crossMassSum, dotMassSum, prev, t2, next);
      if (next >= t2.length)
        throw $.ioore(next);
      t1.setFrom$1(t2[next].get$worldCenter());
      if (i >= d.length)
        throw $.ioore(i);
      t1 = d[i];
      t4 = this.bodies;
      if (typeof t4 !== "string" && (typeof t4 !== "object" || t4 === null || t4.constructor !== Array && !t4.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$1$bailout1(6, d, t1, i, crossMassSum, dotMassSum, prev, 0, 0, t4);
      if (prev !== (prev | 0))
        throw $.iae(prev);
      if (prev < 0 || prev >= t4.length)
        throw $.ioore(prev);
      t1.subLocal$1(t4[prev].get$worldCenter());
      if (i >= d.length)
        throw $.ioore(i);
      t1 = d[i].get$lengthSquared();
      t7 = this.bodies;
      if (typeof t7 !== "string" && (typeof t7 !== "object" || t7 === null || t7.constructor !== Array && !t7.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$1$bailout1(8, d, t1, i, crossMassSum, dotMassSum, 0, 0, 0, 0, t7);
      if (i >= t7.length)
        throw $.ioore(i);
      t9 = t7[i].get$mass();
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(7, d, t1, i, crossMassSum, dotMassSum);
      if (typeof t9 !== "number")
        return this.solveVelocityConstraints$1$bailout1(9, d, t1, i, crossMassSum, dotMassSum, 0, 0, 0, 0, 0, t9);
      dotMassSum += t1 / t9;
      if (dotMassSum !== (dotMassSum | 0))
        return this.solveVelocityConstraints$1$bailout1(10, d, 0, i, crossMassSum, dotMassSum);
      if (i >= t7.length)
        throw $.ioore(i);
      t12 = t7[i].get$linearVelocity();
      if (i >= d.length)
        throw $.ioore(i);
      t13 = d[i];
      t14 = t12.get$x();
      t16 = t13.get$y();
      if (typeof t14 !== "number")
        return this.solveVelocityConstraints$1$bailout1(12, d, 0, i, crossMassSum, dotMassSum, 0, 0, 0, 0, 0, 0, t13, t12, t14);
      if (typeof t16 !== "number")
        return this.solveVelocityConstraints$1$bailout1(13, d, 0, i, crossMassSum, dotMassSum, 0, 0, 0, 0, 0, 0, t13, t12, t14, t16);
      t16 = t14 * t16;
      t12 = t12.get$y();
      t18 = t13.get$x();
      if (typeof t12 !== "number")
        return this.solveVelocityConstraints$1$bailout1(14, d, 0, i, crossMassSum, dotMassSum, 0, 0, 0, 0, 0, 0, t13, t12, 0, t16);
      if (typeof t18 !== "number")
        return this.solveVelocityConstraints$1$bailout1(15, d, 0, i, crossMassSum, dotMassSum, 0, 0, 0, 0, 0, 0, 0, t12, 0, t16, t18);
      crossMassSum += t16 - t12 * t18;
      if (crossMassSum !== (crossMassSum | 0))
        return this.solveVelocityConstraints$1$bailout1(16, d, 0, i, crossMassSum, dotMassSum);
      ++i;
    }
    lambda = -2 * crossMassSum / dotMassSum;
    t1 = this._impulse;
    if (typeof t1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(18, d, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, lambda);
    this._impulse = t1 + lambda;
    i = 0;
    while (true) {
      t1 = $.length(this.bodies);
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(19, d, t1, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, lambda);
      if (!(i < t1))
        break;
      t1 = this.bodies;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$1$bailout1(20, d, t1, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, lambda);
      if (i >= t1.length)
        throw $.ioore(i);
      t3 = t1[i].get$linearVelocity();
      t4 = t3.get$x();
      t6 = this.bodies;
      if (typeof t6 !== "string" && (typeof t6 !== "object" || t6 === null || t6.constructor !== Array && !t6.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$1$bailout1(22, d, 0, i, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, lambda, t3, t6);
      if (i >= t6.length)
        throw $.ioore(i);
      t8 = t6[i].get$invMass();
      if (i >= d.length)
        throw $.ioore(i);
      t10 = d[i].get$y();
      if (typeof t8 !== "number")
        return this.solveVelocityConstraints$1$bailout1(23, d, 0, i, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, lambda, t3, 0, t8);
      if (typeof t10 !== "number")
        return this.solveVelocityConstraints$1$bailout1(24, d, 0, i, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, lambda, t3, 0, t8, t10);
      if (typeof t4 !== "number")
        return this.solveVelocityConstraints$1$bailout1(21, d, 0, i, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, lambda, t3);
      t3.set$x(t4 + t8 * t10 * 0.5 * lambda);
      t3 = this.bodies;
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$1$bailout1(25, d, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, lambda, t3);
      if (i >= t3.length)
        throw $.ioore(i);
      t13 = t3[i].get$linearVelocity();
      t14 = t13.get$y();
      t16 = this.bodies;
      if (typeof t16 !== "string" && (typeof t16 !== "object" || t16 === null || t16.constructor !== Array && !t16.$isJavaScriptIndexingBehavior))
        return this.solveVelocityConstraints$1$bailout1(27, d, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, t14, t16, 0, lambda);
      if (i >= t16.length)
        throw $.ioore(i);
      t18 = t16[i].get$invMass();
      if (i >= d.length)
        throw $.ioore(i);
      t20 = d[i].get$x();
      if (typeof t20 !== "number")
        return this.solveVelocityConstraints$1$bailout1(29, d, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, t14, 0, t18, lambda, 0, 0, 0, 0, t20);
      if (typeof t18 !== "number")
        return this.solveVelocityConstraints$1$bailout1(28, d, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, t14, 0, t18, lambda);
      if (typeof t14 !== "number")
        return this.solveVelocityConstraints$1$bailout1(26, d, 0, i, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, t14, 0, 0, lambda);
      t13.set$y(t14 + t18 * -t20 * 0.5 * lambda);
      ++i;
    }
  },
  solveVelocityConstraints$1$bailout1: function(state0, d, t1, i, crossMassSum, dotMassSum, prev, t2, next, t4, t7, t9, t13, t12, t14, t16, t18, lambda, t3, t6, t8, t10, t20) {
    switch (state0) {
      case 0:
        d = $.List_List($.length(this.bodies));
        i = 0;
      case 1:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(this.bodies);
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L0;
                t1 = $.Vector$(0, 0);
                if (i >= d.length)
                  throw $.ioore(i);
                d[i] = t1;
                ++i;
            }
        crossMassSum = 0;
        dotMassSum = 0;
        i = 0;
      default:
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(this.bodies);
              case 2:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L1;
              case 3:
                if (state0 === 3 || state0 === 0 && i === 0)
                  switch (state0) {
                    case 0:
                      t1 = $.length(this.bodies);
                    case 3:
                      state0 = 0;
                      prev = $.$$sub(t1, 1);
                  }
                else
                  prev = i - 1;
                t1 = $.length(this.bodies);
              case 4:
                state0 = 0;
                next = i === $.$$sub(t1, 1) ? 0 : i + 1;
                if (i >= d.length)
                  throw $.ioore(i);
                t1 = d[i];
                t2 = this.bodies;
              case 5:
                state0 = 0;
                t1.setFrom$1($.$$index(t2, next).get$worldCenter());
                if (i >= d.length)
                  throw $.ioore(i);
                t1 = d[i];
                t4 = this.bodies;
              case 6:
                state0 = 0;
                t1.subLocal$1($.$$index(t4, prev).get$worldCenter());
                if (i >= d.length)
                  throw $.ioore(i);
                t1 = d[i].get$lengthSquared();
              case 7:
                state0 = 0;
                t7 = this.bodies;
              case 8:
                state0 = 0;
                t9 = $.$$index(t7, i).get$mass();
              case 9:
                state0 = 0;
                t9 = $.$$div(t1, t9);
                if (typeof t9 !== "number")
                  throw $.iae(t9);
                dotMassSum += t9;
              case 10:
                state0 = 0;
                t1 = this.bodies;
              case 11:
                state0 = 0;
                t12 = $.$$index(t1, i).get$linearVelocity();
                if (i >= d.length)
                  throw $.ioore(i);
                t13 = d[i];
                t14 = t12.get$x();
              case 12:
                state0 = 0;
                t16 = t13.get$y();
              case 13:
                state0 = 0;
                t16 = $.$$mul(t14, t16);
                t12 = t12.get$y();
              case 14:
                state0 = 0;
                t18 = t13.get$x();
              case 15:
                state0 = 0;
                t16 = $.$$sub(t16, $.$$mul(t12, t18));
                if (typeof t16 !== "number")
                  throw $.iae(t16);
                crossMassSum += t16;
              case 16:
                state0 = 0;
                ++i;
            }
        lambda = -2 * crossMassSum / dotMassSum;
      case 17:
        state0 = 0;
        t2 = this._impulse;
      case 18:
        state0 = 0;
        this._impulse = $.$$add(t2, lambda);
        i = 0;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
        L2:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(this.bodies);
              case 19:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L2;
                t1 = this.bodies;
              case 20:
                state0 = 0;
                t3 = $.$$index(t1, i).get$linearVelocity();
                t4 = t3.get$x();
              case 21:
                state0 = 0;
                t6 = this.bodies;
              case 22:
                state0 = 0;
                t8 = $.$$index(t6, i).get$invMass();
              case 23:
                state0 = 0;
                if (i >= d.length)
                  throw $.ioore(i);
                t10 = d[i].get$y();
              case 24:
                state0 = 0;
                t3.set$x($.$$add(t4, $.$$mul($.$$mul($.$$mul(t8, t10), 0.5), lambda)));
                t3 = this.bodies;
              case 25:
                state0 = 0;
                t13 = $.$$index(t3, i).get$linearVelocity();
                t14 = t13.get$y();
              case 26:
                state0 = 0;
                t16 = this.bodies;
              case 27:
                state0 = 0;
                t18 = $.$$index(t16, i).get$invMass();
              case 28:
                state0 = 0;
                if (i >= d.length)
                  throw $.ioore(i);
                t20 = d[i].get$x();
              case 29:
                state0 = 0;
                t13.set$y($.$$add(t14, $.$$mul($.$$mul($.$$mul(t18, $.$$negate(t20)), 0.5), lambda)));
                ++i;
            }
    }
  },
  ConstantVolumeJoint$2: function(_world, def) {
    var i, next, temp, dist, t1, djd;
    if ($.$$le($.length(def.get$bodies()), 2) === true)
      throw $.$$throw($.ArgumentError$("You cannot create a constant volume joint with less than three bodies."));
    this.bodies = $.List_List$from(def.get$bodies());
    this.targetLengths = $.List_List($.length(this.bodies));
    for (i = 0; $.CONSTANT5.$lt(i, $.length(this.targetLengths)); ++i) {
      next = i === $.$$sub($.length(this.targetLengths), 1) ? 0 : i + 1;
      temp = $.Vector$copy($.$$index(this.bodies, i).get$worldCenter());
      temp.subLocal$1($.$$index(this.bodies, next).get$worldCenter());
      dist = temp.get$length();
      $.$$indexSet(this.targetLengths, i, dist);
    }
    this.targetVolume = this.get$area();
    t1 = def.get$joints();
    if (!(t1 == null) && $.$$eq($.length(t1), $.length(def.get$bodies())) !== true)
      throw $.$$throw($.ArgumentError$("Incorrect joint definition.  Joints have to correspond to the bodies"));
    t1 = def.get$joints();
    if (t1 == null) {
      djd = $.DistanceJointDef$();
      this.distanceJoints = $.List_List($.length(this.bodies));
      for (t1 = this._world, i = 0; $.CONSTANT5.$lt(i, $.length(this.targetLengths)); ++i) {
        next = i === $.$$sub($.length(this.targetLengths), 1) ? 0 : i + 1;
        djd.frequencyHz = def.get$frequencyHz();
        djd.dampingRatio = def.get$dampingRatio();
        djd.initialize$4($.$$index(this.bodies, i), $.$$index(this.bodies, next), $.$$index(this.bodies, i).get$worldCenter(), $.$$index(this.bodies, next).get$worldCenter());
        $.$$indexSet(this.distanceJoints, i, t1.createJoint$1(djd));
      }
    } else {
      this.distanceJoints = $.List_List($.length(t1));
      $.setRange(this.distanceJoints, 0, $.length(def.get$joints()), def.get$joints());
    }
    this.frequencyHz = def.get$frequencyHz();
    this.dampingRatio = def.get$dampingRatio();
    this.normals = $.List_List($.length(this.bodies));
    for (i = 0; $.CONSTANT5.$lt(i, $.length(this.normals)); ++i)
      $.$$indexSet(this.normals, i, $.Vector$(0, 0));
    this.bodyA = $.$$index(this.bodies, 0);
    this.bodyB = $.$$index(this.bodies, 1);
    this.collideConnected = false;
  }
};

$$.DistanceJoint = {"": "Joint;localAnchor1,localAnchor2,u,impulse,mass>,length>,frequencyHz>,dampingRatio>,gamma,bias,type,_prev,_liblib2$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  initVelocityConstraints$1: function(step) {
    var b1, b2, r1, r2, t1, t3, t7, t8, t10, len, t4, t5, cr1u, cr2u, t13, t15, invMass, t2, C, omega, d, k, t6, P, t9, t11, t18, t20, t22, t25, t27, t28, t30, t32, t34, t36, t38, t41, t43, t45, t48;
    b1 = this.bodyA;
    b2 = this.bodyB;
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
    r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
    t1 = b2.get$sweep().get$center().get$x();
    t3 = r2.x;
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(1, step, b2, r1, r2, t1, b1);
    if (typeof t3 !== "number")
      return this.initVelocityConstraints$1$bailout1(2, step, b2, r1, r2, t1, b1, t3);
    t3 = t1 + t3;
    t1 = b1.get$sweep().get$center().get$x();
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(3, step, b2, r1, r2, t1, b1, t3);
    t1 = t3 - t1;
    t3 = r1.x;
    if (typeof t3 !== "number")
      return this.initVelocityConstraints$1$bailout1(4, step, b2, r1, r2, t1, b1, t3);
    t7 = this.u;
    t7.x = t1 - t3;
    t8 = b2.get$sweep().get$center().get$y();
    t10 = r2.y;
    if (typeof t8 !== "number")
      return this.initVelocityConstraints$1$bailout1(5, step, b2, r1, r2, t7, b1, t8);
    if (typeof t10 !== "number")
      return this.initVelocityConstraints$1$bailout1(6, step, b2, r1, r2, t7, b1, t8, t10);
    t10 = t8 + t10;
    t8 = b1.get$sweep().get$center().get$y();
    if (typeof t8 !== "number")
      return this.initVelocityConstraints$1$bailout1(7, step, b2, r1, r2, t7, b1, t8, t10);
    t8 = t10 - t8;
    t10 = r1.y;
    if (typeof t10 !== "number")
      return this.initVelocityConstraints$1$bailout1(8, step, b2, r1, r2, t7, b1, t8, t10);
    t7.y = t8 - t10;
    len = t7.get$length();
    if (typeof len !== "number")
      return this.initVelocityConstraints$1$bailout1(9, step, b2, r1, r2, t7, b1, 0, 0, len);
    if (len > 0.005) {
      t1 = t7.x;
      t3 = 1 / len;
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(10, step, b2, r1, r2, t7, b1, t1, 0, len, $.CONSTANT4);
      t7.x = t1 * t3;
      t4 = t7.y;
      if (typeof t4 !== "number")
        return this.initVelocityConstraints$1$bailout1(12, step, b2, r1, r2, t7, b1, 0, 0, len, $.CONSTANT4, t3, t4);
      t7.y = t4 * t3;
    } else
      t7.setCoords$2(0, 0);
    t1 = r1.x;
    t3 = t7.y;
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(13, step, b2, r1, r2, t7, b1, t1, 0, len, $.CONSTANT4);
    if (typeof t3 !== "number")
      return this.initVelocityConstraints$1$bailout1(14, step, b2, r1, r2, t7, b1, t1, 0, len, $.CONSTANT4, t3);
    t1 *= t3;
    t5 = r1.y;
    t8 = t7.x;
    if (typeof t5 !== "number")
      return this.initVelocityConstraints$1$bailout1(15, step, b2, r1, r2, t7, b1, t5, 0, len, $.CONSTANT4, t1);
    if (typeof t8 !== "number")
      return this.initVelocityConstraints$1$bailout1(16, step, b2, r1, r2, t7, b1, t5, t8, len, $.CONSTANT4, t1);
    cr1u = t1 - t5 * t8;
    t1 = r2.x;
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(17, step, b2, r1, r2, t7, b1, 0, 0, len, $.CONSTANT4, t1, 0, cr1u);
    t3 = t1 * t3;
    t1 = r2.y;
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(19, step, b2, r1, r2, t7, b1, 0, 0, len, $.CONSTANT4, t1, 0, cr1u, t3);
    cr2u = t3 - t1 * t8;
    t3 = b1.get$invMass();
    t13 = b1.get$invInertia();
    if (typeof t13 !== "number")
      return this.initVelocityConstraints$1$bailout1(22, step, b2, r1, r2, t7, b1, 0, 0, len, $.CONSTANT4, 0, 0, cr1u, t3, 0, cr2u, t13);
    if (typeof t3 !== "number")
      return this.initVelocityConstraints$1$bailout1(21, step, b2, r1, r2, t7, b1, 0, 0, len, $.CONSTANT4, 0, 0, cr1u, t3, 0, cr2u);
    t3 += t13 * cr1u * cr1u;
    t15 = b2.get$invMass();
    if (typeof t15 !== "number")
      return this.initVelocityConstraints$1$bailout1(23, step, b2, r1, r2, t7, b1, 0, 0, len, $.CONSTANT4, 0, 0, 0, t3, 0, cr2u, 0, t15);
    t15 = t3 + t15;
    t3 = b2.get$invInertia();
    if (typeof t3 !== "number")
      return this.initVelocityConstraints$1$bailout1(24, step, b2, r1, r2, t7, b1, 0, 0, len, $.CONSTANT4, 0, 0, 0, t3, 0, cr2u, 0, t15);
    invMass = t15 + t3 * cr2u * cr2u;
    this.mass = 1 / invMass;
    t1 = this.frequencyHz;
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(26, step, b2, r1, r2, t7, b1, t1, 0, len, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, invMass);
    if (t1 > 0) {
      t2 = this.length;
      if (typeof t2 !== "number")
        return this.initVelocityConstraints$1$bailout1(27, step, b2, r1, r2, t7, b1, t2, 0, len, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, invMass);
      C = len - t2;
      omega = 6.283185307179586 * t1;
      t1 = this.mass;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      t2 = this.dampingRatio;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      d = 2 * t1 * t2 * omega;
      k = t1 * omega * omega;
      t4 = step.get$dt();
      if (typeof t4 !== "number")
        return this.initVelocityConstraints$1$bailout1(28, step, b2, r1, r2, t7, b1, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, invMass, k, d, C);
      this.gamma = t4 * (d + t4 * k);
      t1 = this.gamma;
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(29, step, b2, r1, r2, t7, b1, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, invMass, k, 0, C);
      this.gamma = !(t1 === 0) ? 1 / t1 : 0;
      t1 = step.get$dt();
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(31, step, b2, r1, r2, t7, b1, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, invMass, k, 0, C);
      t3 = C * t1 * k;
      t4 = this.gamma;
      if (typeof t4 !== "number")
        return this.initVelocityConstraints$1$bailout1(32, step, b2, r1, r2, t7, b1, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, invMass, 0, 0, 0, t3);
      this.bias = t3 * t4;
      t6 = this.gamma;
      if (typeof t6 !== "number")
        throw $.iae(t6);
      this.mass = invMass + t6;
      t1 = this.mass;
      if (!(t1 === 0)) {
        if (typeof t1 !== "number")
          throw $.iae(t1);
        t1 = 1 / t1;
      } else
        t1 = 0;
      this.mass = t1;
    }
    if (step.get$warmStarting() === true) {
      t1 = this.impulse;
      t2 = step.get$dtRatio();
      if (typeof t2 !== "number")
        throw $.iae(t2);
      this.impulse = t1 * t2;
      P = $.Vector$(0, 0);
      P.setFrom$1(t7).mulLocal$1(this.impulse);
      t3 = b1.get$linearVelocity();
      t4 = t3.get$x();
      t6 = b1.get$invMass();
      t9 = P.x;
      if (typeof t6 !== "number")
        return this.initVelocityConstraints$1$bailout1(35, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, t4, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P);
      if (typeof t9 !== "number")
        return this.initVelocityConstraints$1$bailout1(36, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, t4, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, t9);
      if (typeof t4 !== "number")
        return this.initVelocityConstraints$1$bailout1(34, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P);
      t3.set$x(t4 - t6 * t9);
      t3 = b1.get$linearVelocity();
      t11 = t3.get$y();
      t13 = b1.get$invMass();
      t15 = P.y;
      if (typeof t13 !== "number")
        return this.initVelocityConstraints$1$bailout1(38, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, 0, t13);
      if (typeof t15 !== "number")
        return this.initVelocityConstraints$1$bailout1(39, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, 0, t13, t15);
      if (typeof t11 !== "number")
        return this.initVelocityConstraints$1$bailout1(37, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, t3, P);
      t3.set$y(t11 - t13 * t15);
      t3 = b1.get$angularVelocity();
      t18 = b1.get$invInertia();
      t20 = r1.x;
      t22 = P.y;
      if (typeof t20 !== "number")
        return this.initVelocityConstraints$1$bailout1(42, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, 0, 0, 0, t18, t20);
      if (typeof t22 !== "number")
        return this.initVelocityConstraints$1$bailout1(43, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, 0, 0, 0, t18, t20, t22);
      t22 = t20 * t22;
      t20 = r1.y;
      t25 = P.x;
      if (typeof t20 !== "number")
        return this.initVelocityConstraints$1$bailout1(44, 0, b2, 0, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, 0, 0, 0, t18, t20, t22);
      if (typeof t25 !== "number")
        return this.initVelocityConstraints$1$bailout1(45, 0, b2, 0, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, 0, 0, 0, t18, t20, t22, t25);
      if (typeof t18 !== "number")
        return this.initVelocityConstraints$1$bailout1(41, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P, 0, 0, 0, t18);
      if (typeof t3 !== "number")
        return this.initVelocityConstraints$1$bailout1(40, 0, b2, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, P);
      b1.set$angularVelocity(t3 - t18 * (t22 - t20 * t25));
      t27 = b2.get$linearVelocity();
      t28 = t27.get$x();
      t30 = b2.get$invMass();
      t32 = P.x;
      if (typeof t30 !== "number")
        return this.initVelocityConstraints$1$bailout1(47, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, t28, t30);
      if (typeof t32 !== "number")
        return this.initVelocityConstraints$1$bailout1(48, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, t28, t30, t32);
      if (typeof t28 !== "number")
        return this.initVelocityConstraints$1$bailout1(46, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, t28);
      t27.set$x(t28 + t30 * t32);
      t27 = b2.get$linearVelocity();
      t34 = t27.get$y();
      t36 = b2.get$invMass();
      t38 = P.y;
      if (typeof t36 !== "number")
        return this.initVelocityConstraints$1$bailout1(50, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, t34, t36);
      if (typeof t38 !== "number")
        return this.initVelocityConstraints$1$bailout1(51, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, t34, t36, t38);
      if (typeof t34 !== "number")
        return this.initVelocityConstraints$1$bailout1(49, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, t34);
      t27.set$y(t34 + t36 * t38);
      t27 = b2.get$angularVelocity();
      t41 = b2.get$invInertia();
      t43 = r2.x;
      t45 = P.y;
      if (typeof t43 !== "number")
        return this.initVelocityConstraints$1$bailout1(54, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, t41, t43);
      if (typeof t45 !== "number")
        return this.initVelocityConstraints$1$bailout1(55, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, t41, t43, t45);
      t45 = t43 * t45;
      t43 = r2.y;
      t48 = P.x;
      if (typeof t43 !== "number")
        return this.initVelocityConstraints$1$bailout1(56, 0, b2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, t41, t43, t45);
      if (typeof t48 !== "number")
        return this.initVelocityConstraints$1$bailout1(57, 0, b2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, t41, t43, t45, t48);
      if (typeof t41 !== "number")
        return this.initVelocityConstraints$1$bailout1(53, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, t41);
      if (typeof t27 !== "number")
        return this.initVelocityConstraints$1$bailout1(52, 0, b2, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, P, 0, 0, 0, 0, 0, 0, 0, t27);
      b2.set$angularVelocity(t27 + t41 * (t45 - t43 * t48));
    } else
      this.impulse = 0;
  },
  initVelocityConstraints$1$bailout1: function(state0, step, b2, r1, r2, t1, b1, t3, t8, len, t2, t5, t7, cr1u, t11, t14, cr2u, t17, t19, invMass, k, d, C, t4, P, t9, t13, t15, t18, t20, t22, t25, t27, t28, t30, t32, t34, t36, t38, t41, t43, t45, t48) {
    switch (state0) {
      case 0:
        b1 = this.bodyA;
        b2 = this.bodyB;
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
        r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
        $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
        $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
        t1 = b2.get$sweep().get$center().get$x();
      case 1:
        state0 = 0;
        t3 = r2.x;
      case 2:
        state0 = 0;
        t3 = $.$$add(t1, t3);
        t1 = b1.get$sweep().get$center().get$x();
      case 3:
        state0 = 0;
        t1 = $.$$sub(t3, t1);
        t3 = r1.x;
      case 4:
        state0 = 0;
        t3 = $.$$sub(t1, t3);
        t1 = this.u;
        t1.x = t3;
        t3 = b2.get$sweep().get$center().get$y();
      case 5:
        state0 = 0;
        t8 = r2.y;
      case 6:
        state0 = 0;
        t8 = $.$$add(t3, t8);
        t3 = b1.get$sweep().get$center().get$y();
      case 7:
        state0 = 0;
        t3 = $.$$sub(t8, t3);
        t8 = r1.y;
      case 8:
        state0 = 0;
        t1.y = $.$$sub(t3, t8);
        len = t1.get$length();
      case 9:
        state0 = 0;
        t2 = $.getInterceptor$JSNumber(len);
      default:
        if (state0 === 12 || state0 === 11 || state0 === 10 || state0 === 0 && t2.$gt(len, 0.005) === true)
          switch (state0) {
            case 0:
              t3 = t1.x;
            case 10:
              state0 = 0;
              if (typeof len !== "number")
                throw $.iae(len);
              t5 = 1 / len;
            case 11:
              state0 = 0;
              t1.x = $.$$mul(t3, t5);
              t7 = t1.y;
            case 12:
              state0 = 0;
              t1.y = $.$$mul(t7, t5);
          }
        else
          t1.setCoords$2(0, 0);
        t3 = r1.x;
      case 13:
        state0 = 0;
        t5 = t1.y;
      case 14:
        state0 = 0;
        t5 = $.$$mul(t3, t5);
        t3 = r1.y;
      case 15:
        state0 = 0;
        t8 = t1.x;
      case 16:
        state0 = 0;
        cr1u = $.$$sub(t5, $.$$mul(t3, t8));
        t5 = r2.x;
      case 17:
        state0 = 0;
        t11 = t1.y;
      case 18:
        state0 = 0;
        t11 = $.$$mul(t5, t11);
        t5 = r2.y;
      case 19:
        state0 = 0;
        t14 = t1.x;
      case 20:
        state0 = 0;
        cr2u = $.$$sub(t11, $.$$mul(t5, t14));
        t11 = b1.get$invMass();
      case 21:
        state0 = 0;
        t17 = b1.get$invInertia();
      case 22:
        state0 = 0;
        t11 = $.$$add(t11, $.$$mul($.$$mul(t17, cr1u), cr1u));
        t19 = b2.get$invMass();
      case 23:
        state0 = 0;
        t19 = $.$$add(t11, t19);
        t11 = b2.get$invInertia();
      case 24:
        state0 = 0;
        invMass = $.$$add(t19, $.$$mul($.$$mul(t11, cr2u), cr2u));
        if (typeof invMass !== "number")
          throw $.iae(invMass);
        t19 = 1 / invMass;
      case 25:
        state0 = 0;
        this.mass = t19;
        t3 = this.frequencyHz;
      case 26:
        state0 = 0;
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
        if (state0 === 33 || state0 === 32 || state0 === 31 || state0 === 30 || state0 === 29 || state0 === 28 || state0 === 27 || state0 === 0 && $.$$gt(t3, 0) === true)
          switch (state0) {
            case 0:
              t3 = this.length;
            case 27:
              state0 = 0;
              C = t2.$sub(len, t3);
              t3 = this.frequencyHz;
              if (typeof t3 !== "number")
                throw $.iae(t3);
              omega = 6.283185307179586 * t3;
              t3 = this.mass;
              if (typeof t3 !== "number")
                throw $.iae(t3);
              t2 = this.dampingRatio;
              if (typeof t2 !== "number")
                throw $.iae(t2);
              d = 2 * t3 * t2 * omega;
              k = $.$$mul(t3 * omega, omega);
              t5 = step.get$dt();
            case 28:
              state0 = 0;
              t7 = $.getInterceptor$JSNumber(t5);
              t8 = t7.$mul(t5, k);
              if (typeof t8 !== "number")
                throw $.iae(t8);
              this.gamma = t7.$mul(t5, d + t8);
              t2 = this.gamma;
            case 29:
              state0 = 0;
            case 30:
              if (state0 === 30 || state0 === 0 && $.$$eq(t2, 0) !== true)
                switch (state0) {
                  case 0:
                    t2 = this.gamma;
                    if (typeof t2 !== "number")
                      throw $.iae(t2);
                    t2 = 1 / t2;
                  case 30:
                    state0 = 0;
                }
              else
                t2 = 0;
              this.gamma = t2;
              t2 = step.get$dt();
            case 31:
              state0 = 0;
              t4 = $.$$mul($.$$mul(C, t2), k);
              t5 = this.gamma;
            case 32:
              state0 = 0;
              this.bias = $.$$mul(t4, t5);
              t7 = this.gamma;
              if (typeof t7 !== "number")
                throw $.iae(t7);
              this.mass = invMass + t7;
              t2 = this.mass;
            case 33:
              if (state0 === 33 || state0 === 0 && !(t2 === 0))
                switch (state0) {
                  case 0:
                    if (typeof t2 !== "number")
                      throw $.iae(t2);
                    t2 = 1 / t2;
                  case 33:
                    state0 = 0;
                }
              else
                t2 = 0;
              this.mass = t2;
          }
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        var omega;
        if (state0 === 57 || state0 === 56 || state0 === 55 || state0 === 54 || state0 === 53 || state0 === 52 || state0 === 51 || state0 === 50 || state0 === 49 || state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 0 && step.get$warmStarting() === true)
          switch (state0) {
            case 0:
              t2 = this.impulse;
              t3 = step.get$dtRatio();
              if (typeof t3 !== "number")
                throw $.iae(t3);
              this.impulse = t2 * t3;
              P = $.Vector$(0, 0);
              P.setFrom$1(t1).mulLocal$1(this.impulse);
              t4 = b1.get$linearVelocity();
              t5 = t4.get$x();
            case 34:
              state0 = 0;
              t7 = b1.get$invMass();
            case 35:
              state0 = 0;
              t9 = P.x;
            case 36:
              state0 = 0;
              t4.set$x($.$$sub(t5, $.$$mul(t7, t9)));
              t4 = b1.get$linearVelocity();
              t11 = t4.get$y();
            case 37:
              state0 = 0;
              t13 = b1.get$invMass();
            case 38:
              state0 = 0;
              t15 = P.y;
            case 39:
              state0 = 0;
              t4.set$y($.$$sub(t11, $.$$mul(t13, t15)));
              t4 = b1.get$angularVelocity();
            case 40:
              state0 = 0;
              t18 = b1.get$invInertia();
            case 41:
              state0 = 0;
              t20 = r1.x;
            case 42:
              state0 = 0;
              t22 = P.y;
            case 43:
              state0 = 0;
              t22 = $.$$mul(t20, t22);
              t20 = r1.y;
            case 44:
              state0 = 0;
              t25 = P.x;
            case 45:
              state0 = 0;
              b1.set$angularVelocity($.$$sub(t4, $.$$mul(t18, $.$$sub(t22, $.$$mul(t20, t25)))));
              t27 = b2.get$linearVelocity();
              t28 = t27.get$x();
            case 46:
              state0 = 0;
              t30 = b2.get$invMass();
            case 47:
              state0 = 0;
              t32 = P.x;
            case 48:
              state0 = 0;
              t27.set$x($.$$add(t28, $.$$mul(t30, t32)));
              t27 = b2.get$linearVelocity();
              t34 = t27.get$y();
            case 49:
              state0 = 0;
              t36 = b2.get$invMass();
            case 50:
              state0 = 0;
              t38 = P.y;
            case 51:
              state0 = 0;
              t27.set$y($.$$add(t34, $.$$mul(t36, t38)));
              t27 = b2.get$angularVelocity();
            case 52:
              state0 = 0;
              t41 = b2.get$invInertia();
            case 53:
              state0 = 0;
              t43 = r2.x;
            case 54:
              state0 = 0;
              t45 = P.y;
            case 55:
              state0 = 0;
              t45 = $.$$mul(t43, t45);
              t43 = r2.y;
            case 56:
              state0 = 0;
              t48 = P.x;
            case 57:
              state0 = 0;
              b2.set$angularVelocity($.$$add(t27, $.$$mul(t41, $.$$sub(t45, $.$$mul(t43, t48)))));
          }
        else
          this.impulse = 0;
    }
  },
  solveVelocityConstraints$1: function(step) {
    var b1, b2, r1, r2, v1, v2, t1, t2, t3, t5, t8, Cdot, t11, t13, t15, imp, Px, Py, t17, t19, t21, t24, t26, t28, t30, t31, t33, t35, t37, t40, t42, t44;
    b1 = this.bodyA;
    b2 = this.bodyB;
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
    r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
    v1 = $.Vector$(0, 0);
    v2 = $.Vector$(0, 0);
    $.Vector_crossNumAndVectorToOut(b1.get$angularVelocity(), r1, v1);
    $.Vector_crossNumAndVectorToOut(b2.get$angularVelocity(), r2, v2);
    v1.addLocal$1(b1.get$linearVelocity());
    v2.addLocal$1(b2.get$linearVelocity());
    t1 = this.u;
    t2 = v2.subLocal$1(v1);
    t3 = t1.x;
    t5 = t2.get$x();
    if (typeof t3 !== "number")
      return this.solveVelocityConstraints$1$bailout1(1, b2, t1, t3, r1, r2, t2, b1);
    if (typeof t5 !== "number")
      return this.solveVelocityConstraints$1$bailout1(2, b2, t1, t3, r1, r2, t2, b1, t5);
    t5 = t3 * t5;
    t3 = t1.y;
    t8 = t2.get$y();
    if (typeof t3 !== "number")
      return this.solveVelocityConstraints$1$bailout1(3, b2, t1, t3, r1, r2, t2, b1, t5);
    if (typeof t8 !== "number")
      return this.solveVelocityConstraints$1$bailout1(4, b2, t1, t3, r1, r2, 0, b1, t5, t8);
    Cdot = t5 + t3 * t8;
    t5 = this.mass;
    if (typeof t5 !== "number")
      return this.solveVelocityConstraints$1$bailout1(5, b2, t1, 0, r1, r2, 0, b1, t5, 0, Cdot);
    t5 = -t5;
    t11 = this.bias;
    if (typeof t11 !== "number")
      return this.solveVelocityConstraints$1$bailout1(6, b2, t1, 0, r1, r2, 0, b1, t5, 0, Cdot, t11);
    t11 = Cdot + t11;
    t13 = this.gamma;
    t15 = this.impulse;
    if (typeof t13 !== "number")
      return this.solveVelocityConstraints$1$bailout1(7, b2, t1, 0, r1, r2, 0, b1, t5, 0, 0, t11, t13);
    imp = t5 * (t11 + t13 * t15);
    this.impulse = t15 + imp;
    t5 = t1.x;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    Px = imp * t5;
    t1 = t1.y;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    Py = imp * t1;
    t1 = b1.get$linearVelocity();
    t5 = t1.get$x();
    t17 = b1.get$invMass();
    if (typeof t17 !== "number")
      return this.solveVelocityConstraints$1$bailout1(9, b2, t1, 0, r1, r2, 0, b1, 0, 0, 0, 0, 0, t5, Px, Py, t17);
    if (typeof t5 !== "number")
      return this.solveVelocityConstraints$1$bailout1(8, b2, t1, 0, r1, r2, 0, b1, 0, 0, 0, 0, 0, t5, Px, Py);
    t1.set$x(t5 - t17 * Px);
    t1 = b1.get$linearVelocity();
    t19 = t1.get$y();
    t21 = b1.get$invMass();
    if (typeof t21 !== "number")
      return this.solveVelocityConstraints$1$bailout1(11, b2, t1, 0, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, Px, Py, 0, t19, t21);
    if (typeof t19 !== "number")
      return this.solveVelocityConstraints$1$bailout1(10, b2, t1, 0, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, Px, Py, 0, t19);
    t1.set$y(t19 - t21 * Py);
    t1 = b1.get$angularVelocity();
    t24 = b1.get$invInertia();
    t26 = r1.x;
    if (typeof t26 !== "number")
      return this.solveVelocityConstraints$1$bailout1(14, b2, t1, 0, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, t24, t26);
    t26 *= Py;
    t28 = r1.y;
    if (typeof t28 !== "number")
      return this.solveVelocityConstraints$1$bailout1(15, b2, t1, 0, 0, r2, 0, b1, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, t24, t26, t28);
    if (typeof t24 !== "number")
      return this.solveVelocityConstraints$1$bailout1(13, b2, t1, 0, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, t24);
    if (typeof t1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(12, b2, t1, 0, r1, r2, 0, b1, 0, 0, 0, 0, 0, 0, Px, Py);
    b1.set$angularVelocity(t1 - t24 * (t26 - t28 * Px));
    t30 = b2.get$linearVelocity();
    t31 = t30.get$x();
    t33 = b2.get$invMass();
    if (typeof t33 !== "number")
      return this.solveVelocityConstraints$1$bailout1(17, b2, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t30, t31, t33);
    if (typeof t31 !== "number")
      return this.solveVelocityConstraints$1$bailout1(16, b2, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t30, t31);
    t30.set$x(t31 + t33 * Px);
    t30 = b2.get$linearVelocity();
    t35 = t30.get$y();
    t37 = b2.get$invMass();
    if (typeof t37 !== "number")
      return this.solveVelocityConstraints$1$bailout1(19, b2, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t30, 0, 0, t35, t37);
    if (typeof t35 !== "number")
      return this.solveVelocityConstraints$1$bailout1(18, b2, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t30, 0, 0, t35);
    t30.set$y(t35 + t37 * Py);
    t30 = b2.get$angularVelocity();
    t40 = b2.get$invInertia();
    t42 = r2.x;
    if (typeof t42 !== "number")
      return this.solveVelocityConstraints$1$bailout1(22, b2, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, t40, t42);
    t42 *= Py;
    t44 = r2.y;
    if (typeof t44 !== "number")
      return this.solveVelocityConstraints$1$bailout1(23, b2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, Px, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, t40, t42, t44);
    if (typeof t40 !== "number")
      return this.solveVelocityConstraints$1$bailout1(21, b2, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, t40);
    if (typeof t30 !== "number")
      return this.solveVelocityConstraints$1$bailout1(20, b2, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, t30);
    b2.set$angularVelocity(t30 + t40 * (t42 - t44 * Px));
  },
  solveVelocityConstraints$1$bailout1: function(state0, b2, t1, t3, r1, r2, t2, b1, t5, t8, Cdot, t11, t13, t15, Px, Py, t17, t19, t21, t24, t26, t28, t30, t31, t33, t35, t37, t40, t42, t44) {
    switch (state0) {
      case 0:
        b1 = this.bodyA;
        b2 = this.bodyB;
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
        r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
        $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
        $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
        v1 = $.Vector$(0, 0);
        v2 = $.Vector$(0, 0);
        $.Vector_crossNumAndVectorToOut(b1.get$angularVelocity(), r1, v1);
        $.Vector_crossNumAndVectorToOut(b2.get$angularVelocity(), r2, v2);
        v1.addLocal$1(b1.get$linearVelocity());
        v2.addLocal$1(b2.get$linearVelocity());
        t1 = this.u;
        t2 = v2.subLocal$1(v1);
        t3 = t1.x;
      case 1:
        state0 = 0;
        t5 = t2.get$x();
      case 2:
        state0 = 0;
        t5 = $.$$mul(t3, t5);
        t3 = t1.y;
      case 3:
        state0 = 0;
        t8 = t2.get$y();
      case 4:
        state0 = 0;
        Cdot = $.$$add(t5, $.$$mul(t3, t8));
        t5 = this.mass;
      case 5:
        state0 = 0;
        t5 = $.$$negate(t5);
        t11 = this.bias;
      case 6:
        state0 = 0;
        t11 = $.$$add(Cdot, t11);
        t13 = this.gamma;
      case 7:
        state0 = 0;
        imp = $.$$mul(t5, $.$$add(t11, $.$$mul(t13, this.impulse)));
        t5 = this.impulse;
        if (typeof imp !== "number")
          throw $.iae(imp);
        this.impulse = t5 + imp;
        t15 = t1.x;
        if (typeof t15 !== "number")
          throw $.iae(t15);
        Px = imp * t15;
        t1 = t1.y;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        Py = imp * t1;
        t1 = b1.get$linearVelocity();
        t15 = t1.get$x();
      case 8:
        state0 = 0;
        t17 = b1.get$invMass();
      case 9:
        state0 = 0;
        t1.set$x($.$$sub(t15, $.$$mul(t17, Px)));
        t1 = b1.get$linearVelocity();
        t19 = t1.get$y();
      case 10:
        state0 = 0;
        t21 = b1.get$invMass();
      case 11:
        state0 = 0;
        t1.set$y($.$$sub(t19, $.$$mul(t21, Py)));
        t1 = b1.get$angularVelocity();
      case 12:
        state0 = 0;
        t24 = b1.get$invInertia();
      case 13:
        state0 = 0;
        t26 = r1.x;
      case 14:
        state0 = 0;
        t26 = $.$$mul(t26, Py);
        t28 = r1.y;
      case 15:
        state0 = 0;
        b1.set$angularVelocity($.$$sub(t1, $.$$mul(t24, $.$$sub(t26, $.$$mul(t28, Px)))));
        t30 = b2.get$linearVelocity();
        t31 = t30.get$x();
      case 16:
        state0 = 0;
        t33 = b2.get$invMass();
      case 17:
        state0 = 0;
        t30.set$x($.$$add(t31, $.$$mul(t33, Px)));
        t30 = b2.get$linearVelocity();
        t35 = t30.get$y();
      case 18:
        state0 = 0;
        t37 = b2.get$invMass();
      case 19:
        state0 = 0;
        t30.set$y($.$$add(t35, $.$$mul(t37, Py)));
        t30 = b2.get$angularVelocity();
      case 20:
        state0 = 0;
        t40 = b2.get$invInertia();
      case 21:
        state0 = 0;
        t42 = r2.x;
      case 22:
        state0 = 0;
        t42 = $.$$mul(t42, Py);
        t44 = r2.y;
      case 23:
        var v1, v2, imp;
        state0 = 0;
        b2.set$angularVelocity($.$$add(t30, $.$$mul(t40, $.$$sub(t42, $.$$mul(t44, Px)))));
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var t1, b1, b2, r1, r2, d, t3, t7, t9, len, t14, C, t16, imp, t18, t19, Px, Py, t21, t23, t25, t27, t29, t31, t33, t35, t37, t39, t41, t43, t45, t47, t49, t51;
    t1 = this.frequencyHz;
    if (typeof t1 !== "number")
      return this.solvePositionConstraints$1$bailout1(1, t1);
    if (t1 > 0)
      return true;
    b1 = this.bodyA;
    b2 = this.bodyB;
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    d = $.Vector$(0, 0);
    r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
    r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
    t1 = b2.get$sweep().get$center().get$x();
    t3 = r2.x;
    if (typeof t1 !== "number")
      return this.solvePositionConstraints$1$bailout1(2, t1, r1, r2, d, b1, b2);
    if (typeof t3 !== "number")
      return this.solvePositionConstraints$1$bailout1(3, t1, r1, r2, d, b1, b2, t3);
    t3 = t1 + t3;
    t1 = b1.get$sweep().get$center().get$x();
    if (typeof t1 !== "number")
      return this.solvePositionConstraints$1$bailout1(4, t1, r1, r2, d, b1, b2, t3);
    t1 = t3 - t1;
    t3 = r1.x;
    if (typeof t3 !== "number")
      return this.solvePositionConstraints$1$bailout1(5, t1, r1, r2, d, b1, b2, t3);
    d.x = t1 - t3;
    t7 = b2.get$sweep().get$center().get$y();
    t9 = r2.y;
    if (typeof t7 !== "number")
      return this.solvePositionConstraints$1$bailout1(6, 0, r1, r2, d, b1, b2, 0, t7);
    if (typeof t9 !== "number")
      return this.solvePositionConstraints$1$bailout1(7, 0, r1, r2, d, b1, b2, 0, t7, t9);
    t9 = t7 + t9;
    t7 = b1.get$sweep().get$center().get$y();
    if (typeof t7 !== "number")
      return this.solvePositionConstraints$1$bailout1(8, 0, r1, r2, d, b1, b2, 0, t7, t9);
    t7 = t9 - t7;
    t9 = r1.y;
    if (typeof t9 !== "number")
      return this.solvePositionConstraints$1$bailout1(9, 0, r1, r2, d, b1, b2, 0, t7, t9);
    d.y = t7 - t9;
    len = d.normalize$0();
    t14 = this.length;
    if (typeof len !== "number")
      return this.solvePositionConstraints$1$bailout1(10, 0, r1, r2, d, b1, b2, 0, 0, 0, len);
    if (typeof t14 !== "number")
      return this.solvePositionConstraints$1$bailout1(11, 0, r1, r2, d, b1, b2, 0, 0, 0, len, t14);
    C = $.max(-0.2, $.min(len - t14, 0.2));
    t16 = this.mass;
    if (typeof t16 !== "number")
      return this.solvePositionConstraints$1$bailout1(12, 0, r1, r2, d, b1, b2, 0, 0, 0, 0, 0, t16, C);
    imp = -t16 * C;
    t18 = this.u;
    t18.setFrom$1(d);
    t19 = t18.x;
    if (typeof t19 !== "number")
      return this.solvePositionConstraints$1$bailout1(13, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, t19, imp);
    Px = imp * t19;
    t18 = t18.y;
    if (typeof t18 !== "number")
      return this.solvePositionConstraints$1$bailout1(14, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, imp, $.CONSTANT4, Px);
    Py = imp * t18;
    t18 = b1.get$sweep().get$center();
    t21 = t18.get$x();
    t23 = b1.get$invMass();
    if (typeof t23 !== "number")
      return this.solvePositionConstraints$1$bailout1(16, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, t21, Px, Py, t23);
    if (typeof t21 !== "number")
      return this.solvePositionConstraints$1$bailout1(15, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, t21, Px, Py);
    t18.set$x(t21 - t23 * Px);
    t18 = b1.get$sweep().get$center();
    t25 = t18.get$y();
    t27 = b1.get$invMass();
    if (typeof t27 !== "number")
      return this.solvePositionConstraints$1$bailout1(18, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, t25, t27);
    if (typeof t25 !== "number")
      return this.solvePositionConstraints$1$bailout1(17, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, t25);
    t18.set$y(t25 - t27 * Py);
    t18 = b1.get$sweep();
    t29 = t18.get$angle();
    t31 = b1.get$invInertia();
    t33 = r1.x;
    if (typeof t33 !== "number")
      return this.solvePositionConstraints$1$bailout1(21, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, t29, t31, t33);
    t33 *= Py;
    t35 = r1.y;
    if (typeof t35 !== "number")
      return this.solvePositionConstraints$1$bailout1(22, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, t29, t31, t33, t35);
    if (typeof t31 !== "number")
      return this.solvePositionConstraints$1$bailout1(20, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, t29, t31);
    if (typeof t29 !== "number")
      return this.solvePositionConstraints$1$bailout1(19, 0, r1, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, t29);
    t18.set$angle(t29 - t31 * (t33 - t35 * Px));
    t18 = b2.get$sweep().get$center();
    t37 = t18.get$x();
    t39 = b2.get$invMass();
    if (typeof t39 !== "number")
      return this.solvePositionConstraints$1$bailout1(24, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, t37, t39);
    if (typeof t37 !== "number")
      return this.solvePositionConstraints$1$bailout1(23, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, t37);
    t18.set$x(t37 + t39 * Px);
    t18 = b2.get$sweep().get$center();
    t41 = t18.get$y();
    t43 = b2.get$invMass();
    if (typeof t43 !== "number")
      return this.solvePositionConstraints$1$bailout1(26, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t43);
    if (typeof t41 !== "number")
      return this.solvePositionConstraints$1$bailout1(25, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41);
    t18.set$y(t41 + t43 * Py);
    t18 = b2.get$sweep();
    t45 = t18.get$angle();
    t47 = b2.get$invInertia();
    t49 = r2.x;
    if (typeof t49 !== "number")
      return this.solvePositionConstraints$1$bailout1(29, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t47, t49);
    t49 *= Py;
    t51 = r2.y;
    if (typeof t51 !== "number")
      return this.solvePositionConstraints$1$bailout1(30, 0, 0, 0, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t47, t49, t51);
    if (typeof t47 !== "number")
      return this.solvePositionConstraints$1$bailout1(28, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t47);
    if (typeof t45 !== "number")
      return this.solvePositionConstraints$1$bailout1(27, 0, 0, r2, 0, b1, b2, 0, 0, 0, 0, 0, 0, C, t18, 0, 0, 0, Px, Py, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45);
    t18.set$angle(t45 + t47 * (t49 - t51 * Px));
    b1.synchronizeTransform$0();
    b2.synchronizeTransform$0();
    t18 = $.CONSTANT4.abs$0(C);
    if (typeof t18 !== "number")
      return this.solvePositionConstraints$1$bailout1(31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18);
    return t18 < 0.005;
  },
  solvePositionConstraints$1$bailout1: function(state0, t1, r1, r2, d, b1, b2, t3, t7, t9, len, t14, t16, C, t18, t19, imp, t21, Px, Py, t23, t25, t27, t29, t31, t33, t35, t37, t39, t41, t43, t45, t47, t49, t51) {
    switch (state0) {
      case 0:
        t1 = this.frequencyHz;
      case 1:
        state0 = 0;
        if ($.$$gt(t1, 0) === true)
          return true;
        b1 = this.bodyA;
        b2 = this.bodyB;
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        d = $.Vector$(0, 0);
        r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
        r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
        $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
        $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
        t1 = b2.get$sweep().get$center().get$x();
      case 2:
        state0 = 0;
        t3 = r2.x;
      case 3:
        state0 = 0;
        t3 = $.$$add(t1, t3);
        t1 = b1.get$sweep().get$center().get$x();
      case 4:
        state0 = 0;
        t1 = $.$$sub(t3, t1);
        t3 = r1.x;
      case 5:
        state0 = 0;
        d.x = $.$$sub(t1, t3);
        t7 = b2.get$sweep().get$center().get$y();
      case 6:
        state0 = 0;
        t9 = r2.y;
      case 7:
        state0 = 0;
        t9 = $.$$add(t7, t9);
        t7 = b1.get$sweep().get$center().get$y();
      case 8:
        state0 = 0;
        t7 = $.$$sub(t9, t7);
        t9 = r1.y;
      case 9:
        state0 = 0;
        d.y = $.$$sub(t7, t9);
        len = d.normalize$0();
      case 10:
        state0 = 0;
        t14 = this.length;
      case 11:
        state0 = 0;
        C = $.max(-0.2, $.min($.$$sub(len, t14), 0.2));
        t16 = this.mass;
      case 12:
        state0 = 0;
        imp = $.$$mul($.$$negate(t16), C);
        t18 = this.u;
        t18.setFrom$1(d);
        t19 = t18.x;
      case 13:
        state0 = 0;
        t21 = $.getInterceptor$JSNumber(imp);
        Px = t21.$mul(imp, t19);
        t18 = t18.y;
      case 14:
        state0 = 0;
        Py = t21.$mul(imp, t18);
        t18 = b1.get$sweep().get$center();
        t21 = t18.get$x();
      case 15:
        state0 = 0;
        t23 = b1.get$invMass();
      case 16:
        state0 = 0;
        t18.set$x($.$$sub(t21, $.$$mul(t23, Px)));
        t18 = b1.get$sweep().get$center();
        t25 = t18.get$y();
      case 17:
        state0 = 0;
        t27 = b1.get$invMass();
      case 18:
        state0 = 0;
        t18.set$y($.$$sub(t25, $.$$mul(t27, Py)));
        t18 = b1.get$sweep();
        t29 = t18.get$angle();
      case 19:
        state0 = 0;
        t31 = b1.get$invInertia();
      case 20:
        state0 = 0;
        t33 = r1.x;
      case 21:
        state0 = 0;
        t33 = $.$$mul(t33, Py);
        t35 = r1.y;
      case 22:
        state0 = 0;
        t18.set$angle($.$$sub(t29, $.$$mul(t31, $.$$sub(t33, $.$$mul(t35, Px)))));
        t18 = b2.get$sweep().get$center();
        t37 = t18.get$x();
      case 23:
        state0 = 0;
        t39 = b2.get$invMass();
      case 24:
        state0 = 0;
        t18.set$x($.$$add(t37, $.$$mul(t39, Px)));
        t18 = b2.get$sweep().get$center();
        t41 = t18.get$y();
      case 25:
        state0 = 0;
        t43 = b2.get$invMass();
      case 26:
        state0 = 0;
        t18.set$y($.$$add(t41, $.$$mul(t43, Py)));
        t18 = b2.get$sweep();
        t45 = t18.get$angle();
      case 27:
        state0 = 0;
        t47 = b2.get$invInertia();
      case 28:
        state0 = 0;
        t49 = r2.x;
      case 29:
        state0 = 0;
        t49 = $.$$mul(t49, Py);
        t51 = r2.y;
      case 30:
        state0 = 0;
        t18.set$angle($.$$add(t45, $.$$mul(t47, $.$$sub(t49, $.$$mul(t51, Px)))));
        b1.synchronizeTransform$0();
        b2.synchronizeTransform$0();
        t18 = $.CONSTANT4.abs$0(C);
      case 31:
        state0 = 0;
        return $.$$lt(t18, 0.005);
    }
  }
};

$$.DistanceJointDef = {"": "JointDef;localAnchorA>,localAnchorB>,length>,frequencyHz>,dampingRatio>,type,userData,bodyA,bodyB,collideConnected",
  initialize$4: function(b1, b2, anchor1, anchor2) {
    var d;
    this.bodyA = b1;
    this.bodyB = b2;
    this.localAnchorA.setFrom$1(this.bodyA.getLocalPoint$1(anchor1));
    this.localAnchorB.setFrom$1(this.bodyB.getLocalPoint$1(anchor2));
    d = $.Vector$copy(anchor2);
    d.subLocal$1(anchor1);
    this.length = d.get$length();
  },
  DistanceJointDef$0: function() {
    this.type = 3;
  }
};

$$.FrictionJoint = {"": "Joint;_localAnchorA,_localAnchorB,_linearImpulse,_angularImpulse,_maxForce,_maxTorque,type,_prev,_liblib2$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  get$maxForce: function() {
    return this._maxForce;
  },
  get$maxTorque: function() {
    return this._maxTorque;
  },
  initVelocityConstraints$1: function(step) {
    var r1, r2, K, t1, t2, t4, t5, t7, t10, t12, t14, t18, t21, t22, t24, t25, t27, t30, linearMass, t32, t34, t3, P, t6, t8, t16, t20, t28, t36, t38, t40, t42, t44, t46, t49, t51;
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    r1.setFrom$1(this._localAnchorA).subLocal$1(this.bodyA.get$localCenter());
    r2.setFrom$1(this._localAnchorB).subLocal$1(this.bodyB.get$localCenter());
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyA.get$originTransform().get$rotation(), r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyB.get$originTransform().get$rotation(), r2, r2);
    K = $.Matrix22$(null, null);
    t1 = this.bodyA;
    t2 = t1.get$invMass();
    t4 = this.bodyB;
    t5 = t4.get$invMass();
    if (typeof t2 !== "number")
      return this.initVelocityConstraints$1$bailout1(1, step, t2, r1, K, r2);
    if (typeof t5 !== "number")
      return this.initVelocityConstraints$1$bailout1(2, step, t2, r1, K, r2, t5);
    t5 = t2 + t5;
    t1 = t1.get$invInertia();
    t7 = r1.y;
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(3, step, t1, r1, K, r2, t5);
    if (typeof t7 !== "number")
      return this.initVelocityConstraints$1$bailout1(4, step, t1, r1, K, r2, t5, t7);
    t5 += t1 * t7 * t7;
    t4 = t4.get$invInertia();
    t10 = r2.y;
    if (typeof t4 !== "number")
      return this.initVelocityConstraints$1$bailout1(6, step, 0, r1, K, r2, t5, 0, t4);
    if (typeof t10 !== "number")
      return this.initVelocityConstraints$1$bailout1(7, step, 0, r1, K, r2, t5, 0, t4, t10);
    K.col1.set$x(t5 + t4 * t10 * t10);
    t12 = this.bodyA.get$invInertia();
    if (typeof t12 !== "number")
      return this.initVelocityConstraints$1$bailout1(9, step, 0, r1, K, r2, t12);
    t12 = -t12;
    t14 = r1.x;
    if (typeof t14 !== "number")
      return this.initVelocityConstraints$1$bailout1(10, step, 0, r1, K, r2, t12, 0, 0, 0, t14);
    t14 = t12 * t14;
    t12 = r1.y;
    if (typeof t12 !== "number")
      return this.initVelocityConstraints$1$bailout1(11, step, 0, r1, K, r2, t12, 0, 0, 0, t14);
    t12 = t14 * t12;
    t14 = this.bodyB.get$invInertia();
    t18 = r2.x;
    if (typeof t14 !== "number")
      return this.initVelocityConstraints$1$bailout1(12, step, 0, r1, K, r2, t12, 0, 0, 0, t14);
    if (typeof t18 !== "number")
      return this.initVelocityConstraints$1$bailout1(13, step, 0, r1, K, r2, t12, 0, 0, 0, t14, t18);
    t18 = t14 * t18;
    t14 = r2.y;
    if (typeof t14 !== "number")
      return this.initVelocityConstraints$1$bailout1(14, step, 0, r1, K, r2, t12, 0, 0, 0, t14, t18);
    K.col1.set$y(t12 - t18 * t14);
    t21 = K.col1.get$y();
    K.col2.set$x(t21);
    t21 = this.bodyA;
    t22 = t21.get$invMass();
    t24 = this.bodyB;
    t25 = t24.get$invMass();
    if (typeof t22 !== "number")
      return this.initVelocityConstraints$1$bailout1(15, step, 0, r1, K, r2, t22);
    if (typeof t25 !== "number")
      return this.initVelocityConstraints$1$bailout1(16, step, 0, r1, K, r2, t22, 0, 0, 0, 0, 0, t25);
    t25 = t22 + t25;
    t21 = t21.get$invInertia();
    t27 = r1.x;
    if (typeof t21 !== "number")
      return this.initVelocityConstraints$1$bailout1(17, step, 0, r1, K, r2, t21, 0, 0, 0, 0, 0, t25);
    if (typeof t27 !== "number")
      return this.initVelocityConstraints$1$bailout1(18, step, 0, r1, K, r2, t21, 0, 0, 0, 0, 0, t25, t27);
    t25 += t21 * t27 * t27;
    t24 = t24.get$invInertia();
    t30 = r2.x;
    if (typeof t24 !== "number")
      return this.initVelocityConstraints$1$bailout1(20, step, 0, r1, K, r2, 0, 0, 0, 0, 0, 0, t25, 0, t24);
    if (typeof t30 !== "number")
      return this.initVelocityConstraints$1$bailout1(21, step, 0, r1, K, r2, 0, 0, 0, 0, 0, 0, t25, 0, t24, t30);
    K.col2.set$y(t25 + t24 * t30 * t30);
    linearMass = $.Matrix22$(null, null);
    linearMass.setFrom$1(K);
    linearMass.invertLocal$0();
    t32 = this.bodyA.get$invInertia();
    t34 = this.bodyB.get$invInertia();
    if (typeof t32 !== "number")
      return this.initVelocityConstraints$1$bailout1(23, step, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, t32);
    if (typeof t34 !== "number")
      return this.initVelocityConstraints$1$bailout1(24, step, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, t32, 0, 0, 0, t34);
    if (t32 + t34 > 0)
      ;
    t1 = step.get$warmStarting();
    t2 = this._linearImpulse;
    if (t1 === true) {
      t2.mulLocal$1(step.get$dtRatio());
      t1 = this._angularImpulse;
      t3 = step.get$dtRatio();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      this._angularImpulse = t1 * t3;
      P = $.Vector$(0, 0);
      P.setFrom$1(t2);
      t2 = this.bodyA.get$linearVelocity();
      t4 = t2.get$x();
      t6 = this.bodyA.get$invMass();
      t8 = P.x;
      if (typeof t6 !== "number")
        return this.initVelocityConstraints$1$bailout1(26, 0, 0, r1, 0, r2, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t4, P);
      if (typeof t8 !== "number")
        return this.initVelocityConstraints$1$bailout1(27, 0, 0, r1, 0, r2, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t4, P, t8);
      if (typeof t4 !== "number")
        return this.initVelocityConstraints$1$bailout1(25, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t4, P);
      t2.set$x(t4 - t6 * t8);
      t2 = this.bodyA.get$linearVelocity();
      t10 = t2.get$y();
      t12 = this.bodyA.get$invMass();
      t14 = P.y;
      if (typeof t12 !== "number")
        return this.initVelocityConstraints$1$bailout1(29, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, t10, t12);
      if (typeof t14 !== "number")
        return this.initVelocityConstraints$1$bailout1(30, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, t10, t12, t14);
      if (typeof t10 !== "number")
        return this.initVelocityConstraints$1$bailout1(28, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, t10);
      t2.set$y(t10 - t12 * t14);
      t2 = this.bodyA;
      t16 = t2.get$angularVelocity();
      t18 = this.bodyA.get$invInertia();
      t20 = r1.x;
      t22 = P.y;
      if (typeof t20 !== "number")
        return this.initVelocityConstraints$1$bailout1(33, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, t16, t18, t20);
      if (typeof t22 !== "number")
        return this.initVelocityConstraints$1$bailout1(34, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, t16, t18, t20, t22);
      t22 = t20 * t22;
      t20 = r1.y;
      t25 = P.x;
      if (typeof t20 !== "number")
        return this.initVelocityConstraints$1$bailout1(35, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, t16, t18, t20, t22);
      if (typeof t25 !== "number")
        return this.initVelocityConstraints$1$bailout1(36, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, t16, t18, t20, t22, t25);
      t27 = this._angularImpulse;
      if (typeof t18 !== "number")
        return this.initVelocityConstraints$1$bailout1(32, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, t16, t18);
      if (typeof t16 !== "number")
        return this.initVelocityConstraints$1$bailout1(31, 0, 0, r1, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, t16);
      t2.set$angularVelocity(t16 - t18 * (t22 - t20 * t25 + t27));
      t2 = this.bodyB.get$linearVelocity();
      t28 = t2.get$x();
      t30 = this.bodyB.get$invMass();
      t32 = P.x;
      if (typeof t30 !== "number")
        return this.initVelocityConstraints$1$bailout1(38, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28);
      if (typeof t32 !== "number")
        return this.initVelocityConstraints$1$bailout1(39, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, t30, t32, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28);
      if (typeof t28 !== "number")
        return this.initVelocityConstraints$1$bailout1(37, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28);
      t2.set$x(t28 + t30 * t32);
      t2 = this.bodyB.get$linearVelocity();
      t34 = t2.get$y();
      t36 = this.bodyB.get$invMass();
      t38 = P.y;
      if (typeof t36 !== "number")
        return this.initVelocityConstraints$1$bailout1(41, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34);
      if (typeof t38 !== "number")
        return this.initVelocityConstraints$1$bailout1(42, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t38);
      if (typeof t34 !== "number")
        return this.initVelocityConstraints$1$bailout1(40, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34);
      t2.set$y(t34 + t36 * t38);
      t2 = this.bodyB;
      t40 = t2.get$angularVelocity();
      t42 = this.bodyB.get$invInertia();
      t44 = r2.x;
      t46 = P.y;
      if (typeof t44 !== "number")
        return this.initVelocityConstraints$1$bailout1(45, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t42, t44);
      if (typeof t46 !== "number")
        return this.initVelocityConstraints$1$bailout1(46, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t42, t44, t46);
      t46 = t44 * t46;
      t44 = r2.y;
      t49 = P.x;
      if (typeof t44 !== "number")
        return this.initVelocityConstraints$1$bailout1(47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t42, t44, t46);
      if (typeof t49 !== "number")
        return this.initVelocityConstraints$1$bailout1(48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t42, t44, t46, t49);
      t51 = this._angularImpulse;
      if (typeof t42 !== "number")
        return this.initVelocityConstraints$1$bailout1(44, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t42);
      if (typeof t40 !== "number")
        return this.initVelocityConstraints$1$bailout1(43, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40);
      t2.set$angularVelocity(t40 + t42 * (t46 - t44 * t49 + t51));
    } else {
      t2.setZero$0();
      this._angularImpulse = 0;
    }
  },
  initVelocityConstraints$1$bailout1: function(state0, step, t1, r1, K, r2, t3, t6, t9, t11, t15, t19, t23, t26, t29, t31, t35, t2, t4, P, t8, t10, t12, t14, t16, t18, t20, t22, t25, t27, t33, t37, t39, t41, t43, t45, t48) {
    switch (state0) {
      case 0:
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        r1.setFrom$1(this._localAnchorA).subLocal$1(this.bodyA.get$localCenter());
        r2.setFrom$1(this._localAnchorB).subLocal$1(this.bodyB.get$localCenter());
        $.Matrix22_mulMatrixAndVectorToOut(this.bodyA.get$originTransform().get$rotation(), r1, r1);
        $.Matrix22_mulMatrixAndVectorToOut(this.bodyB.get$originTransform().get$rotation(), r2, r2);
        K = $.Matrix22$(null, null);
        t1 = this.bodyA.get$invMass();
      case 1:
        state0 = 0;
        t3 = this.bodyB.get$invMass();
      case 2:
        state0 = 0;
        t3 = $.$$add(t1, t3);
        t1 = this.bodyA.get$invInertia();
      case 3:
        state0 = 0;
        t6 = r1.y;
      case 4:
        state0 = 0;
        t6 = $.$$mul(t1, t6);
        t1 = r1.y;
      case 5:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t6, t1));
        t9 = this.bodyB.get$invInertia();
      case 6:
        state0 = 0;
        t11 = r2.y;
      case 7:
        state0 = 0;
        t11 = $.$$mul(t9, t11);
        t9 = r2.y;
      case 8:
        state0 = 0;
        t3 = $.$$add(t3, $.$$mul(t11, t9));
        K.col1.set$x(t3);
        t3 = this.bodyA.get$invInertia();
      case 9:
        state0 = 0;
        t3 = $.$$negate(t3);
        t15 = r1.x;
      case 10:
        state0 = 0;
        t15 = $.$$mul(t3, t15);
        t3 = r1.y;
      case 11:
        state0 = 0;
        t3 = $.$$mul(t15, t3);
        t15 = this.bodyB.get$invInertia();
      case 12:
        state0 = 0;
        t19 = r2.x;
      case 13:
        state0 = 0;
        t19 = $.$$mul(t15, t19);
        t15 = r2.y;
      case 14:
        state0 = 0;
        t3 = $.$$sub(t3, $.$$mul(t19, t15));
        K.col1.set$y(t3);
        t3 = K.col1.get$y();
        K.col2.set$x(t3);
        t3 = this.bodyA.get$invMass();
      case 15:
        state0 = 0;
        t23 = this.bodyB.get$invMass();
      case 16:
        state0 = 0;
        t23 = $.$$add(t3, t23);
        t3 = this.bodyA.get$invInertia();
      case 17:
        state0 = 0;
        t26 = r1.x;
      case 18:
        state0 = 0;
        t26 = $.$$mul(t3, t26);
        t3 = r1.x;
      case 19:
        state0 = 0;
        t23 = $.$$add(t23, $.$$mul(t26, t3));
        t29 = this.bodyB.get$invInertia();
      case 20:
        state0 = 0;
        t31 = r2.x;
      case 21:
        state0 = 0;
        t31 = $.$$mul(t29, t31);
        t29 = r2.x;
      case 22:
        state0 = 0;
        t23 = $.$$add(t23, $.$$mul(t31, t29));
        K.col2.set$y(t23);
        linearMass = $.Matrix22$(null, null);
        linearMass.setFrom$1(K);
        linearMass.invertLocal$0();
        t23 = this.bodyA.get$invInertia();
      case 23:
        state0 = 0;
        t35 = this.bodyB.get$invInertia();
      case 24:
        state0 = 0;
        angularMass = $.$$add(t23, t35);
        if ($.$$gt(angularMass, 0) === true)
          if (typeof angularMass !== "number")
            throw $.iae(angularMass);
        t1 = step.get$warmStarting();
        t2 = this._linearImpulse;
      default:
        var linearMass, angularMass;
        if (state0 === 48 || state0 === 47 || state0 === 46 || state0 === 45 || state0 === 44 || state0 === 43 || state0 === 42 || state0 === 41 || state0 === 40 || state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 33 || state0 === 32 || state0 === 31 || state0 === 30 || state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 0 && t1 === true)
          switch (state0) {
            case 0:
              t2.mulLocal$1(step.get$dtRatio());
              t1 = this._angularImpulse;
              t3 = step.get$dtRatio();
              if (typeof t3 !== "number")
                throw $.iae(t3);
              this._angularImpulse = t1 * t3;
              P = $.Vector$(0, 0);
              P.setFrom$1(t2);
              t2 = this.bodyA.get$linearVelocity();
              t4 = t2.get$x();
            case 25:
              state0 = 0;
              t6 = this.bodyA.get$invMass();
            case 26:
              state0 = 0;
              t8 = P.x;
            case 27:
              state0 = 0;
              t2.set$x($.$$sub(t4, $.$$mul(t6, t8)));
              t2 = this.bodyA.get$linearVelocity();
              t10 = t2.get$y();
            case 28:
              state0 = 0;
              t12 = this.bodyA.get$invMass();
            case 29:
              state0 = 0;
              t14 = P.y;
            case 30:
              state0 = 0;
              t2.set$y($.$$sub(t10, $.$$mul(t12, t14)));
              t2 = this.bodyA;
              t16 = t2.get$angularVelocity();
            case 31:
              state0 = 0;
              t18 = this.bodyA.get$invInertia();
            case 32:
              state0 = 0;
              t20 = r1.x;
            case 33:
              state0 = 0;
              t22 = P.y;
            case 34:
              state0 = 0;
              t22 = $.$$mul(t20, t22);
              t20 = r1.y;
            case 35:
              state0 = 0;
              t25 = P.x;
            case 36:
              state0 = 0;
              t2.set$angularVelocity($.$$sub(t16, $.$$mul(t18, $.$$add($.$$sub(t22, $.$$mul(t20, t25)), this._angularImpulse))));
              t2 = this.bodyB.get$linearVelocity();
              t27 = t2.get$x();
            case 37:
              state0 = 0;
              t29 = this.bodyB.get$invMass();
            case 38:
              state0 = 0;
              t31 = P.x;
            case 39:
              state0 = 0;
              t2.set$x($.$$add(t27, $.$$mul(t29, t31)));
              t2 = this.bodyB.get$linearVelocity();
              t33 = t2.get$y();
            case 40:
              state0 = 0;
              t35 = this.bodyB.get$invMass();
            case 41:
              state0 = 0;
              t37 = P.y;
            case 42:
              state0 = 0;
              t2.set$y($.$$add(t33, $.$$mul(t35, t37)));
              t2 = this.bodyB;
              t39 = t2.get$angularVelocity();
            case 43:
              state0 = 0;
              t41 = this.bodyB.get$invInertia();
            case 44:
              state0 = 0;
              t43 = r2.x;
            case 45:
              state0 = 0;
              t45 = P.y;
            case 46:
              state0 = 0;
              t45 = $.$$mul(t43, t45);
              t43 = r2.y;
            case 47:
              state0 = 0;
              t48 = P.x;
            case 48:
              state0 = 0;
              t2.set$angularVelocity($.$$add(t39, $.$$mul(t41, $.$$add($.$$sub(t45, $.$$mul(t43, t48)), this._angularImpulse))));
          }
        else {
          t2.setZero$0();
          this._angularImpulse = 0;
        }
    }
  },
  solveVelocityConstraints$1: function(step) {
    var t1, t3, Cdot, t5, angularMass, impulse, oldImpulse, maxImpulse, impulse0, t6, t8, t10, r1, r2, temp, K, t12, t14, t15, t17, t20, t22, t24, t28, t31, t32, t34, t35, t37, t40, linearMass, impulse1, t42, t43, t45, maxImpulse0, t2, t4, t16, t18, t23, t25, t27, t29, t33, t39, t41, t44, t47;
    t1 = this.bodyB.get$angularVelocity();
    t3 = this.bodyA.get$angularVelocity();
    if (typeof t1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(1, step, t1);
    if (typeof t3 !== "number")
      return this.solveVelocityConstraints$1$bailout1(2, step, t1, t3);
    Cdot = t1 - t3;
    t3 = this.bodyA.get$invInertia();
    t5 = this.bodyB.get$invInertia();
    if (typeof t3 !== "number")
      return this.solveVelocityConstraints$1$bailout1(3, step, 0, t3, Cdot);
    if (typeof t5 !== "number")
      return this.solveVelocityConstraints$1$bailout1(4, step, 0, t3, Cdot, t5);
    angularMass = t3 + t5;
    impulse = -(angularMass > 0 ? 1 / angularMass : angularMass) * Cdot;
    oldImpulse = this._angularImpulse;
    t1 = step.get$dt();
    t3 = this._maxTorque;
    if (typeof t1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(6, step, t1, 0, 0, 0, 0, oldImpulse, impulse);
    if (typeof t3 !== "number")
      return this.solveVelocityConstraints$1$bailout1(7, step, t1, t3, 0, 0, 0, oldImpulse, impulse);
    maxImpulse = t1 * t3;
    this._angularImpulse = $.max(-maxImpulse, $.min(oldImpulse + impulse, maxImpulse));
    impulse0 = this._angularImpulse - oldImpulse;
    t3 = this.bodyA;
    t1 = t3.get$angularVelocity();
    t6 = this.bodyA.get$invInertia();
    if (typeof t6 !== "number")
      return this.solveVelocityConstraints$1$bailout1(9, step, t3, 0, 0, t1, 0, 0, 0, impulse0, t6);
    if (typeof t1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(8, step, t3, 0, 0, t1, 0, 0, 0, impulse0);
    t3.set$angularVelocity(t1 - t6 * impulse0);
    t3 = this.bodyB;
    t8 = t3.get$angularVelocity();
    t10 = this.bodyB.get$invInertia();
    if (typeof t10 !== "number")
      return this.solveVelocityConstraints$1$bailout1(11, step, t3, 0, 0, 0, 0, 0, 0, impulse0, 0, t8, t10);
    if (typeof t8 !== "number")
      return this.solveVelocityConstraints$1$bailout1(10, step, t3, 0, 0, 0, 0, 0, 0, impulse0, 0, t8);
    t3.set$angularVelocity(t8 + t10 * impulse0);
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    r1.setFrom$1(this._localAnchorA).subLocal$1(this.bodyA.get$localCenter());
    r2.setFrom$1(this._localAnchorB).subLocal$1(this.bodyB.get$localCenter());
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyA.get$originTransform().get$rotation(), r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(this.bodyB.get$originTransform().get$rotation(), r2, r2);
    temp = $.Vector$(0, 0);
    Cdot = $.Vector$(0, 0);
    $.Vector_crossNumAndVectorToOut(this.bodyA.get$angularVelocity(), r1, temp);
    $.Vector_crossNumAndVectorToOut(this.bodyB.get$angularVelocity(), r2, Cdot);
    Cdot.addLocal$1(this.bodyB.get$linearVelocity()).subLocal$1(this.bodyA.get$linearVelocity()).subLocal$1(temp);
    K = $.Matrix22$(null, null);
    t3 = this.bodyA;
    t12 = t3.get$invMass();
    t14 = this.bodyB;
    t15 = t14.get$invMass();
    if (typeof t12 !== "number")
      return this.solveVelocityConstraints$1$bailout1(12, step, t12, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2);
    if (typeof t15 !== "number")
      return this.solveVelocityConstraints$1$bailout1(13, step, t12, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t15);
    t15 = t12 + t15;
    t3 = t3.get$invInertia();
    t17 = r1.y;
    if (typeof t3 !== "number")
      return this.solveVelocityConstraints$1$bailout1(14, step, t3, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t15);
    if (typeof t17 !== "number")
      return this.solveVelocityConstraints$1$bailout1(15, step, t3, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t15, t17);
    t15 += t3 * t17 * t17;
    t14 = t14.get$invInertia();
    t20 = r2.y;
    if (typeof t14 !== "number")
      return this.solveVelocityConstraints$1$bailout1(17, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t15, 0, t14);
    if (typeof t20 !== "number")
      return this.solveVelocityConstraints$1$bailout1(18, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t15, 0, t14, t20);
    K.col1.set$x(t15 + t14 * t20 * t20);
    t22 = this.bodyA.get$invInertia();
    if (typeof t22 !== "number")
      return this.solveVelocityConstraints$1$bailout1(20, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t22);
    t22 = -t22;
    t24 = r1.x;
    if (typeof t24 !== "number")
      return this.solveVelocityConstraints$1$bailout1(21, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t22, 0, 0, 0, t24);
    t24 = t22 * t24;
    t22 = r1.y;
    if (typeof t22 !== "number")
      return this.solveVelocityConstraints$1$bailout1(22, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t22, 0, 0, 0, t24);
    t22 = t24 * t22;
    t24 = this.bodyB.get$invInertia();
    t28 = r2.x;
    if (typeof t24 !== "number")
      return this.solveVelocityConstraints$1$bailout1(23, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t22, 0, 0, 0, t24);
    if (typeof t28 !== "number")
      return this.solveVelocityConstraints$1$bailout1(24, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t22, 0, 0, 0, t24, t28);
    t28 = t24 * t28;
    t24 = r2.y;
    if (typeof t24 !== "number")
      return this.solveVelocityConstraints$1$bailout1(25, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t22, 0, 0, 0, t24, t28);
    K.col1.set$y(t22 - t28 * t24);
    t31 = K.col1.get$y();
    K.col2.set$x(t31);
    t31 = this.bodyA;
    t32 = t31.get$invMass();
    t34 = this.bodyB;
    t35 = t34.get$invMass();
    if (typeof t32 !== "number")
      return this.solveVelocityConstraints$1$bailout1(26, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t32);
    if (typeof t35 !== "number")
      return this.solveVelocityConstraints$1$bailout1(27, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t32, 0, 0, 0, 0, 0, t35);
    t35 = t32 + t35;
    t31 = t31.get$invInertia();
    t37 = r1.x;
    if (typeof t31 !== "number")
      return this.solveVelocityConstraints$1$bailout1(28, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t31, 0, 0, 0, 0, 0, t35);
    if (typeof t37 !== "number")
      return this.solveVelocityConstraints$1$bailout1(29, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, t31, 0, 0, 0, 0, 0, t35, t37);
    t35 += t31 * t37 * t37;
    t34 = t34.get$invInertia();
    t40 = r2.x;
    if (typeof t34 !== "number")
      return this.solveVelocityConstraints$1$bailout1(31, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, 0, 0, 0, 0, 0, 0, t35, 0, t34);
    if (typeof t40 !== "number")
      return this.solveVelocityConstraints$1$bailout1(32, step, 0, 0, Cdot, 0, 0, 0, 0, 0, 0, 0, 0, K, r1, r2, 0, 0, 0, 0, 0, 0, t35, 0, t34, t40);
    K.col2.set$y(t35 + t34 * t40 * t40);
    linearMass = $.Matrix22$(null, null);
    linearMass.setFrom$1(K);
    linearMass.invertLocal$0();
    impulse1 = $.Vector$(0, 0);
    $.Matrix22_mulMatrixAndVectorToOut(linearMass, Cdot, impulse1);
    impulse1.negateLocal$0();
    oldImpulse = $.Vector$(0, 0);
    t42 = this._linearImpulse;
    oldImpulse.setFrom$1(t42);
    t42.addLocal$1(impulse1);
    t43 = step.get$dt();
    t45 = this._maxForce;
    if (typeof t43 !== "number")
      return this.solveVelocityConstraints$1$bailout1(34, 0, 0, 0, 0, 0, 0, oldImpulse, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, t42, 0, 0, 0, t43, impulse1);
    if (typeof t45 !== "number")
      return this.solveVelocityConstraints$1$bailout1(35, 0, 0, 0, 0, 0, 0, oldImpulse, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, t42, 0, 0, 0, t43, impulse1, t45);
    maxImpulse0 = t43 * t45;
    t1 = t42.get$lengthSquared();
    if (typeof t1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(36, 0, t1, 0, 0, 0, 0, oldImpulse, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, t42, 0, 0, 0, 0, impulse1, 0, maxImpulse0);
    if (t1 > maxImpulse0 * maxImpulse0) {
      t42.normalize$0();
      t42.mulLocal$1(maxImpulse0);
    }
    impulse1.setFrom$1(t42).subLocal$1(oldImpulse);
    t1 = this.bodyA.get$linearVelocity();
    t2 = t1.get$x();
    t4 = impulse1.x;
    t6 = this.bodyA.get$invMass();
    if (typeof t4 !== "number")
      return this.solveVelocityConstraints$1$bailout1(38, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, t2, t4);
    if (typeof t6 !== "number")
      return this.solveVelocityConstraints$1$bailout1(39, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, t2, t4, t6);
    if (typeof t2 !== "number")
      return this.solveVelocityConstraints$1$bailout1(37, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, t2);
    t1.set$x(t2 - t4 * t6);
    t1 = this.bodyA.get$linearVelocity();
    t8 = t1.get$y();
    t10 = impulse1.y;
    t12 = this.bodyA.get$invMass();
    if (typeof t10 !== "number")
      return this.solveVelocityConstraints$1$bailout1(41, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, t8, t10);
    if (typeof t12 !== "number")
      return this.solveVelocityConstraints$1$bailout1(42, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, t8, t10, t12);
    if (typeof t8 !== "number")
      return this.solveVelocityConstraints$1$bailout1(40, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, t8);
    t1.set$y(t8 - t10 * t12);
    t1 = this.bodyA;
    t14 = t1.get$angularVelocity();
    t16 = this.bodyA.get$invInertia();
    t18 = r1.x;
    t20 = impulse1.y;
    if (typeof t18 !== "number")
      return this.solveVelocityConstraints$1$bailout1(45, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, t16, t18);
    if (typeof t20 !== "number")
      return this.solveVelocityConstraints$1$bailout1(46, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, t14, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, t16, t18);
    t20 = t18 * t20;
    t18 = r1.y;
    t23 = impulse1.x;
    if (typeof t18 !== "number")
      return this.solveVelocityConstraints$1$bailout1(47, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, t14, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, t16, t18);
    if (typeof t23 !== "number")
      return this.solveVelocityConstraints$1$bailout1(48, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, t14, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, t16, t18, t23);
    if (typeof t16 !== "number")
      return this.solveVelocityConstraints$1$bailout1(44, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, t16);
    if (typeof t14 !== "number")
      return this.solveVelocityConstraints$1$bailout1(43, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r1, r2, t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1);
    t1.set$angularVelocity(t14 - t16 * (t20 - t18 * t23));
    t1 = this.bodyB.get$linearVelocity();
    t25 = t1.get$x();
    t27 = impulse1.x;
    t29 = this.bodyB.get$invMass();
    if (typeof t27 !== "number")
      return this.solveVelocityConstraints$1$bailout1(50, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, t27);
    if (typeof t29 !== "number")
      return this.solveVelocityConstraints$1$bailout1(51, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, t27, t29);
    if (typeof t25 !== "number")
      return this.solveVelocityConstraints$1$bailout1(49, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25);
    t1.set$x(t25 + t27 * t29);
    t1 = this.bodyB.get$linearVelocity();
    t31 = t1.get$y();
    t33 = impulse1.y;
    t35 = this.bodyB.get$invMass();
    if (typeof t33 !== "number")
      return this.solveVelocityConstraints$1$bailout1(53, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t33);
    if (typeof t35 !== "number")
      return this.solveVelocityConstraints$1$bailout1(54, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t33, t35);
    if (typeof t31 !== "number")
      return this.solveVelocityConstraints$1$bailout1(52, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31);
    t1.set$y(t31 + t33 * t35);
    t1 = this.bodyB;
    t37 = t1.get$angularVelocity();
    t39 = this.bodyB.get$invInertia();
    t41 = r2.x;
    t44 = impulse1.y;
    if (typeof t41 !== "number")
      return this.solveVelocityConstraints$1$bailout1(57, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, t39, t41, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37);
    if (typeof t44 !== "number")
      return this.solveVelocityConstraints$1$bailout1(58, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, t39, t41, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, t44);
    t44 = t41 * t44;
    t41 = r2.y;
    t47 = impulse1.x;
    if (typeof t41 !== "number")
      return this.solveVelocityConstraints$1$bailout1(59, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, t41, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, t44);
    if (typeof t47 !== "number")
      return this.solveVelocityConstraints$1$bailout1(60, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, t41, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, t44);
    if (typeof t39 !== "number")
      return this.solveVelocityConstraints$1$bailout1(56, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37);
    if (typeof t37 !== "number")
      return this.solveVelocityConstraints$1$bailout1(55, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, impulse1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37);
    t1.set$angularVelocity(t37 + t39 * (t44 - t41 * t47));
  },
  solveVelocityConstraints$1$bailout1: function(state0, step, t1, t3, Cdot, t5, angularMass, oldImpulse, impulse, impulse0, t7, t9, t11, K, r1, r2, t14, t17, t20, t22, t26, t30, t34, t37, t40, t42, t45, impulse1, t47, maxImpulse0, t2, t4, t6, t8, t10, t12, t16, t18, t23, t25, t27, t29, t31, t33, t36, t38, t44) {
    switch (state0) {
      case 0:
        t1 = this.bodyB.get$angularVelocity();
      case 1:
        state0 = 0;
        t3 = this.bodyA.get$angularVelocity();
      case 2:
        state0 = 0;
        Cdot = $.$$sub(t1, t3);
        t3 = this.bodyA.get$invInertia();
      case 3:
        state0 = 0;
        t5 = this.bodyB.get$invInertia();
      case 4:
        state0 = 0;
        angularMass = $.$$add(t3, t5);
      case 5:
        if (state0 === 5 || state0 === 0 && $.$$gt(angularMass, 0) === true)
          switch (state0) {
            case 0:
              if (typeof angularMass !== "number")
                throw $.iae(angularMass);
              angularMass = 1 / angularMass;
            case 5:
              state0 = 0;
          }
        impulse = $.$$mul($.$$negate(angularMass), Cdot);
        oldImpulse = this._angularImpulse;
        t1 = step.get$dt();
      case 6:
        state0 = 0;
        t3 = this._maxTorque;
      case 7:
        state0 = 0;
        maxImpulse = $.$$mul(t1, t3);
        t3 = this._angularImpulse;
        if (typeof impulse !== "number")
          throw $.iae(impulse);
        this._angularImpulse = $.max($.$$negate(maxImpulse), $.min(t3 + impulse, maxImpulse));
        impulse0 = this._angularImpulse - oldImpulse;
        t1 = this.bodyA;
        t5 = t1.get$angularVelocity();
      case 8:
        state0 = 0;
        t7 = this.bodyA.get$invInertia();
      case 9:
        state0 = 0;
        t1.set$angularVelocity($.$$sub(t5, $.$$mul(t7, impulse0)));
        t1 = this.bodyB;
        t9 = t1.get$angularVelocity();
      case 10:
        state0 = 0;
        t11 = this.bodyB.get$invInertia();
      case 11:
        state0 = 0;
        t1.set$angularVelocity($.$$add(t9, $.$$mul(t11, impulse0)));
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        r1.setFrom$1(this._localAnchorA).subLocal$1(this.bodyA.get$localCenter());
        r2.setFrom$1(this._localAnchorB).subLocal$1(this.bodyB.get$localCenter());
        $.Matrix22_mulMatrixAndVectorToOut(this.bodyA.get$originTransform().get$rotation(), r1, r1);
        $.Matrix22_mulMatrixAndVectorToOut(this.bodyB.get$originTransform().get$rotation(), r2, r2);
        temp = $.Vector$(0, 0);
        Cdot = $.Vector$(0, 0);
        $.Vector_crossNumAndVectorToOut(this.bodyA.get$angularVelocity(), r1, temp);
        $.Vector_crossNumAndVectorToOut(this.bodyB.get$angularVelocity(), r2, Cdot);
        Cdot.addLocal$1(this.bodyB.get$linearVelocity()).subLocal$1(this.bodyA.get$linearVelocity()).subLocal$1(temp);
        K = $.Matrix22$(null, null);
        t1 = this.bodyA.get$invMass();
      case 12:
        state0 = 0;
        t14 = this.bodyB.get$invMass();
      case 13:
        state0 = 0;
        t14 = $.$$add(t1, t14);
        t1 = this.bodyA.get$invInertia();
      case 14:
        state0 = 0;
        t17 = r1.y;
      case 15:
        state0 = 0;
        t17 = $.$$mul(t1, t17);
        t1 = r1.y;
      case 16:
        state0 = 0;
        t14 = $.$$add(t14, $.$$mul(t17, t1));
        t20 = this.bodyB.get$invInertia();
      case 17:
        state0 = 0;
        t22 = r2.y;
      case 18:
        state0 = 0;
        t22 = $.$$mul(t20, t22);
        t20 = r2.y;
      case 19:
        state0 = 0;
        t14 = $.$$add(t14, $.$$mul(t22, t20));
        K.col1.set$x(t14);
        t14 = this.bodyA.get$invInertia();
      case 20:
        state0 = 0;
        t14 = $.$$negate(t14);
        t26 = r1.x;
      case 21:
        state0 = 0;
        t26 = $.$$mul(t14, t26);
        t14 = r1.y;
      case 22:
        state0 = 0;
        t14 = $.$$mul(t26, t14);
        t26 = this.bodyB.get$invInertia();
      case 23:
        state0 = 0;
        t30 = r2.x;
      case 24:
        state0 = 0;
        t30 = $.$$mul(t26, t30);
        t26 = r2.y;
      case 25:
        state0 = 0;
        t14 = $.$$sub(t14, $.$$mul(t30, t26));
        K.col1.set$y(t14);
        t14 = K.col1.get$y();
        K.col2.set$x(t14);
        t14 = this.bodyA.get$invMass();
      case 26:
        state0 = 0;
        t34 = this.bodyB.get$invMass();
      case 27:
        state0 = 0;
        t34 = $.$$add(t14, t34);
        t14 = this.bodyA.get$invInertia();
      case 28:
        state0 = 0;
        t37 = r1.x;
      case 29:
        state0 = 0;
        t37 = $.$$mul(t14, t37);
        t14 = r1.x;
      case 30:
        state0 = 0;
        t34 = $.$$add(t34, $.$$mul(t37, t14));
        t40 = this.bodyB.get$invInertia();
      case 31:
        state0 = 0;
        t42 = r2.x;
      case 32:
        state0 = 0;
        t42 = $.$$mul(t40, t42);
        t40 = r2.x;
      case 33:
        state0 = 0;
        t34 = $.$$add(t34, $.$$mul(t42, t40));
        K.col2.set$y(t34);
        linearMass = $.Matrix22$(null, null);
        linearMass.setFrom$1(K);
        linearMass.invertLocal$0();
        impulse1 = $.Vector$(0, 0);
        $.Matrix22_mulMatrixAndVectorToOut(linearMass, Cdot, impulse1);
        impulse1.negateLocal$0();
        oldImpulse = $.Vector$(0, 0);
        t34 = this._linearImpulse;
        oldImpulse.setFrom$1(t34);
        t34.addLocal$1(impulse1);
        t45 = step.get$dt();
      case 34:
        state0 = 0;
        t47 = this._maxForce;
      case 35:
        state0 = 0;
        maxImpulse0 = $.$$mul(t45, t47);
        t1 = t34.get$lengthSquared();
      case 36:
        state0 = 0;
        if ($.$$gt(t1, $.$$mul(maxImpulse0, maxImpulse0)) === true) {
          t34.normalize$0();
          t34.mulLocal$1(maxImpulse0);
        }
        impulse1.setFrom$1(t34).subLocal$1(oldImpulse);
        t1 = this.bodyA.get$linearVelocity();
        t2 = t1.get$x();
      case 37:
        state0 = 0;
        t4 = impulse1.x;
      case 38:
        state0 = 0;
        t6 = this.bodyA.get$invMass();
      case 39:
        state0 = 0;
        t1.set$x($.$$sub(t2, $.$$mul(t4, t6)));
        t1 = this.bodyA.get$linearVelocity();
        t8 = t1.get$y();
      case 40:
        state0 = 0;
        t10 = impulse1.y;
      case 41:
        state0 = 0;
        t12 = this.bodyA.get$invMass();
      case 42:
        state0 = 0;
        t1.set$y($.$$sub(t8, $.$$mul(t10, t12)));
        t1 = this.bodyA;
        t14 = t1.get$angularVelocity();
      case 43:
        state0 = 0;
        t16 = this.bodyA.get$invInertia();
      case 44:
        state0 = 0;
        t18 = r1.x;
      case 45:
        state0 = 0;
        t20 = impulse1.y;
      case 46:
        state0 = 0;
        t20 = $.$$mul(t18, t20);
        t18 = r1.y;
      case 47:
        state0 = 0;
        t23 = impulse1.x;
      case 48:
        state0 = 0;
        t1.set$angularVelocity($.$$sub(t14, $.$$mul(t16, $.$$sub(t20, $.$$mul(t18, t23)))));
        t1 = this.bodyB.get$linearVelocity();
        t25 = t1.get$x();
      case 49:
        state0 = 0;
        t27 = impulse1.x;
      case 50:
        state0 = 0;
        t29 = this.bodyB.get$invMass();
      case 51:
        state0 = 0;
        t1.set$x($.$$add(t25, $.$$mul(t27, t29)));
        t1 = this.bodyB.get$linearVelocity();
        t31 = t1.get$y();
      case 52:
        state0 = 0;
        t33 = impulse1.y;
      case 53:
        state0 = 0;
        t36 = this.bodyB.get$invMass();
      case 54:
        state0 = 0;
        t1.set$y($.$$add(t31, $.$$mul(t33, t36)));
        t1 = this.bodyB;
        t38 = t1.get$angularVelocity();
      case 55:
        state0 = 0;
        t40 = this.bodyB.get$invInertia();
      case 56:
        state0 = 0;
        t42 = r2.x;
      case 57:
        state0 = 0;
        t44 = impulse1.y;
      case 58:
        state0 = 0;
        t44 = $.$$mul(t42, t44);
        t42 = r2.y;
      case 59:
        state0 = 0;
        t47 = impulse1.x;
      case 60:
        var maxImpulse, temp, linearMass;
        state0 = 0;
        t1.set$angularVelocity($.$$add(t38, $.$$mul(t40, $.$$sub(t44, $.$$mul(t42, t47)))));
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    return true;
  }
};

$$.RevoluteJoint = {"": "Joint;localAnchor1,localAnchor2,impulse,_motorImpulse,mass>,motorMass,_enableMotor,_maxMotorTorque,_motorSpeed,_enableLimit,referenceAngle>,lowerAngle>,upperAngle>,limitState,type,_prev,_liblib2$_next,edgeA,edgeB,bodyA,bodyB,islandFlag,collideConnected,userData,localCenterA,localCenterB,invMassA,invIA,invMassB,invIB",
  initVelocityConstraints$1: function(step) {
    var b1, b2, r1, r2, m1, m2, i1, i2, t5, t6, t8, t9, t11, t12, t13, t15, t17, t18, t20, t22, t23, t25, t26, t28, t30, t32, t34, t1, t3, jointAngle, t2, temp, P, t4, t14, t16;
    b1 = this.bodyA;
    b2 = this.bodyB;
    if (this._enableMotor === true || this._enableLimit === true)
      ;
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
    r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
    m1 = b1.get$invMass();
    if (typeof m1 !== "number")
      return this.initVelocityConstraints$1$bailout1(1, step, b1, r1, b2, r2, m1);
    m2 = b2.get$invMass();
    if (typeof m2 !== "number")
      return this.initVelocityConstraints$1$bailout1(2, step, b1, r1, b2, r2, m1, m2);
    i1 = b1.get$invInertia();
    if (typeof i1 !== "number")
      return this.initVelocityConstraints$1$bailout1(3, step, b1, r1, b2, r2, m1, m2, i1);
    i2 = b2.get$invInertia();
    if (typeof i2 !== "number")
      return this.initVelocityConstraints$1$bailout1(4, step, b1, r1, b2, r2, m1, m2, i1, i2);
    t5 = m1 + m2;
    t6 = r1.y;
    if (typeof t6 !== "number")
      return this.initVelocityConstraints$1$bailout1(5, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, t5, t6);
    t8 = t5 + t6 * t6 * i1;
    t9 = r2.y;
    if (typeof t9 !== "number")
      return this.initVelocityConstraints$1$bailout1(6, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, t8, 0, t9);
    t11 = this.mass;
    t12 = t11.col1;
    t12.x = t8 + t9 * t9 * i2;
    t13 = r1.y;
    if (typeof t13 !== "number")
      return this.initVelocityConstraints$1$bailout1(7, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, t13, 0, 0, t11, t12);
    t13 = -t13;
    t15 = r1.x;
    if (typeof t15 !== "number")
      return this.initVelocityConstraints$1$bailout1(8, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, t13, 0, 0, t11, t12, t15);
    t17 = t13 * t15 * i1;
    t18 = r2.y;
    t20 = r2.x;
    if (typeof t18 !== "number")
      return this.initVelocityConstraints$1$bailout1(9, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, 0, 0, 0, t11, t12, 0, t18, t17);
    if (typeof t20 !== "number")
      return this.initVelocityConstraints$1$bailout1(10, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, 0, 0, 0, t11, t12, 0, t18, t17, t20);
    t22 = t11.col2;
    t22.x = t17 - t18 * t20 * i2;
    t23 = r1.y;
    if (typeof t23 !== "number")
      return this.initVelocityConstraints$1$bailout1(11, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, 0, 0, 0, t11, t12, 0, 0, t23, 0, t22);
    t25 = -t23 * i1;
    t26 = r2.y;
    if (typeof t26 !== "number")
      return this.initVelocityConstraints$1$bailout1(12, step, b1, r1, b2, r2, m1, m2, i1, i2, $.CONSTANT4, 0, 0, 0, t11, t12, 0, 0, 0, 0, t22, t26, t25);
    t11 = t11.col3;
    t11.x = t25 - t26 * i2;
    t12.y = t22.x;
    t28 = r1.x;
    if (typeof t28 !== "number")
      return this.initVelocityConstraints$1$bailout1(13, step, b1, r1, b2, r2, m1, m2, i1, i2, t5, 0, 0, 0, t11, t12, 0, 0, 0, 0, t22, 0, t28);
    t5 += t28 * t28 * i1;
    t30 = r2.x;
    if (typeof t30 !== "number")
      return this.initVelocityConstraints$1$bailout1(14, step, b1, r1, b2, r2, m1, m2, i1, i2, t5, 0, 0, 0, t11, t12, 0, 0, 0, 0, t22, 0, 0, t30);
    t22.y = t5 + t30 * t30 * i2;
    t32 = r1.x;
    if (typeof t32 !== "number")
      return this.initVelocityConstraints$1$bailout1(15, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, t11, t12, 0, 0, 0, 0, t22, 0, 0, 0, t32);
    t32 *= i1;
    t34 = r2.x;
    if (typeof t34 !== "number")
      return this.initVelocityConstraints$1$bailout1(16, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, t11, t12, 0, 0, 0, 0, t22, 0, 0, 0, t32, t34);
    t11.y = t32 + t34 * i2;
    t12.z = t11.x;
    t22.z = t11.y;
    t22 = i1 + i2;
    t11.z = t22;
    this.motorMass = t22;
    t1 = this.motorMass;
    if (typeof t1 !== "number")
      return this.initVelocityConstraints$1$bailout1(17, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1);
    if (t1 > 0)
      this.motorMass = 1 / t1;
    t1 = this._enableMotor;
    if (typeof t1 !== "boolean")
      return this.initVelocityConstraints$1$bailout1(19, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1);
    if (!t1)
      this._motorImpulse = 0;
    if (this._enableLimit === true) {
      t1 = b2.get$sweep().get$angle();
      t3 = b1.get$sweep().get$angle();
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(20, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1);
      if (typeof t3 !== "number")
        return this.initVelocityConstraints$1$bailout1(21, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1, t3);
      t3 = t1 - t3;
      t1 = this.referenceAngle;
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(22, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1, t3);
      jointAngle = t3 - t1;
      t1 = this.upperAngle;
      t3 = this.lowerAngle;
      if (typeof t1 !== "number")
        return this.initVelocityConstraints$1$bailout1(23, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1, 0, jointAngle);
      if (typeof t3 !== "number")
        return this.initVelocityConstraints$1$bailout1(24, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1, t3, jointAngle);
      t5 = $.CONSTANT4.abs$0(t1 - t3);
      if (typeof t5 !== "number")
        return this.initVelocityConstraints$1$bailout1(25, step, b1, r1, b2, r2, m1, m2, i1, i2, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, jointAngle);
      if (t5 < 0.06981317007977318)
        this.limitState = 3;
      else {
        t1 = this.lowerAngle;
        if (typeof t1 !== "number")
          return this.initVelocityConstraints$1$bailout1(26, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1, 0, jointAngle);
        if (jointAngle <= t1) {
          if (!(this.limitState === 1))
            this.impulse.z = 0;
          this.limitState = 1;
        } else {
          t1 = this.upperAngle;
          if (typeof t1 !== "number")
            return this.initVelocityConstraints$1$bailout1(27, step, b1, r1, b2, r2, m1, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, t1, $.CONSTANT4, jointAngle);
          if (jointAngle >= t1) {
            if (!(this.limitState === 2))
              this.impulse.z = 0;
            this.limitState = 2;
          } else {
            this.limitState = 0;
            this.impulse.z = 0;
          }
        }
      }
    } else
      this.limitState = 0;
    t1 = step.get$warmStarting();
    t2 = this.impulse;
    if (t1 === true) {
      t2.mulLocal$1(step.get$dtRatio());
      t1 = this._motorImpulse;
      t3 = step.get$dtRatio();
      if (typeof t3 !== "number")
        throw $.iae(t3);
      this._motorImpulse = t1 * t3;
      temp = $.Vector$(0, 0);
      P = $.Vector$(0, 0);
      P.setCoords$2(t2.x, t2.y);
      temp.setFrom$1(P).mulLocal$1(m1);
      b1.get$linearVelocity().subLocal$1(temp);
      t4 = b1.get$angularVelocity();
      t6 = r1.x;
      t8 = P.y;
      if (typeof t6 !== "number")
        return this.initVelocityConstraints$1$bailout1(29, 0, b1, r1, b2, r2, 0, m2, i1, i2, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, t2, temp, P, t4);
      if (typeof t8 !== "number")
        return this.initVelocityConstraints$1$bailout1(30, 0, b1, r1, b2, r2, 0, m2, i1, i2, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, t2, temp, P, t4, t8);
      t8 = t6 * t8;
      t6 = r1.y;
      t11 = P.x;
      if (typeof t6 !== "number")
        return this.initVelocityConstraints$1$bailout1(31, 0, b1, 0, b2, r2, 0, m2, i1, i2, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, t2, temp, P, t4, t8);
      if (typeof t11 !== "number")
        return this.initVelocityConstraints$1$bailout1(32, 0, b1, 0, b2, r2, 0, m2, i1, i2, 0, t6, 0, 0, t11, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, t2, temp, P, t4, t8);
      t13 = t8 - t6 * t11 + this._motorImpulse;
      t14 = t2.z;
      if (typeof t14 !== "number")
        return this.initVelocityConstraints$1$bailout1(33, 0, b1, 0, b2, r2, 0, m2, i1, i2, 0, 0, 0, 0, 0, 0, t14, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, t2, temp, P, t4, 0, t13);
      if (typeof t4 !== "number")
        return this.initVelocityConstraints$1$bailout1(28, 0, b1, r1, b2, r2, 0, m2, i1, i2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, t2, temp, P, t4);
      b1.set$angularVelocity(t4 - i1 * (t13 + t14));
      temp.setFrom$1(P).mulLocal$1(m2);
      b2.get$linearVelocity().addLocal$1(temp);
      t16 = b2.get$angularVelocity();
      t18 = r2.x;
      t20 = P.y;
      if (typeof t18 !== "number")
        return this.initVelocityConstraints$1$bailout1(35, 0, 0, 0, b2, r2, 0, 0, 0, i2, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, t18);
      if (typeof t20 !== "number")
        return this.initVelocityConstraints$1$bailout1(36, 0, 0, 0, b2, r2, 0, 0, 0, i2, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, t18, t20);
      t20 = t18 * t20;
      t18 = r2.y;
      t23 = P.x;
      if (typeof t18 !== "number")
        return this.initVelocityConstraints$1$bailout1(37, 0, 0, 0, b2, 0, 0, 0, 0, i2, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P, 0, 0, 0, t18, t20);
      if (typeof t23 !== "number")
        return this.initVelocityConstraints$1$bailout1(38, 0, 0, 0, b2, 0, 0, 0, 0, i2, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, t23, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, 0, t18, t20);
      t25 = t20 - t18 * t23 + this._motorImpulse;
      t26 = t2.z;
      if (typeof t26 !== "number")
        return this.initVelocityConstraints$1$bailout1(39, 0, 0, 0, b2, 0, 0, 0, 0, i2, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, t26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25);
      if (typeof t16 !== "number")
        return this.initVelocityConstraints$1$bailout1(34, 0, 0, 0, b2, r2, 0, 0, 0, i2, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, P);
      b2.set$angularVelocity(t16 + i2 * (t25 + t26));
    } else {
      t2.setZero$0();
      this._motorImpulse = 0;
    }
  },
  initVelocityConstraints$1$bailout1: function(state0, step, b1, r1, b2, r2, m1, m2, i1, i2, t5, t6, t7, t9, t11, t12, t14, t17, t16, t19, t21, t24, t23, t27, t29, t31, t1, t3, jointAngle, t2, temp, P, t4, t8, t13, t18, t20, t26) {
    switch (state0) {
      case 0:
        b1 = this.bodyA;
        b2 = this.bodyB;
        if (this._enableMotor === true || this._enableLimit === true)
          ;
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
        r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
        $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
        $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
        m1 = b1.get$invMass();
      case 1:
        state0 = 0;
        m2 = b2.get$invMass();
      case 2:
        state0 = 0;
        i1 = b1.get$invInertia();
      case 3:
        state0 = 0;
        i2 = b2.get$invInertia();
      case 4:
        state0 = 0;
        t5 = $.getInterceptor$JSNumber(m1);
        t6 = t5.$add(m1, m2);
        t7 = r1.y;
      case 5:
        state0 = 0;
        t6 = $.$$add(t6, $.$$mul($.$$mul(t7, t7), i1));
        t9 = r2.y;
      case 6:
        state0 = 0;
        t6 = $.$$add(t6, $.$$mul($.$$mul(t9, t9), i2));
        t11 = this.mass;
        t12 = t11.col1;
        t12.x = t6;
        t6 = r1.y;
      case 7:
        state0 = 0;
        t6 = $.$$negate(t6);
        t14 = r1.x;
      case 8:
        state0 = 0;
        t16 = $.$$mul($.$$mul(t6, t14), i1);
        t17 = r2.y;
      case 9:
        state0 = 0;
        t19 = r2.x;
      case 10:
        state0 = 0;
        t16 = $.$$sub(t16, $.$$mul($.$$mul(t17, t19), i2));
        t21 = t11.col2;
        t21.x = t16;
        t16 = r1.y;
      case 11:
        state0 = 0;
        t23 = $.$$mul($.$$negate(t16), i1);
        t24 = r2.y;
      case 12:
        state0 = 0;
        t23 = $.$$sub(t23, $.$$mul(t24, i2));
        t11 = t11.col3;
        t11.x = t23;
        t12.y = t21.x;
        t5 = t5.$add(m1, m2);
        t23 = r1.x;
      case 13:
        state0 = 0;
        t5 = $.$$add(t5, $.$$mul($.$$mul(t23, t23), i1));
        t27 = r2.x;
      case 14:
        state0 = 0;
        t21.y = $.$$add(t5, $.$$mul($.$$mul(t27, t27), i2));
        t29 = r1.x;
      case 15:
        state0 = 0;
        t29 = $.$$mul(t29, i1);
        t31 = r2.x;
      case 16:
        state0 = 0;
        t11.y = $.$$add(t29, $.$$mul(t31, i2));
        t12.z = t11.x;
        t21.z = t11.y;
        t21 = $.getInterceptor$JSNumber(i1);
        t11.z = t21.$add(i1, i2);
        this.motorMass = t21.$add(i1, i2);
        t1 = this.motorMass;
      case 17:
        state0 = 0;
      case 18:
        if (state0 === 18 || state0 === 0 && $.$$gt(t1, 0) === true)
          switch (state0) {
            case 0:
              t1 = this.motorMass;
              if (typeof t1 !== "number")
                throw $.iae(t1);
              t1 = 1 / t1;
            case 18:
              state0 = 0;
              this.motorMass = t1;
          }
        t1 = this._enableMotor;
      case 19:
        state0 = 0;
        if ($.$$eq(t1, false) === true)
          this._motorImpulse = 0;
      default:
        if (state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 0 && this._enableLimit === true)
          switch (state0) {
            case 0:
              t1 = b2.get$sweep().get$angle();
            case 20:
              state0 = 0;
              t3 = b1.get$sweep().get$angle();
            case 21:
              state0 = 0;
              t3 = $.$$sub(t1, t3);
              t1 = this.referenceAngle;
            case 22:
              state0 = 0;
              jointAngle = $.$$sub(t3, t1);
              t1 = this.upperAngle;
            case 23:
              state0 = 0;
              t3 = this.lowerAngle;
            case 24:
              state0 = 0;
              t5 = $.abs($.$$sub(t1, t3));
            case 25:
              state0 = 0;
            default:
              if (state0 === 0 && $.$$lt(t5, 0.06981317007977318) === true)
                this.limitState = 3;
              else
                switch (state0) {
                  case 0:
                    t1 = this.lowerAngle;
                  case 26:
                    state0 = 0;
                    t3 = $.getInterceptor$JSNumber(jointAngle);
                  case 27:
                    if (state0 === 0 && t3.$le(jointAngle, t1) === true) {
                      if (!(this.limitState === 1))
                        this.impulse.z = 0;
                      this.limitState = 1;
                    } else
                      switch (state0) {
                        case 0:
                          t1 = this.upperAngle;
                        case 27:
                          state0 = 0;
                          if (t3.$ge(jointAngle, t1) === true) {
                            if (!(this.limitState === 2))
                              this.impulse.z = 0;
                            this.limitState = 2;
                          } else {
                            this.limitState = 0;
                            this.impulse.z = 0;
                          }
                      }
                }
          }
        else
          this.limitState = 0;
        t1 = step.get$warmStarting();
        t2 = this.impulse;
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
        if (state0 === 39 || state0 === 38 || state0 === 37 || state0 === 36 || state0 === 35 || state0 === 34 || state0 === 33 || state0 === 32 || state0 === 31 || state0 === 30 || state0 === 29 || state0 === 28 || state0 === 0 && t1 === true)
          switch (state0) {
            case 0:
              t2.mulLocal$1(step.get$dtRatio());
              t1 = this._motorImpulse;
              t3 = step.get$dtRatio();
              if (typeof t3 !== "number")
                throw $.iae(t3);
              this._motorImpulse = t1 * t3;
              temp = $.Vector$(0, 0);
              P = $.Vector$(0, 0);
              P.setCoords$2(t2.x, t2.y);
              temp.setFrom$1(P).mulLocal$1(m1);
              b1.get$linearVelocity().subLocal$1(temp);
              t4 = b1.get$angularVelocity();
            case 28:
              state0 = 0;
              t6 = r1.x;
            case 29:
              state0 = 0;
              t8 = P.y;
            case 30:
              state0 = 0;
              t8 = $.$$mul(t6, t8);
              t6 = r1.y;
            case 31:
              state0 = 0;
              t11 = P.x;
            case 32:
              state0 = 0;
              t13 = $.$$add($.$$sub(t8, $.$$mul(t6, t11)), this._motorImpulse);
              t14 = t2.z;
            case 33:
              state0 = 0;
              b1.set$angularVelocity($.$$sub(t4, t21.$mul(i1, $.$$add(t13, t14))));
              temp.setFrom$1(P).mulLocal$1(m2);
              b2.get$linearVelocity().addLocal$1(temp);
              t16 = b2.get$angularVelocity();
            case 34:
              state0 = 0;
              t18 = r2.x;
            case 35:
              state0 = 0;
              t20 = P.y;
            case 36:
              state0 = 0;
              t20 = $.$$mul(t18, t20);
              t18 = r2.y;
            case 37:
              state0 = 0;
              t24 = P.x;
            case 38:
              state0 = 0;
              t26 = $.$$add($.$$sub(t20, $.$$mul(t18, t24)), this._motorImpulse);
              t27 = t2.z;
            case 39:
              state0 = 0;
              b2.set$angularVelocity($.$$add(t16, $.$$mul(i2, $.$$add(t26, t27))));
          }
        else {
          t2.setZero$0();
          this._motorImpulse = 0;
        }
    }
  },
  solveVelocityConstraints$1: function(step) {
    var b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, t2, Cdot, imp, oldImpulse, t5, maxImpulse, imp0, temp, r1, r2, t3, t4, Cdot1, t6, t8, t10, P, t12, t15, t17, t13, t16, t18, t20, t23;
    b1 = this.bodyA;
    b2 = this.bodyB;
    v1 = b1.get$linearVelocity();
    w1 = b1.get$angularVelocity();
    if (typeof w1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(1, step, b1, b2, v1, w1);
    v2 = b2.get$linearVelocity();
    w2 = b2.get$angularVelocity();
    if (typeof w2 !== "number")
      return this.solveVelocityConstraints$1$bailout1(2, step, b1, b2, v1, w1, v2, w2);
    m1 = b1.get$invMass();
    m2 = b2.get$invMass();
    i1 = b1.get$invInertia();
    if (typeof i1 !== "number")
      return this.solveVelocityConstraints$1$bailout1(3, step, b1, b2, v1, w1, v2, w2, m1, m2, i1);
    i2 = b2.get$invInertia();
    if (typeof i2 !== "number")
      return this.solveVelocityConstraints$1$bailout1(4, step, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2);
    if (this._enableMotor === true && !(this.limitState === 3)) {
      t1 = w2 - w1;
      t2 = this._motorSpeed;
      if (typeof t2 !== "number")
        return this.solveVelocityConstraints$1$bailout1(5, step, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, $.CONSTANT4, t1, t2);
      Cdot = t1 - t2;
      t2 = this.motorMass;
      if (typeof t2 !== "number")
        return this.solveVelocityConstraints$1$bailout1(6, step, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, $.CONSTANT4, 0, t2, Cdot);
      imp = t2 * -Cdot;
      oldImpulse = this._motorImpulse;
      t2 = step.get$dt();
      t5 = this._maxMotorTorque;
      if (typeof t2 !== "number")
        return this.solveVelocityConstraints$1$bailout1(7, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, $.CONSTANT4, 0, t2, 0, oldImpulse, imp);
      if (typeof t5 !== "number")
        return this.solveVelocityConstraints$1$bailout1(8, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, $.CONSTANT4, 0, t2, 0, oldImpulse, imp, t5);
      maxImpulse = t2 * t5;
      this._motorImpulse = $.max(-maxImpulse, $.min(oldImpulse + imp, maxImpulse));
      imp0 = this._motorImpulse - oldImpulse;
      w1 -= i1 * imp0;
      w2 += i2 * imp0;
    }
    temp = $.Vector$(0, 0);
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    t1 = this._enableLimit === true && !(this.limitState === 0);
    t2 = this.localAnchor1;
    t3 = this.localAnchor2;
    t4 = this.mass;
    if (t1) {
      r1.setFrom$1(t2).subLocal$1(b1.get$localCenter());
      r2.setFrom$1(t3).subLocal$1(b2.get$localCenter());
      $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
      $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
      Cdot1 = $.Vector$(0, 0);
      Cdot = $.Vector3$(0, 0, 0);
      $.Vector_crossNumAndVectorToOut(w1, r1, temp);
      $.Vector_crossNumAndVectorToOut(w2, r2, Cdot1);
      Cdot1.addLocal$1(v2).subLocal$1(v1).subLocal$1(temp);
      Cdot.setCoords$3(Cdot1.x, Cdot1.y, w2 - w1);
      imp = $.Vector3$(0, 0, 0);
      t4.solve33ToOut$2(Cdot.negateLocal$0(), imp);
      t1 = this.limitState;
      if (t1 === 3)
        this.impulse.addLocal$1(imp);
      else if (t1 === 1) {
        t1 = this.impulse;
        t2 = t1.z;
        t5 = imp.z;
        if (typeof t2 !== "number")
          return this.solveVelocityConstraints$1$bailout1(9, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, t2, 0, 0, imp, 0, t4, temp, r2, Cdot1, r1);
        if (typeof t5 !== "number")
          return this.solveVelocityConstraints$1$bailout1(10, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, t2, 0, 0, imp, t5, t4, temp, r2, Cdot1, r1);
        if (t2 + t5 < 0) {
          t4.solve22ToOut$2(Cdot1.negateLocal$0(), temp);
          imp.x = temp.x;
          imp.y = temp.y;
          t2 = t1.z;
          if (typeof t2 !== "number")
            return this.solveVelocityConstraints$1$bailout1(11, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, t2, 0, 0, imp, 0, 0, temp, r2, 0, r1);
          imp.z = -t2;
          t4 = t1.x;
          t6 = temp.x;
          if (typeof t4 !== "number")
            return this.solveVelocityConstraints$1$bailout1(12, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, t4, temp, r2, 0, r1);
          if (typeof t6 !== "number")
            return this.solveVelocityConstraints$1$bailout1(13, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, t4, temp, r2, 0, r1, t6);
          t1.x = t4 + t6;
          t8 = t1.y;
          t10 = temp.y;
          if (typeof t8 !== "number")
            return this.solveVelocityConstraints$1$bailout1(14, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, t8);
          if (typeof t10 !== "number")
            return this.solveVelocityConstraints$1$bailout1(15, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, t8, t10);
          t1.y = t8 + t10;
          t1.z = 0;
        }
      } else if (t1 === 2) {
        t1 = this.impulse;
        t2 = t1.z;
        t5 = imp.z;
        if (typeof t2 !== "number")
          return this.solveVelocityConstraints$1$bailout1(16, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, t2, 0, 0, imp, 0, t4, temp, r2, Cdot1, r1);
        if (typeof t5 !== "number")
          return this.solveVelocityConstraints$1$bailout1(17, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, t2, 0, 0, imp, t5, t4, temp, r2, Cdot1, r1);
        if (t2 + t5 > 0) {
          t4.solve22ToOut$2(Cdot1.negateLocal$0(), temp);
          imp.x = temp.x;
          imp.y = temp.y;
          t2 = t1.z;
          if (typeof t2 !== "number")
            return this.solveVelocityConstraints$1$bailout1(18, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, t2, 0, 0, imp, 0, 0, temp, r2, 0, r1);
          imp.z = -t2;
          t4 = t1.x;
          t6 = temp.x;
          if (typeof t4 !== "number")
            return this.solveVelocityConstraints$1$bailout1(19, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, t4, temp, r2, 0, r1);
          if (typeof t6 !== "number")
            return this.solveVelocityConstraints$1$bailout1(20, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, t4, temp, r2, 0, r1, t6);
          t1.x = t4 + t6;
          t8 = t1.y;
          t10 = temp.y;
          if (typeof t8 !== "number")
            return this.solveVelocityConstraints$1$bailout1(21, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, t8);
          if (typeof t10 !== "number")
            return this.solveVelocityConstraints$1$bailout1(22, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, t8, t10);
          t1.y = t8 + t10;
          t1.z = 0;
        }
      }
      P = $.Vector$(0, 0);
      P.setCoords$2(imp.x, imp.y);
      temp.setFrom$1(P).mulLocal$1(m1);
      v1.subLocal$1(temp);
      t1 = r1.x;
      t3 = P.y;
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(23, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, 0, 0, P);
      if (typeof t3 !== "number")
        return this.solveVelocityConstraints$1$bailout1(24, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, 0, 0, P, t3);
      t3 = t1 * t3;
      t1 = r1.y;
      t6 = P.x;
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(25, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, 0, 0, 0, 0, P, t3);
      if (typeof t6 !== "number")
        return this.solveVelocityConstraints$1$bailout1(26, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, 0, t6, 0, 0, P, t3);
      t3 -= t1 * t6;
      t8 = imp.z;
      if (typeof t8 !== "number")
        return this.solveVelocityConstraints$1$bailout1(27, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, 0, 0, t8, 0, P, t3);
      w1 -= i1 * (t3 + t8);
      temp.setFrom$1(P).mulLocal$1(m2);
      v2.addLocal$1(temp);
      t10 = r2.x;
      t12 = P.y;
      if (typeof t10 !== "number")
        return this.solveVelocityConstraints$1$bailout1(28, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, 0, r2, 0, 0, 0, 0, t10, P);
      if (typeof t12 !== "number")
        return this.solveVelocityConstraints$1$bailout1(29, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, 0, r2, 0, 0, 0, 0, t10, P, 0, t12);
      t12 = t10 * t12;
      t10 = r2.y;
      t15 = P.x;
      if (typeof t10 !== "number")
        return this.solveVelocityConstraints$1$bailout1(30, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, 0, 0, 0, 0, 0, 0, t10, P, 0, t12);
      if (typeof t15 !== "number")
        return this.solveVelocityConstraints$1$bailout1(31, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, 0, t12, t15);
      t12 -= t10 * t15;
      t17 = imp.z;
      if (typeof t17 !== "number")
        return this.solveVelocityConstraints$1$bailout1(32, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, t17);
      w2 += i2 * (t12 + t17);
    } else {
      r1.setFrom$1(t2).subLocal$1(b1.get$localCenter());
      r2.setFrom$1(t3).subLocal$1(b2.get$localCenter());
      $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
      $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
      Cdot = $.Vector$(0, 0);
      imp = $.Vector$(0, 0);
      $.Vector_crossNumAndVectorToOut(w1, r1, temp);
      $.Vector_crossNumAndVectorToOut(w2, r2, Cdot);
      Cdot.addLocal$1(v2).subLocal$1(v1).subLocal$1(temp);
      t4.solve22ToOut$2(Cdot.negateLocal$0(), imp);
      t1 = this.impulse;
      t4 = t1.x;
      t6 = imp.x;
      if (typeof t4 !== "number")
        return this.solveVelocityConstraints$1$bailout1(33, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, t4, temp, r2, 0, r1);
      if (typeof t6 !== "number")
        return this.solveVelocityConstraints$1$bailout1(34, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, t4, temp, r2, 0, r1, t6);
      t1.x = t4 + t6;
      t8 = t1.y;
      t10 = imp.y;
      if (typeof t8 !== "number")
        return this.solveVelocityConstraints$1$bailout1(35, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, t8);
      if (typeof t10 !== "number")
        return this.solveVelocityConstraints$1$bailout1(36, 0, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, t8, t10);
      t1.y = t8 + t10;
      temp.setFrom$1(imp).mulLocal$1(m1);
      v1.subLocal$1(temp);
      t1 = r1.x;
      t13 = imp.y;
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(37, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1);
      if (typeof t13 !== "number")
        return this.solveVelocityConstraints$1$bailout1(38, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, r1, 0, 0, 0, 0, 0, 0, 0, 0, t13);
      t13 = t1 * t13;
      t1 = r1.y;
      t16 = imp.x;
      if (typeof t1 !== "number")
        return this.solveVelocityConstraints$1$bailout1(39, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13);
      if (typeof t16 !== "number")
        return this.solveVelocityConstraints$1$bailout1(40, 0, b1, b2, 0, w1, v2, w2, 0, m2, i1, i2, t1, $.CONSTANT4, 0, 0, 0, imp, 0, 0, temp, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, t16);
      w1 -= i1 * (t13 - t1 * t16);
      temp.setFrom$1(imp).mulLocal$1(m2);
      v2.addLocal$1(temp);
      t18 = r2.x;
      t20 = imp.y;
      if (typeof t18 !== "number")
        return this.solveVelocityConstraints$1$bailout1(41, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18);
      if (typeof t20 !== "number")
        return this.solveVelocityConstraints$1$bailout1(42, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, t20);
      t20 = t18 * t20;
      t18 = r2.y;
      t23 = imp.x;
      if (typeof t18 !== "number")
        return this.solveVelocityConstraints$1$bailout1(43, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, imp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, t20);
      if (typeof t23 !== "number")
        return this.solveVelocityConstraints$1$bailout1(44, 0, b1, b2, 0, w1, 0, w2, 0, 0, 0, i2, 0, $.CONSTANT4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, t20, t23);
      w2 += i2 * (t20 - t18 * t23);
    }
    b1.set$angularVelocity(w1);
    b2.set$angularVelocity(w2);
  },
  solveVelocityConstraints$1$bailout1: function(state0, step, b1, b2, v1, w1, v2, w2, m1, m2, i1, i2, t1, t2, t3, Cdot, oldImpulse, imp, t6, t5, temp, r2, Cdot1, r1, t7, t9, t11, P, t4, t13, t16, t18, t14, t17, t19, t21, t24) {
    switch (state0) {
      case 0:
        b1 = this.bodyA;
        b2 = this.bodyB;
        v1 = b1.get$linearVelocity();
        w1 = b1.get$angularVelocity();
      case 1:
        state0 = 0;
        v2 = b2.get$linearVelocity();
        w2 = b2.get$angularVelocity();
      case 2:
        state0 = 0;
        m1 = b1.get$invMass();
        m2 = b2.get$invMass();
        i1 = b1.get$invInertia();
      case 3:
        state0 = 0;
        i2 = b2.get$invInertia();
      case 4:
        state0 = 0;
      default:
        if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && this._enableMotor === true && !(this.limitState === 3))
          switch (state0) {
            case 0:
              t1 = $.getInterceptor$JSNumber(w2);
              t2 = t1.$sub(w2, w1);
              t3 = this._motorSpeed;
            case 5:
              state0 = 0;
              Cdot = $.$$sub(t2, t3);
              t3 = this.motorMass;
            case 6:
              state0 = 0;
              imp = $.$$mul(t3, $.$$negate(Cdot));
              oldImpulse = this._motorImpulse;
              t3 = step.get$dt();
            case 7:
              state0 = 0;
              t6 = this._maxMotorTorque;
            case 8:
              state0 = 0;
              maxImpulse = $.$$mul(t3, t6);
              t6 = this._motorImpulse;
              if (typeof imp !== "number")
                throw $.iae(imp);
              this._motorImpulse = $.max($.$$negate(maxImpulse), $.min(t6 + imp, maxImpulse));
              imp0 = this._motorImpulse - oldImpulse;
              w1 = $.$$sub(w1, $.$$mul(i1, imp0));
              w2 = t1.$add(w2, $.$$mul(i2, imp0));
          }
        temp = $.Vector$(0, 0);
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        t1 = this._enableLimit === true && !(this.limitState === 0);
        t2 = $.getInterceptor$JSNumber(w2);
        t3 = this.localAnchor1;
        t4 = this.localAnchor2;
        t5 = this.mass;
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
        var maxImpulse, imp0, Cdot2;
        if (state0 === 32 || state0 === 31 || state0 === 30 || state0 === 29 || state0 === 28 || state0 === 27 || state0 === 26 || state0 === 25 || state0 === 24 || state0 === 23 || state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && t1)
          switch (state0) {
            case 0:
              r1.setFrom$1(t3).subLocal$1(b1.get$localCenter());
              r2.setFrom$1(t4).subLocal$1(b2.get$localCenter());
              $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
              $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
              Cdot1 = $.Vector$(0, 0);
              Cdot = $.Vector3$(0, 0, 0);
              $.Vector_crossNumAndVectorToOut(w1, r1, temp);
              $.Vector_crossNumAndVectorToOut(w2, r2, Cdot1);
              Cdot1.addLocal$1(v2).subLocal$1(v1).subLocal$1(temp);
              Cdot2 = t2.$sub(w2, w1);
              Cdot.setCoords$3(Cdot1.x, Cdot1.y, Cdot2);
              imp = $.Vector3$(0, 0, 0);
              t5.solve33ToOut$2(Cdot.negateLocal$0(), imp);
              t1 = this.limitState;
            default:
              if (state0 === 0 && t1 === 3)
                this.impulse.addLocal$1(imp);
              else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 0 && t1 === 1)
                      switch (state0) {
                        case 0:
                          t1 = this.impulse;
                          t3 = t1.z;
                        case 9:
                          state0 = 0;
                          t6 = imp.z;
                        case 10:
                          state0 = 0;
                        default:
                          if (state0 === 15 || state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 0 && $.$$lt($.$$add(t3, t6), 0) === true)
                            switch (state0) {
                              case 0:
                                t5.solve22ToOut$2(Cdot1.negateLocal$0(), temp);
                                imp.x = temp.x;
                                imp.y = temp.y;
                                t3 = t1.z;
                              case 11:
                                state0 = 0;
                                imp.z = $.$$negate(t3);
                                t5 = t1.x;
                              case 12:
                                state0 = 0;
                                t7 = temp.x;
                              case 13:
                                state0 = 0;
                                t1.x = $.$$add(t5, t7);
                                t9 = t1.y;
                              case 14:
                                state0 = 0;
                                t11 = temp.y;
                              case 15:
                                state0 = 0;
                                t1.y = $.$$add(t9, t11);
                                t1.z = 0;
                            }
                      }
                    else
                      switch (state0) {
                        case 0:
                        default:
                          if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 17 || state0 === 16 || state0 === 0 && t1 === 2)
                            switch (state0) {
                              case 0:
                                t1 = this.impulse;
                                t3 = t1.z;
                              case 16:
                                state0 = 0;
                                t6 = imp.z;
                              case 17:
                                state0 = 0;
                              default:
                                if (state0 === 22 || state0 === 21 || state0 === 20 || state0 === 19 || state0 === 18 || state0 === 0 && $.$$gt($.$$add(t3, t6), 0) === true)
                                  switch (state0) {
                                    case 0:
                                      t5.solve22ToOut$2(Cdot1.negateLocal$0(), temp);
                                      imp.x = temp.x;
                                      imp.y = temp.y;
                                      t3 = t1.z;
                                    case 18:
                                      state0 = 0;
                                      imp.z = $.$$negate(t3);
                                      t5 = t1.x;
                                    case 19:
                                      state0 = 0;
                                      t7 = temp.x;
                                    case 20:
                                      state0 = 0;
                                      t1.x = $.$$add(t5, t7);
                                      t9 = t1.y;
                                    case 21:
                                      state0 = 0;
                                      t11 = temp.y;
                                    case 22:
                                      state0 = 0;
                                      t1.y = $.$$add(t9, t11);
                                      t1.z = 0;
                                  }
                            }
                      }
                }
              P = $.Vector$(0, 0);
              P.setCoords$2(imp.x, imp.y);
              temp.setFrom$1(P).mulLocal$1(m1);
              v1.subLocal$1(temp);
              t1 = r1.x;
            case 23:
              state0 = 0;
              t4 = P.y;
            case 24:
              state0 = 0;
              t4 = $.$$mul(t1, t4);
              t1 = r1.y;
            case 25:
              state0 = 0;
              t7 = P.x;
            case 26:
              state0 = 0;
              t4 = $.$$sub(t4, $.$$mul(t1, t7));
              t9 = imp.z;
            case 27:
              state0 = 0;
              w1 = $.$$sub(w1, $.$$mul(i1, $.$$add(t4, t9)));
              temp.setFrom$1(P).mulLocal$1(m2);
              v2.addLocal$1(temp);
              t11 = r2.x;
            case 28:
              state0 = 0;
              t13 = P.y;
            case 29:
              state0 = 0;
              t13 = $.$$mul(t11, t13);
              t11 = r2.y;
            case 30:
              state0 = 0;
              t16 = P.x;
            case 31:
              state0 = 0;
              t13 = $.$$sub(t13, $.$$mul(t11, t16));
              t18 = imp.z;
            case 32:
              state0 = 0;
              w2 = t2.$add(w2, $.$$mul(i2, $.$$add(t13, t18)));
          }
        else
          switch (state0) {
            case 0:
              r1.setFrom$1(t3).subLocal$1(b1.get$localCenter());
              r2.setFrom$1(t4).subLocal$1(b2.get$localCenter());
              $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
              $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
              Cdot = $.Vector$(0, 0);
              imp = $.Vector$(0, 0);
              $.Vector_crossNumAndVectorToOut(w1, r1, temp);
              $.Vector_crossNumAndVectorToOut(w2, r2, Cdot);
              Cdot.addLocal$1(v2).subLocal$1(v1).subLocal$1(temp);
              t5.solve22ToOut$2(Cdot.negateLocal$0(), imp);
              t1 = this.impulse;
              t5 = t1.x;
            case 33:
              state0 = 0;
              t7 = imp.x;
            case 34:
              state0 = 0;
              t1.x = $.$$add(t5, t7);
              t9 = t1.y;
            case 35:
              state0 = 0;
              t11 = imp.y;
            case 36:
              state0 = 0;
              t1.y = $.$$add(t9, t11);
              temp.setFrom$1(imp).mulLocal$1(m1);
              v1.subLocal$1(temp);
              t1 = r1.x;
            case 37:
              state0 = 0;
              t14 = imp.y;
            case 38:
              state0 = 0;
              t14 = $.$$mul(t1, t14);
              t1 = r1.y;
            case 39:
              state0 = 0;
              t17 = imp.x;
            case 40:
              state0 = 0;
              w1 = $.$$sub(w1, $.$$mul(i1, $.$$sub(t14, $.$$mul(t1, t17))));
              temp.setFrom$1(imp).mulLocal$1(m2);
              v2.addLocal$1(temp);
              t19 = r2.x;
            case 41:
              state0 = 0;
              t21 = imp.y;
            case 42:
              state0 = 0;
              t21 = $.$$mul(t19, t21);
              t19 = r2.y;
            case 43:
              state0 = 0;
              t24 = imp.x;
            case 44:
              state0 = 0;
              w2 = t2.$add(w2, $.$$mul(i2, $.$$sub(t21, $.$$mul(t19, t24))));
          }
        b1.set$angularVelocity(w1);
        b2.set$angularVelocity(w2);
    }
  },
  solvePositionConstraints$1: function(baumgarte) {
    var b1, b2, t1, t3, angle, C, limitImpulse, angularError, C0, t2, t4, t6, t8, imp, r1, r2, positionError, invMass1, invMass2, invI1, invI2, u, m, K1, K2, t5, t7, t9, t12, K3, t14, t16, t17, t19, t21, t24, t26, t27, t29, t31, t33, t36, t38, t40, t42, t44, t47;
    b1 = this.bodyA;
    b2 = this.bodyB;
    if (this._enableLimit === true && !(this.limitState === 0)) {
      t1 = b2.get$sweep().get$angle();
      t3 = b1.get$sweep().get$angle();
      if (typeof t1 !== "number")
        return this.solvePositionConstraints$1$bailout1(1, b1, b2, t1);
      if (typeof t3 !== "number")
        return this.solvePositionConstraints$1$bailout1(2, b1, b2, t1, t3);
      t3 = t1 - t3;
      t1 = this.referenceAngle;
      if (typeof t1 !== "number")
        return this.solvePositionConstraints$1$bailout1(3, b1, b2, t1, t3);
      angle = t3 - t1;
      t1 = this.limitState;
      if (t1 === 3) {
        t1 = this.lowerAngle;
        if (typeof t1 !== "number")
          return this.solvePositionConstraints$1$bailout1(4, b1, b2, t1, 0, angle);
        C = $.max(-0.13962634015954636, $.min(angle - t1, 0.13962634015954636));
        t3 = this.motorMass;
        if (typeof t3 !== "number")
          return this.solvePositionConstraints$1$bailout1(5, b1, b2, 0, t3, 0, C);
        limitImpulse = -t3 * C;
        angularError = $.CONSTANT4.abs$0(C);
        if (typeof angularError !== "number")
          return this.solvePositionConstraints$1$bailout1(6, b1, b2, 0, 0, 0, 0, angularError, limitImpulse);
      } else if (t1 === 1) {
        t1 = this.lowerAngle;
        if (typeof t1 !== "number")
          return this.solvePositionConstraints$1$bailout1(7, b1, b2, t1, 0, angle);
        C = angle - t1;
        angularError = -C;
        C0 = $.max(-0.13962634015954636, $.min(C + 0.03490658503988659, 0));
        t1 = this.motorMass;
        if (typeof t1 !== "number")
          return this.solvePositionConstraints$1$bailout1(8, b1, b2, 0, t1, 0, 0, angularError, 0, C0);
        limitImpulse = -t1 * C0;
      } else if (t1 === 2) {
        t1 = this.upperAngle;
        if (typeof t1 !== "number")
          return this.solvePositionConstraints$1$bailout1(9, b1, b2, t1, 0, angle);
        C = angle - t1;
        C0 = $.max(0, $.min(C - 0.03490658503988659, 0.13962634015954636));
        t1 = this.motorMass;
        if (typeof t1 !== "number")
          return this.solvePositionConstraints$1$bailout1(10, b1, b2, t1, 0, 0, C, 0, 0, C0);
        limitImpulse = -t1 * C0;
        angularError = C;
      } else {
        angularError = 0;
        limitImpulse = 0;
      }
      t1 = b1.get$sweep();
      t2 = t1.get$angle();
      t4 = b1.get$invInertia();
      if (typeof t4 !== "number")
        return this.solvePositionConstraints$1$bailout1(12, b1, b2, t1, 0, 0, 0, angularError, limitImpulse, 0, t2, t4);
      if (typeof t2 !== "number")
        return this.solvePositionConstraints$1$bailout1(11, b1, b2, t1, 0, 0, 0, angularError, limitImpulse, 0, t2);
      t1.set$angle(t2 - t4 * limitImpulse);
      t1 = b2.get$sweep();
      t6 = t1.get$angle();
      t8 = b2.get$invInertia();
      if (typeof t8 !== "number")
        return this.solvePositionConstraints$1$bailout1(14, b1, b2, t1, 0, 0, 0, angularError, limitImpulse, 0, 0, 0, t6, t8);
      if (typeof t6 !== "number")
        return this.solvePositionConstraints$1$bailout1(13, b1, b2, t1, 0, 0, 0, angularError, limitImpulse, 0, 0, 0, t6);
      t1.set$angle(t6 + t8 * limitImpulse);
      b1.synchronizeTransform$0();
      b2.synchronizeTransform$0();
    } else
      angularError = 0;
    imp = $.Vector$(0, 0);
    r1 = $.Vector$(0, 0);
    r2 = $.Vector$(0, 0);
    C = $.Vector$(0, 0);
    r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
    r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
    $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
    $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
    C.setFrom$1(b2.get$sweep().get$center()).addLocal$1(r2);
    C.subLocal$1(b1.get$sweep().get$center()).subLocal$1(r1);
    positionError = C.get$length();
    invMass1 = b1.get$invMass();
    if (typeof invMass1 !== "number")
      return this.solvePositionConstraints$1$bailout1(16, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, invMass1);
    invMass2 = b2.get$invMass();
    if (typeof invMass2 !== "number")
      return this.solvePositionConstraints$1$bailout1(17, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, invMass1, invMass2);
    invI1 = b1.get$invInertia();
    if (typeof invI1 !== "number")
      return this.solvePositionConstraints$1$bailout1(18, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, invMass1, invMass2, invI1);
    invI2 = b2.get$invInertia();
    if (typeof invI2 !== "number")
      return this.solvePositionConstraints$1$bailout1(19, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, invMass1, invMass2, invI1, invI2);
    t2 = C.get$lengthSquared();
    if (typeof t2 !== "number")
      return this.solvePositionConstraints$1$bailout1(20, b1, b2, 0, 0, 0, C, angularError, 0, 0, t2, 0, 0, 0, positionError, imp, r1, r2, invMass1, invMass2, invI1, invI2);
    if (t2 > 0.0025000000000000005) {
      u = $.Vector$(0, 0);
      m = invMass1 + invMass2;
      if (m > 0)
        m = 1 / m;
      imp.setFrom$1(C).negateLocal$0().mulLocal$1(m);
      u.setFrom$1(imp).mulLocal$1(0.5 * invMass1);
      b1.get$sweep().get$center().subLocal$1(u);
      u.setFrom$1(imp).mulLocal$1(0.5 * invMass2);
      b2.get$sweep().get$center().addLocal$1(u);
      C.setFrom$1(b2.get$sweep().get$center()).addLocal$1(r2);
      C.subLocal$1(b1.get$sweep().get$center()).subLocal$1(r1);
    }
    K1 = $.Matrix22$(null, null);
    t2 = invMass1 + invMass2;
    K1.col1.set$x(t2);
    K1.col2.set$x(0);
    K1.col1.set$y(0);
    K1.col2.set$y(t2);
    K2 = $.Matrix22$(null, null);
    t2 = r1.y;
    if (typeof t2 !== "number")
      return this.solvePositionConstraints$1$bailout1(22, b1, b2, 0, 0, 0, C, angularError, 0, 0, t2, 0, 0, 0, positionError, imp, r1, r2, 0, 0, invI1, invI2, 0, 0, K1, K2);
    K2.col1.set$x(invI1 * t2 * t2);
    t4 = -invI1;
    t5 = r1.x;
    if (typeof t5 !== "number")
      return this.solvePositionConstraints$1$bailout1(24, b1, b2, 0, 0, 0, C, angularError, 0, 0, t5, $.CONSTANT4, 0, 0, positionError, imp, r1, r2, 0, 0, invI1, invI2, 0, 0, K1, K2, t4);
    t5 = t4 * t5;
    t7 = r1.y;
    if (typeof t7 !== "number")
      return this.solvePositionConstraints$1$bailout1(25, b1, b2, 0, 0, 0, C, angularError, 0, 0, t5, $.CONSTANT4, 0, 0, positionError, imp, r1, r2, 0, 0, invI1, invI2, 0, 0, K1, K2, t7);
    K2.col2.set$x(t5 * t7);
    t9 = r1.x;
    if (typeof t9 !== "number")
      return this.solvePositionConstraints$1$bailout1(26, b1, b2, 0, 0, 0, C, angularError, 0, 0, t9, $.CONSTANT4, 0, 0, positionError, imp, r1, r2, 0, 0, invI1, invI2, 0, 0, K1, K2, t4);
    t9 = t4 * t9;
    t4 = r1.y;
    if (typeof t4 !== "number")
      return this.solvePositionConstraints$1$bailout1(27, b1, b2, 0, 0, 0, C, angularError, 0, 0, t9, $.CONSTANT4, 0, 0, positionError, imp, r1, r2, 0, 0, invI1, invI2, 0, 0, K1, K2, t4);
    K2.col1.set$y(t9 * t4);
    t12 = r1.x;
    if (typeof t12 !== "number")
      return this.solvePositionConstraints$1$bailout1(28, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, $.CONSTANT4, 0, 0, positionError, imp, r1, r2, 0, 0, invI1, invI2, 0, 0, K1, K2, t12);
    K2.col2.set$y(invI1 * t12 * t12);
    K3 = $.Matrix22$(null, null);
    t14 = r2.y;
    if (typeof t14 !== "number")
      return this.solvePositionConstraints$1$bailout1(30, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, t14, 0, 0, positionError, imp, r1, r2, 0, 0, 0, invI2, 0, 0, K1, K2, 0, K3);
    K3.col1.set$x(invI2 * t14 * t14);
    t16 = -invI2;
    t17 = r2.x;
    if (typeof t17 !== "number")
      return this.solvePositionConstraints$1$bailout1(32, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, t17, 0, 0, positionError, imp, r1, r2, 0, 0, 0, invI2, 0, 0, K1, K2, 0, K3, t16, $.CONSTANT4);
    t17 = t16 * t17;
    t19 = r2.y;
    if (typeof t19 !== "number")
      return this.solvePositionConstraints$1$bailout1(33, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, t17, 0, 0, positionError, imp, r1, r2, 0, 0, 0, invI2, 0, 0, K1, K2, 0, K3, t19, $.CONSTANT4);
    K3.col2.set$x(t17 * t19);
    t21 = r2.x;
    if (typeof t21 !== "number")
      return this.solvePositionConstraints$1$bailout1(34, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, t21, 0, 0, positionError, imp, r1, r2, 0, 0, 0, invI2, 0, 0, K1, K2, 0, K3, t16, $.CONSTANT4);
    t21 = t16 * t21;
    t16 = r2.y;
    if (typeof t16 !== "number")
      return this.solvePositionConstraints$1$bailout1(35, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, t21, 0, 0, positionError, imp, r1, r2, 0, 0, 0, invI2, 0, 0, K1, K2, 0, K3, t16, $.CONSTANT4);
    K3.col1.set$y(t21 * t16);
    t24 = r2.x;
    if (typeof t24 !== "number")
      return this.solvePositionConstraints$1$bailout1(36, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, 0, 0, 0, invI2, 0, 0, K1, K2, 0, K3, t24, $.CONSTANT4);
    K3.col2.set$y(invI2 * t24 * t24);
    K1.addLocal$1(K2).addLocal$1(K3);
    K1.solveToOut$2(C.negateLocal$0(), imp);
    C.setFrom$1(imp).mulLocal$1(b1.get$invMass());
    b1.get$sweep().get$center().subLocal$1(C);
    t26 = b1.get$sweep();
    t27 = t26.get$angle();
    t29 = b1.get$invInertia();
    t31 = r1.x;
    t33 = imp.y;
    if (typeof t31 !== "number")
      return this.solvePositionConstraints$1$bailout1(40, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26, t29, t31);
    if (typeof t33 !== "number")
      return this.solvePositionConstraints$1$bailout1(41, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26, t29, t31, t33);
    t33 = t31 * t33;
    t31 = r1.y;
    t36 = imp.x;
    if (typeof t31 !== "number")
      return this.solvePositionConstraints$1$bailout1(42, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26, t29, t31, t33);
    if (typeof t36 !== "number")
      return this.solvePositionConstraints$1$bailout1(43, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26, t29, t31, t33, t36);
    if (typeof t29 !== "number")
      return this.solvePositionConstraints$1$bailout1(39, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26, t29);
    if (typeof t27 !== "number")
      return this.solvePositionConstraints$1$bailout1(38, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26);
    t26.set$angle(t27 - t29 * (t33 - t31 * t36));
    C.setFrom$1(imp).mulLocal$1(b2.get$invMass());
    b2.get$sweep().get$center().addLocal$1(C);
    t26 = b2.get$sweep();
    t38 = t26.get$angle();
    t40 = b2.get$invInertia();
    t42 = r2.x;
    t44 = imp.y;
    if (typeof t42 !== "number")
      return this.solvePositionConstraints$1$bailout1(46, b1, b2, 0, 0, 0, 0, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, t38, t40, t42);
    if (typeof t44 !== "number")
      return this.solvePositionConstraints$1$bailout1(47, b1, b2, 0, 0, 0, 0, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, t38, t40, t42, t44);
    t44 = t42 * t44;
    t42 = r2.y;
    t47 = imp.x;
    if (typeof t42 !== "number")
      return this.solvePositionConstraints$1$bailout1(48, b1, b2, 0, 0, 0, 0, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, t38, t40, t42, t44);
    if (typeof t47 !== "number")
      return this.solvePositionConstraints$1$bailout1(49, b1, b2, 0, 0, 0, 0, angularError, 0, 0, 0, 0, 0, 0, positionError, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, t38, t40, t42, t44, t47);
    if (typeof t40 !== "number")
      return this.solvePositionConstraints$1$bailout1(45, b1, b2, 0, 0, 0, 0, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, t38, t40);
    if (typeof t38 !== "number")
      return this.solvePositionConstraints$1$bailout1(44, b1, b2, 0, 0, 0, 0, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, 0, r2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, t38);
    t26.set$angle(t38 + t40 * (t44 - t42 * t47));
    b1.synchronizeTransform$0();
    b2.synchronizeTransform$0();
    if (typeof positionError !== "number")
      return this.solvePositionConstraints$1$bailout1(15, b1, b2, 0, 0, 0, C, angularError, 0, 0, 0, 0, 0, 0, positionError, imp, r1, r2);
    return positionError <= 0.005 && angularError <= 0.03490658503988659;
  },
  solvePositionConstraints$1$bailout1: function(state0, b1, b2, t1, t3, angle, C, angularError, limitImpulse, C0, t2, t4, t6, t8, positionError, imp, r1, r2, invMass1, invMass2, invI1, invI2, m, u, K1, K2, t5, K3, t13, t12, t21, t23, t25, t28, t30, t32, t34, t36, t39) {
    switch (state0) {
      case 0:
        b1 = this.bodyA;
        b2 = this.bodyB;
      default:
        if (state0 === 14 || state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && this._enableLimit === true && !(this.limitState === 0))
          switch (state0) {
            case 0:
              t1 = b2.get$sweep().get$angle();
            case 1:
              state0 = 0;
              t3 = b1.get$sweep().get$angle();
            case 2:
              state0 = 0;
              t3 = $.$$sub(t1, t3);
              t1 = this.referenceAngle;
            case 3:
              state0 = 0;
              angle = $.$$sub(t3, t1);
              t1 = this.limitState;
            default:
              if (state0 === 6 || state0 === 5 || state0 === 4 || state0 === 0 && t1 === 3)
                switch (state0) {
                  case 0:
                    t1 = this.lowerAngle;
                  case 4:
                    state0 = 0;
                    C = $.max(-0.13962634015954636, $.min($.$$sub(angle, t1), 0.13962634015954636));
                    t3 = this.motorMass;
                  case 5:
                    state0 = 0;
                    limitImpulse = $.$$mul($.$$negate(t3), C);
                    angularError = $.CONSTANT4.abs$0(C);
                  case 6:
                    state0 = 0;
                }
              else
                switch (state0) {
                  case 0:
                  default:
                    if (state0 === 8 || state0 === 7 || state0 === 0 && t1 === 1)
                      switch (state0) {
                        case 0:
                          t1 = this.lowerAngle;
                        case 7:
                          state0 = 0;
                          C = $.$$sub(angle, t1);
                          t1 = $.getInterceptor$JSNumber(C);
                          angularError = t1.$negate(C);
                          C0 = $.max(-0.13962634015954636, $.min(t1.$add(C, 0.03490658503988659), 0));
                          t3 = this.motorMass;
                        case 8:
                          state0 = 0;
                          limitImpulse = $.$$mul($.$$negate(t3), C0);
                      }
                    else
                      switch (state0) {
                        case 0:
                        default:
                          if (state0 === 10 || state0 === 9 || state0 === 0 && t1 === 2)
                            switch (state0) {
                              case 0:
                                t1 = this.upperAngle;
                              case 9:
                                state0 = 0;
                                C = $.$$sub(angle, t1);
                                C0 = $.max(0, $.min($.$$sub(C, 0.03490658503988659), 0.13962634015954636));
                                t1 = this.motorMass;
                              case 10:
                                state0 = 0;
                                limitImpulse = $.$$mul($.$$negate(t1), C0);
                                angularError = C;
                            }
                          else {
                            angularError = 0;
                            limitImpulse = 0;
                          }
                      }
                }
              t1 = b1.get$sweep();
              t2 = t1.get$angle();
            case 11:
              state0 = 0;
              t4 = b1.get$invInertia();
            case 12:
              state0 = 0;
              t1.set$angle($.$$sub(t2, $.$$mul(t4, limitImpulse)));
              t1 = b2.get$sweep();
              t6 = t1.get$angle();
            case 13:
              state0 = 0;
              t8 = b2.get$invInertia();
            case 14:
              state0 = 0;
              t1.set$angle($.$$add(t6, $.$$mul(t8, limitImpulse)));
              b1.synchronizeTransform$0();
              b2.synchronizeTransform$0();
          }
        else
          angularError = 0;
        imp = $.Vector$(0, 0);
        r1 = $.Vector$(0, 0);
        r2 = $.Vector$(0, 0);
        C = $.Vector$(0, 0);
        r1.setFrom$1(this.localAnchor1).subLocal$1(b1.get$localCenter());
        r2.setFrom$1(this.localAnchor2).subLocal$1(b2.get$localCenter());
        $.Matrix22_mulMatrixAndVectorToOut(b1.get$originTransform().get$rotation(), r1, r1);
        $.Matrix22_mulMatrixAndVectorToOut(b2.get$originTransform().get$rotation(), r2, r2);
        C.setFrom$1(b2.get$sweep().get$center()).addLocal$1(r2);
        C.subLocal$1(b1.get$sweep().get$center()).subLocal$1(r1);
        positionError = C.get$length();
      case 15:
        state0 = 0;
        invMass1 = b1.get$invMass();
      case 16:
        state0 = 0;
        invMass2 = b2.get$invMass();
      case 17:
        state0 = 0;
        invI1 = b1.get$invInertia();
      case 18:
        state0 = 0;
        invI2 = b2.get$invInertia();
      case 19:
        state0 = 0;
        t2 = C.get$lengthSquared();
      case 20:
        state0 = 0;
      case 21:
        if (state0 === 21 || state0 === 0 && $.$$gt(t2, 0.0025000000000000005) === true)
          switch (state0) {
            case 0:
              u = $.Vector$(0, 0);
              m = $.$$add(invMass1, invMass2);
            case 21:
              if (state0 === 21 || state0 === 0 && $.$$gt(m, 0) === true)
                switch (state0) {
                  case 0:
                    if (typeof m !== "number")
                      throw $.iae(m);
                    m = 1 / m;
                  case 21:
                    state0 = 0;
                }
              imp.setFrom$1(C).negateLocal$0().mulLocal$1(m);
              t2 = u.setFrom$1(imp);
              if (typeof invMass1 !== "number")
                throw $.iae(invMass1);
              t2.mulLocal$1(0.5 * invMass1);
              b1.get$sweep().get$center().subLocal$1(u);
              t2 = u.setFrom$1(imp);
              if (typeof invMass2 !== "number")
                throw $.iae(invMass2);
              t2.mulLocal$1(0.5 * invMass2);
              b2.get$sweep().get$center().addLocal$1(u);
              C.setFrom$1(b2.get$sweep().get$center()).addLocal$1(r2);
              C.subLocal$1(b1.get$sweep().get$center()).subLocal$1(r1);
          }
        K1 = $.Matrix22$(null, null);
        t2 = $.getInterceptor$JSNumber(invMass1);
        t3 = t2.$add(invMass1, invMass2);
        K1.col1.set$x(t3);
        K1.col2.set$x(0);
        K1.col1.set$y(0);
        t2 = t2.$add(invMass1, invMass2);
        K1.col2.set$y(t2);
        K2 = $.Matrix22$(null, null);
        t2 = r1.y;
      case 22:
        state0 = 0;
        t4 = $.getInterceptor$JSNumber(invI1);
        t2 = t4.$mul(invI1, t2);
        t5 = r1.y;
      case 23:
        state0 = 0;
        t5 = $.$$mul(t2, t5);
        K2.col1.set$x(t5);
        t5 = t4.$negate(invI1);
        t2 = r1.x;
      case 24:
        state0 = 0;
        t2 = $.$$mul(t5, t2);
        t5 = r1.y;
      case 25:
        state0 = 0;
        t5 = $.$$mul(t2, t5);
        K2.col2.set$x(t5);
        t5 = t4.$negate(invI1);
        t2 = r1.x;
      case 26:
        state0 = 0;
        t2 = $.$$mul(t5, t2);
        t5 = r1.y;
      case 27:
        state0 = 0;
        t5 = $.$$mul(t2, t5);
        K2.col1.set$y(t5);
        t5 = r1.x;
      case 28:
        state0 = 0;
        t5 = t4.$mul(invI1, t5);
        t4 = r1.x;
      case 29:
        state0 = 0;
        t4 = $.$$mul(t5, t4);
        K2.col2.set$y(t4);
        K3 = $.Matrix22$(null, null);
        t4 = r2.y;
      case 30:
        state0 = 0;
        t12 = $.getInterceptor$JSNumber(invI2);
        t4 = t12.$mul(invI2, t4);
        t13 = r2.y;
      case 31:
        state0 = 0;
        t13 = $.$$mul(t4, t13);
        K3.col1.set$x(t13);
        t13 = t12.$negate(invI2);
        t4 = r2.x;
      case 32:
        state0 = 0;
        t4 = $.$$mul(t13, t4);
        t13 = r2.y;
      case 33:
        state0 = 0;
        t13 = $.$$mul(t4, t13);
        K3.col2.set$x(t13);
        t13 = t12.$negate(invI2);
        t4 = r2.x;
      case 34:
        state0 = 0;
        t4 = $.$$mul(t13, t4);
        t13 = r2.y;
      case 35:
        state0 = 0;
        t13 = $.$$mul(t4, t13);
        K3.col1.set$y(t13);
        t13 = r2.x;
      case 36:
        state0 = 0;
        t13 = t12.$mul(invI2, t13);
        t12 = r2.x;
      case 37:
        state0 = 0;
        t12 = $.$$mul(t13, t12);
        K3.col2.set$y(t12);
        K1.addLocal$1(K2).addLocal$1(K3);
        K1.solveToOut$2(C.negateLocal$0(), imp);
        C.setFrom$1(imp).mulLocal$1(b1.get$invMass());
        b1.get$sweep().get$center().subLocal$1(C);
        t12 = b1.get$sweep();
        t13 = t12.get$angle();
      case 38:
        state0 = 0;
        t21 = b1.get$invInertia();
      case 39:
        state0 = 0;
        t23 = r1.x;
      case 40:
        state0 = 0;
        t25 = imp.y;
      case 41:
        state0 = 0;
        t25 = $.$$mul(t23, t25);
        t23 = r1.y;
      case 42:
        state0 = 0;
        t28 = imp.x;
      case 43:
        state0 = 0;
        t12.set$angle($.$$sub(t13, $.$$mul(t21, $.$$sub(t25, $.$$mul(t23, t28)))));
        C.setFrom$1(imp).mulLocal$1(b2.get$invMass());
        b2.get$sweep().get$center().addLocal$1(C);
        t12 = b2.get$sweep();
        t30 = t12.get$angle();
      case 44:
        state0 = 0;
        t32 = b2.get$invInertia();
      case 45:
        state0 = 0;
        t34 = r2.x;
      case 46:
        state0 = 0;
        t36 = imp.y;
      case 47:
        state0 = 0;
        t36 = $.$$mul(t34, t36);
        t34 = r2.y;
      case 48:
        state0 = 0;
        t39 = imp.x;
      case 49:
        state0 = 0;
        t12.set$angle($.$$add(t30, $.$$mul(t32, $.$$sub(t36, $.$$mul(t34, t39)))));
        b1.synchronizeTransform$0();
        b2.synchronizeTransform$0();
        return $.$$le(positionError, 0.005) === true && $.$$le(angularError, 0.03490658503988659) === true;
    }
  },
  get$motorSpeed: function() {
    return this._motorSpeed;
  },
  get$maxMotorTorque: function() {
    return this._maxMotorTorque;
  },
  RevoluteJoint$1: function(def) {
    this.localAnchor1.setFrom$1(def.get$localAnchorA());
    this.localAnchor2.setFrom$1(def.get$localAnchorB());
    this.referenceAngle = def.get$referenceAngle();
    this._motorImpulse = 0;
    this.lowerAngle = def.get$lowerAngle();
    this.upperAngle = def.get$upperAngle();
    this._maxMotorTorque = def.get$maxMotorTorque();
    this._motorSpeed = def.get$motorSpeed();
    this._enableLimit = def.get$enableLimit();
    this._enableMotor = def.get$enableMotor();
  }
};

$$.RevoluteJointDef = {"": "JointDef;localAnchorA>,localAnchorB>,referenceAngle>,enableLimit>,lowerAngle>,upperAngle>,enableMotor>,motorSpeed>,maxMotorTorque>,type,userData,bodyA,bodyB,collideConnected",
  initialize$3: function(b1, b2, anchor) {
    this.bodyA = b1;
    this.bodyB = b2;
    this.bodyA.getLocalPointToOut$2(anchor, this.localAnchorA);
    this.bodyB.getLocalPointToOut$2(anchor, this.localAnchorB);
    this.referenceAngle = $.$$sub(this.bodyA.get$angle(), this.bodyB.get$angle());
  },
  RevoluteJointDef$0: function() {
    this.type = 1;
  }
};

$$.DefaultWorldPool = {"": "Object;collision>,timeOfImpact>,distance=",
  timeOfImpact$2: function(arg0, arg1) {
    return this.timeOfImpact.call$2(arg0, arg1);
  },
  distance$3: function(arg0, arg1, arg2) {
    return this.distance.call$3(arg0, arg1, arg2);
  },
  getCircleContactStack$0: function() {
    var queue, i;
    queue = $.DoubleLinkedQueue$();
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.CircleContact$(this));
    return queue;
  },
  getPolyCircleContactStack$0: function() {
    var queue, i;
    queue = $.DoubleLinkedQueue$();
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.PolygonAndCircleContact$(this));
    return queue;
  },
  getPolyContactStack$0: function() {
    var queue, i;
    queue = $.DoubleLinkedQueue$();
    for (i = 0; i < 10; ++i)
      queue.addFirst$1($.PolygonContact$(this));
    return queue;
  },
  DefaultWorldPool$0: function() {
    this.distance = $.Distance$_construct();
    this.collision = $.Collision$_construct(this);
    this.timeOfImpact = $.TimeOfImpact$_construct(this);
  }
};

$$.BenchmarkRunner_setupBenchmarks_anon0 = {"": "Closure;",
  call$1: function(e) {
    return $.trim(e);
  }
};

$$.BenchmarkRunner_setupBenchmarks_anon = {"": "Closure;filterList_0",
  call$1: function(e) {
    return $.$$eq($.indexOf(this.filterList_0, e.get$name()), -1) !== true;
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt(t1.i_1, 0) === true)
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add(t1.i_1, 1);
  }
};

$$.MappedListIterable_map_anon = {"": "Closure;this_0,f_1",
  call$1: function(v) {
    return this.f_1.call$1(this.this_0._f$1(v));
  }
};

$$.BroadPhase_updatePairs_anon = {"": "Closure;",
  call$2: function(a, b) {
    return $.compareTo(a, b);
  }
};

$$.Collection_clear_anon = {"": "Closure;",
  call$1: function(e) {
    return true;
  }
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  }
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};
$$.Bound_contains_JSString = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function($receiver, other) {
    return this.call$2($receiver, other, 0);
  }
};
$$.BoundClosure$3 = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  }
};
$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};
$.BallCageBench$ = function(solveLoops, steps) {
  return new $.BallCageBench(null, null, solveLoops, steps);
};

$.BallDropBench$ = function(solveLoops, steps) {
  return new $.BallDropBench(null, null, solveLoops, steps);
};

$.BenchmarkRunner$ = function() {
  var t1 = $.StringBuffer_StringBuffer("");
  return new $.BenchmarkRunner($.CONSTANT8, $.CONSTANT9, $.List_List(0), t1);
};

$.main = function() {
  var runner, parser;
  runner = $.BenchmarkRunner$();
  parser = $.ArgParser$();
  parser.addOption$2$abbr("filter", "f");
  runner.setupBenchmarks$1($.$$index(parser.Parse$1($._OptionsImpl$().get$arguments()), "filter"));
  runner.runBenchmarks$0();
};

$.CircleStressBench$ = function(solveLoops, steps) {
  return new $.CircleStressBench(null, null, null, solveLoops, steps);
};

$.DominoPlatformBench$ = function(solveLoops, steps) {
  return new $.DominoPlatformBench(null, null, solveLoops, steps);
};

$.DominoTowerBench$ = function(solveLoops, steps) {
  return new $.DominoTowerBench(null, null, null, solveLoops, steps);
};

$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.MappedListIterable$ = function(_list, _f, _start, _end) {
  var t1 = new $.MappedListIterable(_list, _start, _end, _f);
  t1.MappedListIterable$4(_list, _f, _start, _end);
  return t1;
};

$.MappedListIterator$ = function(list, _f, start, _endIndex) {
  return new $.MappedListIterator(list, _f, _endIndex, $.length(list), start, null);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(list, $.length(list), -1, null);
};

$.MappedList$ = function(_list, _f) {
  return new $.MappedList(_list, _f);
};

$.Sort__doSort = function(a, left, right, compare) {
  if (right - left <= 32)
    $.Sort_insertionSort_(a, left, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, right, compare);
};

$.Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior)
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$$gt(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.$$gt(compare.call$2(a[t1], el), 0) === true;
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= a.length)
        throw $.ioore(j0);
      $.CONSTANT0.$indexSet(a, j, a[j0]);
      j = j0;
    }
    $.CONSTANT0.$indexSet(a, j, el);
  }
};

$.Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, t3, great0, less0, t4;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.$isJavaScriptIndexingBehavior)
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.CONSTANT5.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT5.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$$gt(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  t1 = $.$$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$JSNumber(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$lt(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else if ($.$$gt(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$gt(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t2 = less - 1;
  t3 = a.length;
  if (t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (left >= t3)
    throw $.ioore(left);
  a[left] = t4;
  a[t2] = el2;
  t2 = great + 1;
  if (t2 < 0 || t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  a[t2] = el4;
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
};

$.Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, t3, great0, less0;
  sixth = $.CONSTANT5.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.CONSTANT5.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$$gt(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$$gt(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$$gt(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.CONSTANT0.$indexSet(a, index1, el1);
  $.CONSTANT0.$indexSet(a, index3, el3);
  $.CONSTANT0.$indexSet(a, index5, el5);
  if (left < 0 || left >= a.length)
    throw $.ioore(left);
  $.CONSTANT0.$indexSet(a, index2, a[left]);
  if (right < 0 || right >= a.length)
    throw $.ioore(right);
  $.CONSTANT0.$indexSet(a, index4, a[right]);
  less = left + 1;
  great = right - 1;
  t1 = $.$$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.$indexSet(a, k, a[less]);
          $.CONSTANT0.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$JSNumber(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            t3 = a.length;
            great0 = great - 1;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.CONSTANT0.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, less, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, k, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$lt(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.$indexSet(a, k, a[less]);
          $.CONSTANT0.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$$gt(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$gt(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              $.CONSTANT0.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, less, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, k, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
  t2 = less - 1;
  if (t2 >= a.length)
    throw $.ioore(t2);
  $.CONSTANT0.$indexSet(a, left, a[t2]);
  $.CONSTANT0.$indexSet(a, t2, el2);
  t2 = great + 1;
  if (t2 < 0 || t2 >= a.length)
    throw $.ioore(t2);
  $.CONSTANT0.$indexSet(a, right, a[t2]);
  $.CONSTANT0.$indexSet(a, t2, el4);
  $.Sort__doSort(a, left, less - 2, compare);
  $.Sort__doSort(a, great + 2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          if (less >= a.length)
            throw $.ioore(less);
          $.CONSTANT0.$indexSet(a, k, a[less]);
          $.CONSTANT0.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$$lt(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              $.CONSTANT0.$indexSet(a, k, a[less]);
              less0 = less + 1;
              if (great >= a.length)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, less, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              $.CONSTANT0.$indexSet(a, k, a[great]);
              $.CONSTANT0.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
        }
    }
    $.Sort__doSort(a, less, great, compare);
  } else
    $.Sort__doSort(a, less, great, compare);
};

$.ToString_collectionToString = function(c) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || !!c.$isList);
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!o.$isCollection))
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, typeof o === "object" && o !== null && (o.constructor === Array || !!o.$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!o.$isMap)
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$JSString($name);
  return t1.charCodeAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.Primitives_numMicroseconds = function() {
  if (typeof window != "undefined" && window !== null) {
    var performance = window.performance;
    if (!(performance == null) && typeof performance.webkitNow == "function")
      return $.CONSTANT4.floor$0(1000 * performance.webkitNow());
  }
  return 1000 * Date.now();
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if ($.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $._LinkedHashMapImpl$();
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(key, iterator.get$current());
  }
  return result;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = !($name === "") && !($name === "Object") && !($name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.JsStringBuffer$("");
  if (isMultiLine === true)
    $.add(sb, "m");
  if (isCaseSensitive !== true)
    $.add(sb, "i");
  if (global === true)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, $length, patternLength, startIndex, position, t2, endIndex;
  result = $.List_List(0);
  t1 = $.getInterceptor$JSArrayJSString(haystack);
  $length = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    t2 = $.getInterceptor(position);
    if (t2.$eq(position, -1) === true)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = t2.$add(position, patternLength);
    if ($.$$eq(endIndex, $length) === true)
      break;
    else
      startIndex = t2.$eq(position, endIndex) === true ? $.$$add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.$$eq($.CONSTANT1.indexOf$2(receiver, other, startIndex), -1) !== true;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT1.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.CONSTANT1.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.JsStringBuffer$("");
      $length = receiver.length;
      result.add$1(to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(receiver[i]);
        result.add$1(to);
      }
      return result.toString$0();
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function($content) {
  var t1 = typeof $content === "string" ? $content : $.S($content);
  return new $.JsStringBuffer(t1);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !src.$isJavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = $.getInterceptor$JSArrayJSString(src); i >= srcStart; --i, --j)
      $.CONSTANT0.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$JSArrayJSString(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.CONSTANT0.$indexSet(dst, j, t1.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1;
  for (t1 = $.CONSTANT0.get$iterator(elementsToRemove); t1.moveNext$0() === true;)
    collection.remove$1(t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  $.removeMatching(collection, $.contains0($.CONSTANT0.toSet$0(elementsToRemove)));
};

$.IterableMixinWorkaround_removeMatching = function(collection, test) {
  var elementsToRemove, t1, t2;
  elementsToRemove = [];
  for (t1 = collection.get$iterator(); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (test.call$1(t2) === true)
      elementsToRemove.push(t2);
  }
  collection.removeAll$1(elementsToRemove);
};

$.IterableMixinWorkaround_removeMatchingList = function(list, test) {
  var retained, $length, i, element, t1, t2, t3;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !list.$isJavaScriptIndexingBehavior)
    return $.IterableMixinWorkaround_removeMatchingList$bailout(1, list, test);
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  for (t2 = list.length, i = 0; i < t1; ++i) {
    t3 = retained[i];
    if (i >= t2)
      throw $.ioore(i);
    list[i] = t3;
  }
  $.CONSTANT0.set$length(list, t1);
};

$.IterableMixinWorkaround_removeMatchingList$bailout = function(state0, list, test) {
  var retained, $length, i, element, t1;
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  if (retained.length === $length)
    return;
  for (i = 0; t1 = retained.length, i < t1; ++i)
    $.CONSTANT0.$indexSet(list, i, retained[i]);
  $.CONSTANT0.set$length(list, t1);
};

$.IterableMixinWorkaround_mappedByList = function(list, f) {
  return $.MappedList$(list, f);
};

$.IterableMixinWorkaround_sortList = function(l, compare) {
  if (compare == null)
    compare = $.Comparable_compare;
  $.Sort__doSort(l, 0, l.length - 1, compare);
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT5.$tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, $length) {
  return $.$$and($.$$add(currentProbe, numberOfProbes), $.$$sub($length, 1));
};

$._HashMapImplValueIterable$ = function(_map) {
  return new $._HashMapImplValueIterable(_map);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.HashSet$ = function() {
  return new $.HashSet($._HashMapImpl$());
};

$.HashSet_HashSet$from = function(other) {
  var set, t1;
  set = $.HashSet$();
  for (t1 = $.CONSTANT0.get$iterator(other); t1.moveNext$0() === true;)
    set.add$1(t1.get$current());
  return set;
};

$._HashSetIterator$ = function(set) {
  return new $._HashSetIterator($.CONSTANT0.get$iterator(set._backingMap._keys));
};

$.Comparable_compare = function(a, b) {
  return $.compareTo(a, b);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll($.replaceAll($.replaceAll($.CONSTANT1.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.IllegalJSRegExpException$ = function(pattern, errmsg) {
  return new $.IllegalJSRegExpException("Illegal pattern: " + $.S(pattern) + ", " + errmsg);
};

$.Expect_equals = function(expected, actual, reason) {
  var msg;
  if ($.$$eq(expected, actual) === true)
    return;
  msg = reason == null ? "" : ", '" + $.S(reason) + "'";
  $.Expect__fail("Expect.equals(expected: <" + $.S(expected) + ">, actual: <" + $.S(actual) + ">" + msg + ") fails.");
};

$.Expect__fail = function(message) {
  throw $.$$throw($.ExpectException$(message));
};

$.ExpectException$ = function(message) {
  return new $.ExpectException(message);
};

$.List_List = function($length) {
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return new Array($length);
};

$.List_List$fixedLength = function($length, fill) {
  var result, t1, i;
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = $.Primitives_newFixedList($length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior)
    return $.List_List$fixedLength$bailout(1, $length, fill, result);
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, $length, fill, result) {
  var t1, i;
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = $.getInterceptor$JSArrayJSString(result), i = 0; $.CONSTANT5.$lt(i, t1.get$length(result)); ++i)
      t1.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$._OptionsImpl$ = function() {
  return new $._OptionsImpl(null);
};

$.Stopwatch$ = function() {
  return new $.Stopwatch(null, null);
};

$.Stopwatch__frequency = function() {
  return 1000000;
};

$.Stopwatch__now = function() {
  return $.Primitives_numMicroseconds();
};

$.StringBuffer_StringBuffer = function($content) {
  return $.JsStringBuffer$($content);
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.CONSTANT7.get$isNegative(b) === true || $.CONSTANT7.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.CONSTANT7.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.CONSTANT4.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.ArgParser$ = function() {
  return new $.ArgParser($.makeLiteralMap([]), [], null, null);
};

$._Option$ = function($name, abbreviation, help, allowed, allowedHelp, defaultValue, callback, allowMultiple, isFlag, negatable) {
  return new $._Option($name, abbreviation, allowed, defaultValue, callback, help, allowedHelp, isFlag, negatable, allowMultiple);
};

$.ContactFilter$ = function() {
  return new $.ContactFilter();
};

$.ContactImpulse$ = function() {
  return new $.ContactImpulse($.List_List(2), $.List_List(2));
};

$.AxisAlignedBox$ = function(lowerBound, upperBound) {
  var t1 = new $.AxisAlignedBox(lowerBound, upperBound);
  t1.AxisAlignedBox$2(lowerBound, upperBound);
  return t1;
};

$.AxisAlignedBox_testOverlap = function(a, b) {
  var t1, t2, t4, t5;
  t1 = b.get$lowerBound();
  t2 = t1.get$x();
  t4 = a.get$upperBound();
  t5 = t4.get$x();
  if (typeof t2 !== "number")
    return $.AxisAlignedBox_testOverlap$bailout(1, a, b, t2);
  if (typeof t5 !== "number")
    return $.AxisAlignedBox_testOverlap$bailout(2, a, b, t2, t5);
  if (!(t2 > t5)) {
    t1 = t1.get$y();
    t4 = t4.get$y();
    if (typeof t1 !== "number")
      return $.AxisAlignedBox_testOverlap$bailout(3, a, b, t1);
    if (typeof t4 !== "number")
      return $.AxisAlignedBox_testOverlap$bailout(4, a, b, t1, t4);
    t4 = t1 > t4;
    t1 = t4;
  } else
    t1 = true;
  if (!t1) {
    t1 = a.get$lowerBound();
    t2 = t1.get$x();
    t4 = b.get$upperBound();
    t5 = t4.get$x();
    if (typeof t2 !== "number")
      return $.AxisAlignedBox_testOverlap$bailout(5, a, b, t2);
    if (typeof t5 !== "number")
      return $.AxisAlignedBox_testOverlap$bailout(6, a, b, t2, t5);
    if (!(t2 > t5)) {
      t1 = t1.get$y();
      t4 = t4.get$y();
      if (typeof t1 !== "number")
        return $.AxisAlignedBox_testOverlap$bailout(7, 0, b, t1);
      if (typeof t4 !== "number")
        return $.AxisAlignedBox_testOverlap$bailout(8, 0, 0, t1, t4);
      t4 = t1 > t4;
      t1 = t4;
    } else
      t1 = true;
  } else
    t1 = true;
  return !t1;
};

$.AxisAlignedBox_testOverlap$bailout = function(state0, a, b, t1, t3) {
  switch (state0) {
    case 0:
      t1 = b.get$lowerBound().get$x();
    case 1:
      state0 = 0;
      t3 = a.get$upperBound().get$x();
    case 2:
      state0 = 0;
    default:
      if (state0 === 4 || state0 === 3 || state0 === 0 && $.$$gt(t1, t3) !== true)
        switch (state0) {
          case 0:
            t1 = b.get$lowerBound().get$y();
          case 3:
            state0 = 0;
            t3 = a.get$upperBound().get$y();
          case 4:
            state0 = 0;
            t5 = $.$$gt(t1, t3) === true;
            t1 = t5;
        }
      else
        t1 = true;
    case 5:
    case 6:
    case 7:
    case 8:
      var t5;
      if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && !t1)
        switch (state0) {
          case 0:
            t1 = a.get$lowerBound().get$x();
          case 5:
            state0 = 0;
            t3 = b.get$upperBound().get$x();
          case 6:
            state0 = 0;
          default:
            if (state0 === 8 || state0 === 7 || state0 === 0 && $.$$gt(t1, t3) !== true)
              switch (state0) {
                case 0:
                  t1 = a.get$lowerBound().get$y();
                case 7:
                  state0 = 0;
                  t3 = b.get$upperBound().get$y();
                case 8:
                  state0 = 0;
                  t5 = $.$$gt(t1, t3) === true;
                  t1 = t5;
              }
            else
              t1 = true;
        }
      else
        t1 = true;
      return !t1;
  }
};

$.Collision$_construct = function(pool) {
  var t1 = $.DistanceInput$();
  t1 = new $.Collision(pool, $.SimplexCache$(), t1, $.DistanceOutput$(), $.EdgeResults$(), $.EdgeResults$(), $.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.List_List(2), $.List_List(2));
  t1.Collision$_construct$1(pool);
  return t1;
};

$.Collision_clipSegmentToLine = function(vOut, vIn, norm, offset) {
  var t1, t2, distance0, t3, distance1, numOut, numOut0, interp, vin;
  t1 = $.getInterceptor$JSArrayJSString(vIn);
  t2 = t1.$index(vIn, 0).get$v();
  distance0 = $.$$sub($.$$add($.$$mul(norm.x, t2.get$x()), $.$$mul(norm.y, t2.get$y())), offset);
  t3 = t1.$index(vIn, 1).get$v();
  distance1 = $.$$sub($.$$add($.$$mul(norm.x, t3.get$x()), $.$$mul(norm.y, t3.get$y())), offset);
  t2 = $.getInterceptor$JSNumber(distance0);
  if (t2.$le(distance0, 0) === true) {
    if (0 >= vOut.length)
      throw $.ioore(0);
    vOut[0].setFrom$1(t1.$index(vIn, 0));
    numOut = 1;
  } else
    numOut = 0;
  if ($.$$le(distance1, 0) === true) {
    numOut0 = numOut + 1;
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].setFrom$1(t1.$index(vIn, 1));
    numOut = numOut0;
  }
  if ($.$$lt(t2.$mul(distance0, distance1), 0) === true) {
    interp = t2.$div(distance0, t2.$sub(distance0, distance1));
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].get$v().setFrom$1(t1.$index(vIn, 1).get$v()).subLocal$1(t1.$index(vIn, 0).get$v()).mulLocal$1(interp).addLocal$1(t1.$index(vIn, 0).get$v());
    vin = t2.$gt(distance0, 0) === true ? t1.$index(vIn, 0) : t1.$index(vIn, 1);
    if (numOut >= vOut.length)
      throw $.ioore(numOut);
    vOut[numOut].get$id().setFrom$1(vin.get$id());
    ++numOut;
  }
  return numOut;
};

$.ClipVertex$ = function() {
  return new $.ClipVertex($.Vector$(0, 0), $.ContactID$());
};

$.EdgeResults$ = function() {
  return new $.EdgeResults(0, 0);
};

$.ContactID$ = function() {
  return new $.ContactID($.Features$());
};

$.Distance$_construct = function() {
  return new $.Distance(0, 0, 20, $.Simplex$(), $.List_List(3), $.List_List(3), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
};

$.DistanceInput$ = function() {
  return new $.DistanceInput($.DistanceProxy$(), $.DistanceProxy$(), $.Transform$(), $.Transform$(), false);
};

$.DistanceOutput$ = function() {
  return new $.DistanceOutput($.Vector$(0, 0), $.Vector$(0, 0), null, null);
};

$.DistanceProxy$ = function() {
  var t1 = new $.DistanceProxy($.List_List(8), 0, 0);
  t1.DistanceProxy$0();
  return t1;
};

$.Features$ = function() {
  return new $.Features(0, 0, 0, 0);
};

$.Manifold$ = function() {
  var t1 = new $.Manifold($.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), null, 0);
  t1.Manifold$0();
  return t1;
};

$.ManifoldPoint$ = function() {
  return new $.ManifoldPoint($.Vector$(0, 0), 0, 0, $.ContactID$());
};

$.Simplex$ = function() {
  var t1, t2, t3, t4, t5, t6;
  t1 = $.SimplexVertex$();
  t2 = $.SimplexVertex$();
  t3 = $.SimplexVertex$();
  t4 = $.List_List(3);
  t5 = $.Vector$(0, 0);
  t6 = $.Vector$(0, 0);
  t6 = new $.Simplex(t1, t2, t3, t4, 0, t5, $.Vector$(0, 0), t6, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
  t6.Simplex$0();
  return t6;
};

$.SimplexCache$ = function() {
  var t1 = new $.SimplexCache(0, 0, $.List_List(3), $.List_List(3));
  t1.SimplexCache$0();
  return t1;
};

$.SimplexVertex$ = function() {
  return new $.SimplexVertex($.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0, 0);
};

$.TimeOfImpact$_construct = function(argPool) {
  var t1 = new $.TimeOfImpact($.SimplexCache$(), $.DistanceInput$(), $.Transform$(), $.Transform$(), $.DistanceOutput$(), $.SeparationFunction$(), $.List_List(2), $.Sweep$(), $.Sweep$(), argPool);
  t1.TimeOfImpact$_construct$1(argPool);
  return t1;
};

$.SeparationFunction$ = function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
  t1 = $.DistanceProxy$();
  t2 = $.DistanceProxy$();
  t3 = $.Vector$(0, 0);
  t4 = $.Vector$(0, 0);
  t5 = $.Sweep$();
  t6 = $.Sweep$();
  t7 = $.Vector$(0, 0);
  t8 = $.Vector$(0, 0);
  t9 = $.Vector$(0, 0);
  t10 = $.Vector$(0, 0);
  t11 = $.Vector$(0, 0);
  t12 = $.Vector$(0, 0);
  t13 = $.Vector$(0, 0);
  t14 = $.Vector$(0, 0);
  t15 = $.Vector$(0, 0);
  t16 = $.Vector$(0, 0);
  t17 = $.Transform$();
  t18 = $.Transform$();
  return new $.SeparationFunction(t1, t2, 0, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, $.Vector$(0, 0), $.Vector$(0, 0), t16, t17, t18);
};

$.TimeOfImpactInput$ = function() {
  return new $.TimeOfImpactInput($.DistanceProxy$(), $.DistanceProxy$(), $.Sweep$(), $.Sweep$(), 0);
};

$.TimeOfImpactOutput$ = function() {
  return new $.TimeOfImpactOutput(0, 0);
};

$.WorldManifold$ = function() {
  var t1, t2, t3;
  t1 = $.Vector$(0, 0);
  t2 = $.Vector$(0, 0);
  t3 = $.Vector$(0, 0);
  t3 = new $.WorldManifold(t1, $.List_List(2), t2, t3);
  t3.WorldManifold$0();
  return t3;
};

$.BroadPhase$ = function() {
  var t1 = new $.BroadPhase($.DynamicTree$(), 0, null, null, 16, 0, null);
  t1.BroadPhase$0();
  return t1;
};

$.DynamicTree$ = function() {
  var t1, t2, t3;
  t1 = $.List_List(4);
  t2 = $.Vector$(0, 0);
  t3 = $.AxisAlignedBox$(null, null);
  t3 = new $.DynamicTree(null, 0, null, 0, 0, $.Queue_Queue(), t1, 0, t2, t3, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
  t3.DynamicTree$0();
  return t3;
};

$.DynamicTreeNode$_construct = function() {
  return new $.DynamicTreeNode($.AxisAlignedBox$(null, null), null, null, null, null, null, null);
};

$.Pair$ = function() {
  return new $.Pair(null, null);
};

$.CircleShape$ = function() {
  return new $.CircleShape($.Vector$(0, 0), 0, 0);
};

$.CircleShape$copy = function(other) {
  var t1, t2;
  t1 = other.type;
  t2 = other.radius;
  return new $.CircleShape($.Vector$copy(other.position), t1, t2);
};

$.MassData$ = function() {
  return new $.MassData(0, $.Vector$(0, 0), 0);
};

$.PolygonShape$ = function() {
  var t1, t2;
  t1 = $.List_List(8);
  t2 = $.List_List(8);
  t2 = new $.PolygonShape($.Vector$(0, 0), t1, t2, 0, 1, 0.01);
  t2.PolygonShape$0();
  return t2;
};

$.PolygonShape$copy = function(other) {
  var t1, t2, t3, t4;
  t1 = other.radius;
  t2 = other.vertexCount;
  t3 = $.List_List(8);
  t4 = $.List_List(8);
  t1 = new $.PolygonShape($.Vector$copy(other.centroid), t3, t4, t2, 1, t1);
  t1.PolygonShape$copy$1(other);
  return t1;
};

$.MathBox_distanceSquared = function(v1, v2) {
  var dx, dy;
  dx = $.$$sub(v1.get$x(), v2.get$x());
  dy = $.$$sub(v1.get$y(), v2.get$y());
  return $.$$add($.$$mul(dx, dx), $.$$mul(dy, dy));
};

$.Matrix22$ = function(c1, c2) {
  var t1 = new $.Matrix22(null, null);
  t1.Matrix22$2(c1, c2);
  return t1;
};

$.Matrix22_mulTransMatrixAndVectorToOut = function(matrix, vector, out) {
  var outx = $.$$add($.$$mul(vector.get$x(), matrix.get$col1().get$x()), $.$$mul(vector.get$y(), matrix.get$col1().get$y()));
  out.set$y($.$$add($.$$mul(vector.get$x(), matrix.get$col2().get$x()), $.$$mul(vector.get$y(), matrix.get$col2().get$y())));
  out.set$x(outx);
};

$.Matrix22_mulMatrixAndVectorToOut = function(matrix, vector, out) {
  var tempy = $.$$add($.$$mul(matrix.get$col1().get$y(), vector.get$x()), $.$$mul(matrix.get$col2().get$y(), vector.get$y()));
  out.set$x($.$$add($.$$mul(matrix.get$col1().get$x(), vector.get$x()), $.$$mul(matrix.get$col2().get$x(), vector.get$y())));
  out.set$y(tempy);
};

$.Matrix33$ = function() {
  return new $.Matrix33($.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0), $.Vector3$(0, 0, 0));
};

$.Settings_mixRestitution = function(restitution1, restitution2) {
  return $.$$gt(restitution1, restitution2) === true ? restitution1 : restitution2;
};

$.Sweep$ = function() {
  return new $.Sweep($.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0);
};

$.Transform$ = function() {
  return new $.Transform($.Vector$(0, 0), $.Matrix22$(null, null));
};

$.Transform_mulToOut = function(transform, vector, out) {
  var tempY = $.$$add($.$$add(transform.get$position().get$y(), $.$$mul(transform.get$rotation().get$col1().get$y(), vector.get$x())), $.$$mul(transform.get$rotation().get$col2().get$y(), vector.get$y()));
  out.set$x($.$$add($.$$add(transform.get$position().get$x(), $.$$mul(transform.get$rotation().get$col1().get$x(), vector.get$x())), $.$$mul(transform.get$rotation().get$col2().get$x(), vector.get$y())));
  out.set$y(tempY);
};

$.Transform_mulTransToOut = function(T, v, out) {
  var v1x, v1y, t1, b, b1, t2, tempy;
  v1x = $.$$sub(v.get$x(), T.get$position().get$x());
  v1y = $.$$sub(v.get$y(), T.get$position().get$y());
  t1 = T.get$rotation();
  b = t1.get$col1();
  b1 = t1.get$col2();
  t1 = $.getInterceptor$JSNumber(v1x);
  t2 = $.getInterceptor$JSNumber(v1y);
  tempy = $.$$add(t1.$mul(v1x, b1.get$x()), t2.$mul(v1y, b1.get$y()));
  out.set$x($.$$add(t1.$mul(v1x, b.get$x()), t2.$mul(v1y, b.get$y())));
  out.set$y(tempy);
};

$.Vector$ = function(x, y) {
  return new $.Vector(x, y);
};

$.Vector$copy = function(other) {
  return new $.Vector(other.get$x(), other.get$y());
};

$.Vector_dot = function(one, two) {
  return $.$$add($.$$mul(one.get$x(), two.get$x()), $.$$mul(one.get$y(), two.get$y()));
};

$.Vector_crossNumAndVectorToOut = function(s, a, out) {
  var t1, tempY;
  t1 = $.getInterceptor$JSNumber(s);
  tempY = t1.$mul(s, a.get$x());
  out.set$x($.$$mul(t1.$negate(s), a.get$y()));
  out.set$y(tempY);
};

$.Vector_crossVectorAndNumToOut = function(a, s, out) {
  var t1, t2;
  t1 = a.get$x();
  if (typeof t1 !== "number")
    throw $.iae(t1);
  t2 = a.get$y();
  if (typeof t2 !== "number")
    throw $.iae(t2);
  out.set$x(s * t2);
  out.set$y(-s * t1);
};

$.Vector3$ = function(x, y, z) {
  return new $.Vector3(x, y, z);
};

$.Vector3_crossToOut = function(a, b, out) {
  var tempy, tempz;
  tempy = $.$$sub($.$$mul(a.get$z(), b.get$x()), $.$$mul(a.get$x(), b.get$z()));
  tempz = $.$$sub($.$$mul(a.get$x(), b.get$y()), $.$$mul(a.get$y(), b.get$x()));
  out.x = $.$$sub($.$$mul(a.get$y(), b.get$z()), $.$$mul(a.get$z(), b.get$y()));
  out.y = tempy;
  out.z = tempz;
};

$.Body$ = function(bd, world) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
  t1 = $.Transform$();
  t2 = $.Sweep$();
  t3 = $.Vector$copy(bd.linearVelocity);
  t4 = bd.linearDamping;
  t5 = bd.angularDamping;
  t6 = $.Vector$(0, 0);
  t7 = bd.userData;
  t8 = $.FixtureDef$();
  t9 = $.MassData$();
  t10 = $.Transform$();
  t11 = $.Vector$(0, 0);
  t12 = $.Vector$(0, 0);
  t12 = new $.Body(world, 0, null, 0, t7, t3, 0, null, null, null, null, null, 0, null, t6, 0, 0, 0, t4, t5, bd.type, null, t1, t2, t8, t9, t10, t11, t12);
  t12.Body$2(bd, world);
  return t12;
};

$.BodyDef$ = function() {
  return new $.BodyDef(0, 0, null, $.Vector$(0, 0), $.Vector$(0, 0), 0, false, null, false, true, 0, 0, true, true);
};

$.ContactManager$ = function(argPool) {
  var t1 = $.ContactFilter$();
  return new $.ContactManager($.BroadPhase$(), null, 0, t1, null, argPool);
};

$.Filter$ = function() {
  return new $.Filter(0, 0, 0);
};

$.Fixture$ = function() {
  return new $.Fixture($.AxisAlignedBox$(null, null), null, null, null, null, null, null, null, $.Filter$(), null, null, $.AxisAlignedBox$(null, null), $.AxisAlignedBox$(null, null));
};

$.FixtureDef$ = function() {
  var t1 = new $.FixtureDef(null, null, 0.2, 0, 0, false, $.Filter$());
  t1.FixtureDef$0();
  return t1;
};

$.Island$ = function() {
  return new $.Island(null, null, null, null, null, null, null, null, null, null, null, null, null, $.ContactSolver$(), $.Vector$(0, 0), $.ContactImpulse$());
};

$.Position$ = function() {
  var t1 = new $.Position(null, null);
  t1.Position$0();
  return t1;
};

$.Velocity$ = function() {
  var t1 = new $.Velocity(null, null);
  t1.Velocity$0();
  return t1;
};

$.TimeStep$ = function() {
  return new $.TimeStep(0, 0, 0, 0, 0, true);
};

$.World$ = function(gravity, doSleep, argPool) {
  var t1 = new $.World(4, null, null, null, 0, 0, gravity, doSleep, null, null, null, argPool, 0, true, true, $.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), $.TimeStep$(), $.Vector$(0, 0), $.Vector$(0, 0), $.WorldQueryWrapper$(), $.TimeOfImpactInput$(), $.TimeOfImpactOutput$(), $.Sweep$(), $.TimeOfImpactSolver$(), $.List_List(32), $.Island$(), $.List_List(10));
  t1.World$3(gravity, doSleep, argPool);
  return t1;
};

$.WorldQueryWrapper$ = function() {
  return new $.WorldQueryWrapper(null, null);
};

$.CircleContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.CircleContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.ContactConstraint$ = function() {
  var t1 = new $.ContactConstraint($.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Matrix22$(null, null), $.Matrix22$(null, null), null, null, null, null, null, null, 0, null);
  t1.ContactConstraint$0();
  return t1;
};

$.ContactConstraintPoint$ = function() {
  return new $.ContactConstraintPoint($.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0, 0, 0, 0);
};

$.ContactEdge$ = function() {
  return new $.ContactEdge(null, null, null, null);
};

$.ContactRegister$ = function() {
  return new $.ContactRegister(null, false);
};

$.ContactSolver$ = function() {
  var t1 = new $.ContactSolver($.List_List(256), null, $.WorldManifold$(), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.PositionSolverManifold$(), $.Vector$(0, 0), $.Vector$(0, 0));
  t1.ContactSolver$0();
  return t1;
};

$.PositionSolverManifold$ = function() {
  return new $.PositionSolverManifold($.Vector$(0, 0), $.Vector$(0, 0), 0, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
};

$.PolygonAndCircleContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.PolygonAndCircleContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.PolygonContact$ = function(argPool) {
  var t1 = $.Manifold$();
  return new $.PolygonContact(null, null, null, $.ContactEdge$(), $.ContactEdge$(), null, null, t1, null, argPool, $.Manifold$());
};

$.TimeOfImpactConstraint$ = function() {
  var t1 = new $.TimeOfImpactConstraint($.List_List(2), $.Vector$(0, 0), $.Vector$(0, 0), 0, 0, 0, null, null);
  t1.TimeOfImpactConstraint$0();
  return t1;
};

$.TimeOfImpactSolver$ = function() {
  var t1 = new $.TimeOfImpactSolver($.List_List(4), 0, null, $.TimeOfImpactSolverManifold$(), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
  t1.TimeOfImpactSolver$0();
  return t1;
};

$.TimeOfImpactSolverManifold$ = function() {
  return new $.TimeOfImpactSolverManifold($.Vector$(0, 0), $.Vector$(0, 0), 0, $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0), $.Vector$(0, 0));
};

$.ConstantVolumeJoint$ = function(_world, def) {
  var t1, t2, t3, t4, t5, t6, t7;
  t1 = def.get$type();
  t2 = def.get$bodyA();
  t3 = def.get$bodyB();
  t4 = def.get$collideConnected();
  t5 = def.get$userData();
  t6 = $.Vector$(0, 0);
  t7 = $.Vector$(0, 0);
  t7 = new $.ConstantVolumeJoint(null, null, null, null, null, 0, _world, null, null, null, t1, null, null, $.JointEdge$(), $.JointEdge$(), t2, t3, false, t4, t5, t6, t7, null, null, null, null);
  t7.ConstantVolumeJoint$2(_world, def);
  return t7;
};

$.DistanceJoint$ = function(def) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
  t1 = def.get$type();
  t2 = def.get$bodyA();
  t3 = def.get$bodyB();
  t4 = def.get$collideConnected();
  t5 = def.get$userData();
  t6 = $.Vector$(0, 0);
  t7 = $.Vector$(0, 0);
  t8 = $.JointEdge$();
  t9 = $.JointEdge$();
  t10 = $.Vector$copy(def.get$localAnchorA());
  t11 = $.Vector$copy(def.get$localAnchorB());
  t12 = $.length(def);
  return new $.DistanceJoint(t10, t11, $.Vector$(0, 0), 0, null, t12, def.get$frequencyHz(), def.get$dampingRatio(), 0, 0, t1, null, null, t8, t9, t2, t3, false, t4, t5, t6, t7, null, null, null, null);
};

$.DistanceJointDef$ = function() {
  var t1 = new $.DistanceJointDef($.Vector$(0, 0), $.Vector$(0, 0), 1, 0, 0, 0, null, null, null, false);
  t1.DistanceJointDef$0();
  return t1;
};

$.FrictionJoint$ = function(def) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = def.get$type();
  t2 = def.get$bodyA();
  t3 = def.get$bodyB();
  t4 = def.get$collideConnected();
  t5 = def.get$userData();
  t6 = $.Vector$(0, 0);
  t7 = $.Vector$(0, 0);
  t8 = $.JointEdge$();
  t9 = $.JointEdge$();
  return new $.FrictionJoint($.Vector$copy(def.get$localAnchorA()), $.Vector$copy(def.get$localAnchorB()), $.Vector$(0, 0), 0, def.get$maxForce(), def.get$maxTorque(), t1, null, null, t8, t9, t2, t3, false, t4, t5, t6, t7, null, null, null, null);
};

$.Joint_Joint$create = function(argWorld, def) {
  switch (def.get$type()) {
    case 5:
      throw $.$$throw($.UnimplementedError$(null));
    case 3:
      return $.DistanceJoint$(def);
    case 2:
      throw $.$$throw($.UnimplementedError$(null));
    case 1:
      return $.RevoluteJoint$(def);
    case 8:
      throw $.$$throw($.UnimplementedError$(null));
    case 9:
      return $.FrictionJoint$(def);
    case 7:
      throw $.$$throw($.UnimplementedError$(null));
    case 6:
      throw $.$$throw($.UnimplementedError$(null));
    case 4:
      throw $.$$throw($.UnimplementedError$(null));
    case 10:
      return $.ConstantVolumeJoint$(argWorld, def);
  }
  return;
};

$.JointEdge$ = function() {
  return new $.JointEdge(null, null, null, null);
};

$.RevoluteJoint$ = function(def) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9;
  t1 = def.get$type();
  t2 = def.get$bodyA();
  t3 = def.get$bodyB();
  t4 = def.get$collideConnected();
  t5 = def.get$userData();
  t6 = $.Vector$(0, 0);
  t7 = $.Vector$(0, 0);
  t8 = $.JointEdge$();
  t9 = $.JointEdge$();
  t7 = new $.RevoluteJoint($.Vector$(0, 0), $.Vector$(0, 0), $.Vector3$(0, 0, 0), 0, $.Matrix33$(), null, null, null, null, null, null, null, null, null, t1, null, null, t8, t9, t2, t3, false, t4, t5, t6, t7, null, null, null, null);
  t7.RevoluteJoint$1(def);
  return t7;
};

$.RevoluteJointDef$ = function() {
  var t1 = new $.RevoluteJointDef($.Vector$(0, 0), $.Vector$(0, 0), 0, false, 0, 0, false, 0, 0, 0, null, null, null, false);
  t1.RevoluteJointDef$0();
  return t1;
};

$.DefaultWorldPool$ = function() {
  var t1 = new $.DefaultWorldPool(null, null, null);
  t1.DefaultWorldPool$0();
  return t1;
};

$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
Isolate.$finishClasses($$);
$$ = {};
$.List = {builtin$cls: 'List'};
$.num = {builtin$cls: 'num'};
$.Match = {builtin$cls: 'Match'};
$.$int = {builtin$cls: '$int'};
$.CONSTANT2 = new Isolate.$isolateProperties.JSNull();
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT4 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT5 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT7 = new Isolate.$isolateProperties.JSDouble();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT1 = new Isolate.$isolateProperties.JSString();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT10 = Isolate.makeConstantList([]);
$.CONSTANT9 = Isolate.makeConstantList([10, 100, 500, 2000]);
$.CONSTANT3 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT8 = Isolate.makeConstantList([10, 30]);
$.CONSTANT6 = new Isolate.$isolateProperties.JSBool();
$.Primitives_hashCodeSeed = 0;
$._OptionsImpl__nativeArguments = Isolate.$isolateProperties.CONSTANT10;
$.TimeOfImpact_toiCalls = null;
$.TimeOfImpact_toiIters = null;
$.TimeOfImpact_toiMaxIters = null;
$.TimeOfImpact_toiRootIters = null;
$.TimeOfImpact_toiMaxRootIters = null;
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.$$div = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$div(receiver, a0);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.$$le = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$le(receiver, a0);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.$$shr = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shr(receiver, a0);
};
$.abs = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).abs$0(receiver);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.allMatches = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).allMatches$1(receiver, a0);
};
$.clear = function(receiver) {
  return $.getInterceptor$JSArray(receiver).clear$0(receiver);
};
$.compareTo = function(receiver, a0) {
  return $.getInterceptor$JSNumberJSString(receiver).compareTo$1(receiver, a0);
};
$.contains0 = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$contains(receiver);
};
$.contains = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).contains$1(receiver, a0);
};
$.floor = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).floor$0(receiver);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.getRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).getRange$2(receiver, a0, a1);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.indexOf = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).indexOf$1(receiver, a0);
};
$.isEmpty = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$isEmpty(receiver);
};
$.length = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$length(receiver);
};
$.mappedBy = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).mappedBy$1(receiver, a0);
};
$.removeMatching = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).removeMatching$1(receiver, a0);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.setRange = function(receiver, a0, a1, a2) {
  return $.getInterceptor$JSArray(receiver).setRange$3(receiver, a0, a1, a2);
};
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim = function(receiver) {
  return $.getInterceptor$JSString(receiver).trim$0(receiver);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).$index(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.$$negate = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).$negate(receiver);
};
$.$$or = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$or(receiver, a0);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArrayJSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumberJSString = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}
//@ sourceMappingURL=BenchmarkRunner.dart.js.map
