
[
  {
    "kind": "library",
    "name": "box2d",
    "children": [
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DefaultWorldPool",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DefaultWorldPool",
            "id": "DefaultWorldPool0()"
          },
          {
            "returnType": {
              "name": "Queue",
              "refId": "Queue",
              "arguments": [
                {
                  "name": "CircleContact",
                  "refId": "CircleContact"
                }
              ]
            },
            "kind": "method",
            "name": "getCircleContactStack",
            "id": "getCircleContactStack0()"
          },
          {
            "returnType": {
              "name": "Queue",
              "refId": "Queue",
              "arguments": [
                {
                  "name": "PolygonAndCircleContact",
                  "refId": "PolygonAndCircleContact"
                }
              ]
            },
            "kind": "method",
            "name": "getPolyCircleContactStack",
            "id": "getPolyCircleContactStack0()"
          },
          {
            "returnType": {
              "name": "Queue",
              "refId": "Queue",
              "arguments": [
                {
                  "name": "PolygonContact",
                  "refId": "PolygonContact"
                }
              ]
            },
            "kind": "method",
            "name": "getPolyContactStack",
            "id": "getPolyContactStack0()"
          },
          {
            "ref": {
              "name": "Collision",
              "refId": "Collision"
            },
            "kind": "property",
            "name": "collision",
            "id": "collision"
          },
          {
            "ref": {
              "name": "TimeOfImpact",
              "refId": "TimeOfImpact"
            },
            "kind": "property",
            "name": "timeOfImpact",
            "id": "timeOfImpact"
          },
          {
            "ref": {
              "name": "Distance",
              "refId": "Distance"
            },
            "kind": "property",
            "name": "distance",
            "id": "distance"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DefaultWorldPool",
            "id": "DefaultWorldPool0()"
          }
        ],
        "id": "DefaultWorldPool"
      },
      {
        "superclass": {
          "name": "JointDef",
          "refId": "JointDef"
        },
        "kind": "class",
        "name": "RevoluteJointDef",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "RevoluteJointDef",
            "id": "RevoluteJointDef0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nInitialize the bodies, anchors, and reference angle using the world\nanchor.\n\n",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "b1",
                "id": "b1"
              },
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "b2",
                "id": "b2"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "anchor",
                "id": "anchor"
              }
            ],
            "id": "initialize3()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchorA",
            "id": "localAnchorA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchorB",
            "id": "localAnchorB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "referenceAngle",
            "id": "referenceAngle"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "enableLimit",
            "id": "enableLimit"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "lowerAngle",
            "id": "lowerAngle"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "upperAngle",
            "id": "upperAngle"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "enableMotor",
            "id": "enableMotor"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "motorSpeed",
            "id": "motorSpeed"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "maxMotorTorque",
            "id": "maxMotorTorque"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "RevoluteJointDef",
            "id": "RevoluteJointDef0()"
          }
        ],
        "id": "RevoluteJointDef"
      },
      {
        "superclass": {
          "name": "Joint",
          "refId": "Joint"
        },
        "kind": "class",
        "name": "RevoluteJoint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "RevoluteJoint",
            "children": [
              {
                "ref": {
                  "name": "RevoluteJointDef",
                  "refId": "RevoluteJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "RevoluteJoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "initVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "solveVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "solvePositionConstraints",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "baumgarte",
                "id": "baumgarte"
              }
            ],
            "id": "solvePositionConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getAnchorA",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorA1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getAnchorB",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorB1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getReactionForce",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getReactionForce2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getReactionTorque",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              }
            ],
            "id": "getReactionTorque1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "jointAngle",
            "id": "jointAngle0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "jointSpeed",
            "id": "jointSpeed0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "motorEnabled",
            "id": "motorEnabled0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "motorEnabled=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "motorEnabled=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "motorTorque",
            "id": "motorTorque0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "motorSpeed=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "speed",
                "id": "speed"
              }
            ],
            "id": "motorSpeed=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "motorSpeed",
            "id": "motorSpeed0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "maxMotorTorque",
            "id": "maxMotorTorque0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "maxMotorTorque=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "torque",
                "id": "torque"
              }
            ],
            "id": "maxMotorTorque=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "limitEnabled",
            "id": "limitEnabled0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "limitEnabled=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "limitEnabled=1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setLimits",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "lower",
                "id": "lower"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "upper",
                "id": "upper"
              }
            ],
            "id": "setLimits2()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "jointAngle",
            "id": "jointAngle"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "jointSpeed",
            "id": "jointSpeed"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "motorEnabled",
            "id": "motorEnabled"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "motorTorque",
            "id": "motorTorque"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "motorSpeed",
            "id": "motorSpeed"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "maxMotorTorque",
            "id": "maxMotorTorque"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "limitEnabled",
            "id": "limitEnabled"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchor1",
            "id": "localAnchor1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchor2",
            "id": "localAnchor2"
          },
          {
            "ref": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "property",
            "name": "impulse",
            "id": "impulse"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_motorImpulse",
            "id": "_motorImpulse"
          },
          {
            "ref": {
              "name": "Matrix33",
              "refId": "Matrix33"
            },
            "kind": "property",
            "name": "mass",
            "id": "mass"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "motorMass",
            "id": "motorMass"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_enableMotor",
            "id": "_enableMotor"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_maxMotorTorque",
            "id": "_maxMotorTorque"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_motorSpeed",
            "id": "_motorSpeed"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_enableLimit",
            "id": "_enableLimit"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "referenceAngle",
            "id": "referenceAngle"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "lowerAngle",
            "id": "lowerAngle"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "upperAngle",
            "id": "upperAngle"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "limitState",
            "id": "limitState"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "RevoluteJoint",
            "children": [
              {
                "ref": {
                  "name": "RevoluteJointDef",
                  "refId": "RevoluteJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "RevoluteJoint1()"
          }
        ],
        "id": "RevoluteJoint"
      },
      {
        "superclass": {
          "name": "JointDef",
          "refId": "JointDef"
        },
        "kind": "class",
        "name": "FrictionJointDef",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "FrictionJointDef",
            "id": "FrictionJointDef0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "bA",
                "id": "bA"
              },
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "bB",
                "id": "bB"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "anchor",
                "id": "anchor"
              }
            ],
            "id": "initialize3()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchorA",
            "id": "localAnchorA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchorB",
            "id": "localAnchorB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "maxForce",
            "id": "maxForce"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "maxTorque",
            "id": "maxTorque"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "FrictionJointDef",
            "id": "FrictionJointDef0()"
          }
        ],
        "id": "FrictionJointDef"
      },
      {
        "superclass": {
          "name": "Joint",
          "refId": "Joint"
        },
        "kind": "class",
        "name": "FrictionJoint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "FrictionJoint",
            "children": [
              {
                "ref": {
                  "name": "FrictionJointDef",
                  "refId": "FrictionJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "FrictionJoint1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "getLocalAnchorA",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getLocalAnchorA1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "getLocalAnchorB",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getLocalAnchorB1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getReactionForce",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getReactionForce2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getReactionTorque",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              }
            ],
            "id": "getReactionTorque1()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "maxForce=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "force",
                "id": "force"
              }
            ],
            "id": "maxForce=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "maxForce",
            "id": "maxForce0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "maxTorque=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "torque",
                "id": "torque"
              }
            ],
            "id": "maxTorque=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "maxTorque",
            "id": "maxTorque0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "initVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "solveVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "solvePositionConstraints",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "baumgarte",
                "id": "baumgarte"
              }
            ],
            "id": "solvePositionConstraints1()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "maxForce",
            "id": "maxForce"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "maxTorque",
            "id": "maxTorque"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_localAnchorA",
            "id": "_localAnchorA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_localAnchorB",
            "id": "_localAnchorB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_linearImpulse",
            "id": "_linearImpulse"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_angularImpulse",
            "id": "_angularImpulse"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_maxForce",
            "id": "_maxForce"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_maxTorque",
            "id": "_maxTorque"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "FrictionJoint",
            "children": [
              {
                "ref": {
                  "name": "FrictionJointDef",
                  "refId": "FrictionJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "FrictionJoint1()"
          }
        ],
        "id": "FrictionJoint"
      },
      {
        "superclass": {
          "name": "JointDef",
          "refId": "JointDef"
        },
        "kind": "class",
        "name": "DistanceJointDef",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DistanceJointDef",
            "id": "DistanceJointDef0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nInitialize the bodies, anchors, and length using the world\nanchors.\nb1: First body\nb2: Second body\nanchor1: World anchor on first body\nanchor2: World anchor on second body\n\n",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "b1",
                "id": "b1"
              },
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "b2",
                "id": "b2"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "anchor1",
                "id": "anchor1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "anchor2",
                "id": "anchor2"
              }
            ],
            "id": "initialize4()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchorA",
            "id": "localAnchorA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchorB",
            "id": "localAnchorB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "frequencyHz",
            "id": "frequencyHz"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "dampingRatio",
            "id": "dampingRatio"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DistanceJointDef",
            "id": "DistanceJointDef0()"
          }
        ],
        "id": "DistanceJointDef"
      },
      {
        "superclass": {
          "name": "Joint",
          "refId": "Joint"
        },
        "kind": "class",
        "name": "DistanceJoint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DistanceJoint",
            "children": [
              {
                "ref": {
                  "name": "DistanceJointDef",
                  "refId": "DistanceJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "DistanceJoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getAnchorA",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorA1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getAnchorB",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorB1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getReactionForce",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getReactionForce2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getReactionTorque",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              }
            ],
            "id": "getReactionTorque1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "initVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "solveVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "solvePositionConstraints",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "baumgarte",
                "id": "baumgarte"
              }
            ],
            "id": "solvePositionConstraints1()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchor1",
            "id": "localAnchor1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localAnchor2",
            "id": "localAnchor2"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "u",
            "id": "u"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "impulse",
            "id": "impulse"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "mass",
            "id": "mass"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "frequencyHz",
            "id": "frequencyHz"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "dampingRatio",
            "id": "dampingRatio"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "gamma",
            "id": "gamma"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "bias",
            "id": "bias"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DistanceJoint",
            "children": [
              {
                "ref": {
                  "name": "DistanceJointDef",
                  "refId": "DistanceJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "DistanceJoint1()"
          }
        ],
        "id": "DistanceJoint"
      },
      {
        "superclass": {
          "name": "JointDef",
          "refId": "JointDef"
        },
        "kind": "class",
        "name": "ConstantVolumeJointDef",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ConstantVolumeJointDef",
            "id": "ConstantVolumeJointDef0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdds a body to the group.\n\n",
            "name": "addBody",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "argBody",
                "id": "argBody"
              }
            ],
            "id": "addBody1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdds a body and the pre-made distance joint.  Should only\nbe used for deserialization.\n\n",
            "name": "addBodyAndJoint",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "argBody",
                "id": "argBody"
              },
              {
                "ref": {
                  "name": "DistanceJoint",
                  "refId": "DistanceJoint"
                },
                "kind": "param",
                "name": "argJoint",
                "id": "argJoint"
              }
            ],
            "id": "addBodyAndJoint2()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "frequencyHz",
            "id": "frequencyHz"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "dampingRatio",
            "id": "dampingRatio"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Body",
                  "refId": "Body"
                }
              ]
            },
            "kind": "property",
            "name": "bodies",
            "id": "bodies"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "DistanceJoint",
                  "refId": "DistanceJoint"
                }
              ]
            },
            "kind": "property",
            "name": "joints",
            "id": "joints"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ConstantVolumeJointDef",
            "id": "ConstantVolumeJointDef0()"
          }
        ],
        "id": "ConstantVolumeJointDef"
      },
      {
        "superclass": {
          "name": "Joint",
          "refId": "Joint"
        },
        "kind": "class",
        "name": "ConstantVolumeJoint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ConstantVolumeJoint",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "_world",
                "id": "_world"
              },
              {
                "ref": {
                  "name": "ConstantVolumeJointDef",
                  "refId": "ConstantVolumeJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "ConstantVolumeJoint2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "inflate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "factor",
                "id": "factor"
              }
            ],
            "id": "inflate1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "destructor",
            "id": "destructor0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "area",
            "id": "area0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Apply the position correction to the particles.\n",
            "name": "constrainEdges",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "argStep",
                "id": "argStep"
              }
            ],
            "id": "constrainEdges1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "argStep",
                "id": "argStep"
              }
            ],
            "id": "initVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nSolves for the impact of this joint on the positions of the connected\nbodies. Implements abstract method in [Joint].\n\n",
            "name": "solvePositionConstraints",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "baumgarte",
                "id": "baumgarte"
              }
            ],
            "id": "solvePositionConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSolves for the impact of this joint on the velocities of the connected\nbodies. Implements abstract method in [Joint].\n\n",
            "name": "solveVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "argStep",
                "id": "argStep"
              }
            ],
            "id": "solveVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getAnchorA",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorA1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getAnchorB",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorB1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getReactionForce",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getReactionForce2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getReactionTorque",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              }
            ],
            "id": "getReactionTorque1()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "area",
            "id": "area"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Body",
                  "refId": "Body"
                }
              ]
            },
            "kind": "property",
            "name": "bodies",
            "id": "bodies"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "property",
            "name": "targetLengths",
            "id": "targetLengths"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "targetVolume",
            "id": "targetVolume"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "normals",
            "id": "normals"
          },
          {
            "ref": {
              "name": "TimeStep",
              "refId": "TimeStep"
            },
            "kind": "property",
            "name": "step",
            "id": "step"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_impulse",
            "id": "_impulse"
          },
          {
            "ref": {
              "name": "World",
              "refId": "World"
            },
            "kind": "property",
            "name": "_world",
            "id": "_world"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "DistanceJoint",
                  "refId": "DistanceJoint"
                }
              ]
            },
            "kind": "property",
            "name": "distanceJoints",
            "id": "distanceJoints"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "frequencyHz",
            "id": "frequencyHz"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "dampingRatio",
            "id": "dampingRatio"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ConstantVolumeJoint",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "_world",
                "id": "_world"
              },
              {
                "ref": {
                  "name": "ConstantVolumeJointDef",
                  "refId": "ConstantVolumeJointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "ConstantVolumeJoint2()"
          }
        ],
        "id": "ConstantVolumeJoint"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "LimitState",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "INACTIVE",
            "id": "INACTIVE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "AT_LOWER",
            "id": "AT_LOWER"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "AT_UPPER",
            "id": "AT_UPPER"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "EQUAL",
            "id": "EQUAL"
          }
        ],
        "id": "LimitState"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "JointType",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "UNKNOWN",
            "id": "UNKNOWN"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "REVOLUTE",
            "id": "REVOLUTE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "PRISMATIC",
            "id": "PRISMATIC"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "DISTANCE",
            "id": "DISTANCE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "PULLEY",
            "id": "PULLEY"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MOUSE",
            "id": "MOUSE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "GEAR",
            "id": "GEAR"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "LINE",
            "id": "LINE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "WELD",
            "id": "WELD"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FRICTION",
            "id": "FRICTION"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CONSTANT_VOLUME",
            "id": "CONSTANT_VOLUME"
          }
        ],
        "id": "JointType"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "JointDef",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "JointDef",
            "id": "JointDef0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "userData",
            "id": "userData"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyA",
            "id": "bodyA"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyB",
            "id": "bodyB"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "collideConnected",
            "id": "collideConnected"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "JointDef",
            "id": "JointDef0()"
          }
        ],
        "id": "JointDef"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "JointEdge",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new joint edge with everything set to null.\n\n",
            "name": "JointEdge",
            "id": "JointEdge0()"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "other",
            "id": "other"
          },
          {
            "ref": {
              "name": "Joint",
              "refId": "Joint"
            },
            "kind": "property",
            "name": "joint",
            "id": "joint"
          },
          {
            "ref": {
              "name": "JointEdge",
              "refId": "JointEdge"
            },
            "kind": "property",
            "name": "prev",
            "id": "prev"
          },
          {
            "ref": {
              "name": "JointEdge",
              "refId": "JointEdge"
            },
            "kind": "property",
            "name": "next",
            "id": "next"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new joint edge with everything set to null.\n\n",
            "name": "JointEdge",
            "id": "JointEdge0()"
          }
        ],
        "id": "JointEdge"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Joint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Joint",
            "children": [
              {
                "ref": {
                  "name": "JointDef",
                  "refId": "JointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "Joint1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Joint.create",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "argWorld",
                "id": "argWorld"
              },
              {
                "ref": {
                  "name": "JointDef",
                  "refId": "JointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "Joint.create2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "destroy",
            "children": [
              {
                "ref": {
                  "name": "Joint",
                  "refId": "Joint"
                },
                "kind": "param",
                "name": "joint",
                "id": "joint"
              }
            ],
            "id": "destroy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Get the anchor point on bodyA in world coordinates.\n",
            "name": "getAnchorA",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorA1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Get the anchor point on bodyB in world coordinates.\n",
            "name": "getAnchorB",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getAnchorB1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Get the reaction force on body2 at the joint anchor in Newtons.\n",
            "name": "getReactionForce",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argOut",
                "id": "argOut"
              }
            ],
            "id": "getReactionForce2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "Get the reaction torque on body2 in N*m.\n",
            "name": "getReactionTorque",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "inv_dt",
                "id": "inv_dt"
              }
            ],
            "id": "getReactionTorque1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Short-cut function to determine if either body is inactive.\n",
            "name": "active",
            "id": "active0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "initVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveVelocityConstraints",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              }
            ],
            "id": "solveVelocityConstraints1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "This returns true if the position errors are within tolerance.\n",
            "name": "solvePositionConstraints",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "baumgarte",
                "id": "baumgarte"
              }
            ],
            "id": "solvePositionConstraints1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Override to handle destruction of joint.\n",
            "name": "destructor",
            "id": "destructor0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "Short-cut function to determine if either body is inactive.\n",
            "name": "active",
            "id": "active"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "Joint",
              "refId": "Joint"
            },
            "kind": "property",
            "name": "_prev",
            "id": "_prev"
          },
          {
            "ref": {
              "name": "Joint",
              "refId": "Joint"
            },
            "kind": "property",
            "name": "_next",
            "id": "_next"
          },
          {
            "ref": {
              "name": "JointEdge",
              "refId": "JointEdge"
            },
            "kind": "property",
            "name": "edgeA",
            "id": "edgeA"
          },
          {
            "ref": {
              "name": "JointEdge",
              "refId": "JointEdge"
            },
            "kind": "property",
            "name": "edgeB",
            "id": "edgeB"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyA",
            "id": "bodyA"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyB",
            "id": "bodyB"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "islandFlag",
            "id": "islandFlag"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "collideConnected",
            "id": "collideConnected"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "userData",
            "id": "userData"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localCenterA",
            "id": "localCenterA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localCenterB",
            "id": "localCenterB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "invMassA",
            "id": "invMassA"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "invIA",
            "id": "invIA"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "invMassB",
            "id": "invMassB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "invIB",
            "id": "invIB"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Joint",
            "children": [
              {
                "ref": {
                  "name": "JointDef",
                  "refId": "JointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "Joint1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Joint.create",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "argWorld",
                "id": "argWorld"
              },
              {
                "ref": {
                  "name": "JointDef",
                  "refId": "JointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "Joint.create2()"
          }
        ],
        "id": "Joint"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TimeOfImpactConstraint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TimeOfImpactConstraint",
            "id": "TimeOfImpactConstraint0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "TimeOfImpactConstraint",
                  "refId": "TimeOfImpactConstraint"
                },
                "kind": "param",
                "name": "argOther",
                "id": "argOther"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "localPoints",
            "id": "localPoints"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localNormal",
            "id": "localNormal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPoint",
            "id": "localPoint"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "radius",
            "id": "radius"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "pointCount",
            "id": "pointCount"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyA",
            "id": "bodyA"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyB",
            "id": "bodyB"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TimeOfImpactConstraint",
            "id": "TimeOfImpactConstraint0()"
          }
        ],
        "id": "TimeOfImpactConstraint"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TimeOfImpactSolverManifold",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "constructor that initiliazes everything.\n",
            "name": "TimeOfImpactSolverManifold",
            "id": "TimeOfImpactSolverManifold0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "TimeOfImpactConstraint",
                  "refId": "TimeOfImpactConstraint"
                },
                "kind": "param",
                "name": "cc",
                "id": "cc"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "initialize2()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "point",
            "id": "point"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "separation",
            "id": "separation"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointA",
            "id": "pointA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointB",
            "id": "pointB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "temp",
            "id": "temp"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "planePoint",
            "id": "planePoint"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "clipPoint",
            "id": "clipPoint"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "constructor that initiliazes everything.\n",
            "name": "TimeOfImpactSolverManifold",
            "id": "TimeOfImpactSolverManifold0()"
          }
        ],
        "id": "TimeOfImpactSolverManifold"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TimeOfImpactSolver",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TimeOfImpactSolver",
            "id": "TimeOfImpactSolver0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Contact",
                      "refId": "Contact"
                    }
                  ]
                },
                "kind": "param",
                "name": "contacts",
                "id": "contacts"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "argCount",
                "id": "argCount"
              },
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "argToiBody",
                "id": "argToiBody"
              }
            ],
            "id": "initialize3()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nPerform one solver iteration. Returns true if converged.\n\n",
            "name": "solve",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "baumgarte",
                "id": "baumgarte"
              }
            ],
            "id": "solve1()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "TimeOfImpactConstraint",
                  "refId": "TimeOfImpactConstraint"
                }
              ]
            },
            "kind": "property",
            "name": "constraints",
            "id": "constraints"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "count",
            "id": "count"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "toiBody",
            "id": "toiBody"
          },
          {
            "ref": {
              "name": "TimeOfImpactSolverManifold",
              "refId": "TimeOfImpactSolverManifold"
            },
            "kind": "property",
            "name": "psm",
            "id": "psm"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "rA",
            "id": "rA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "rB",
            "id": "rB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "P",
            "id": "P"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "temp",
            "id": "temp"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TimeOfImpactSolver",
            "id": "TimeOfImpactSolver0()"
          }
        ],
        "id": "TimeOfImpactSolver"
      },
      {
        "superclass": {
          "name": "Contact",
          "refId": "Contact"
        },
        "kind": "class",
        "name": "PolygonContact",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "PolygonContact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "PolygonContact1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "init",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fA",
                "id": "fA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fB",
                "id": "fB"
              }
            ],
            "id": "init2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "evaluate",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "argManifold",
                "id": "argManifold"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              }
            ],
            "id": "evaluate3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "PolygonContact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "PolygonContact1()"
          }
        ],
        "id": "PolygonContact"
      },
      {
        "superclass": {
          "name": "Contact",
          "refId": "Contact"
        },
        "kind": "class",
        "name": "PolygonAndCircleContact",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "PolygonAndCircleContact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "PolygonAndCircleContact1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "init",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fA",
                "id": "fA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fB",
                "id": "fB"
              }
            ],
            "id": "init2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "evaluate",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "argManifold",
                "id": "argManifold"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              }
            ],
            "id": "evaluate3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "PolygonAndCircleContact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "PolygonAndCircleContact1()"
          }
        ],
        "id": "PolygonAndCircleContact"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "PositionSolverManifold",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "PositionSolverManifold",
            "id": "PositionSolverManifold0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "ContactConstraint",
                  "refId": "ContactConstraint"
                },
                "kind": "param",
                "name": "cc",
                "id": "cc"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "initialize2()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "point",
            "id": "point"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "separation",
            "id": "separation"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointA",
            "id": "pointA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointB",
            "id": "pointB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "temp",
            "id": "temp"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "planePoint",
            "id": "planePoint"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "clipPoint",
            "id": "clipPoint"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "PositionSolverManifold",
            "id": "PositionSolverManifold0()"
          }
        ],
        "id": "PositionSolverManifold"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactSolver",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Constructs a new ContactSolver.\n",
            "name": "ContactSolver",
            "id": "ContactSolver0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "init",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Contact",
                      "refId": "Contact"
                    }
                  ]
                },
                "kind": "param",
                "name": "contacts",
                "id": "contacts"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "contactCount",
                "id": "contactCount"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "impulseRatio",
                "id": "impulseRatio"
              }
            ],
            "id": "init3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "warmStart",
            "id": "warmStart0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveVelocityConstraints",
            "id": "solveVelocityConstraints0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "storeImpulses",
            "id": "storeImpulses0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nSequential solver.\n\n",
            "name": "solvePositionConstraints",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "baumgarte",
                "id": "baumgarte"
              }
            ],
            "id": "solvePositionConstraints1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "INITIAL_NUM_CONSTRAINTS",
            "id": "INITIAL_NUM_CONSTRAINTS"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "K_MAX_CONDITION_NUMBER",
            "id": "K_MAX_CONDITION_NUMBER"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "ContactConstraint",
                  "refId": "ContactConstraint"
                }
              ]
            },
            "kind": "property",
            "name": "constraints",
            "id": "constraints"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "constraintCount",
            "id": "constraintCount"
          },
          {
            "ref": {
              "name": "WorldManifold",
              "refId": "WorldManifold"
            },
            "kind": "property",
            "name": "worldManifold",
            "id": "worldManifold"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "tangent",
            "id": "tangent"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "temp1",
            "id": "temp1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "temp2",
            "id": "temp2"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "P",
            "id": "P"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "dv",
            "id": "dv"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "dv1",
            "id": "dv1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "dv2",
            "id": "dv2"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "x",
            "id": "x"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "d",
            "id": "d"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "P1",
            "id": "P1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "P2",
            "id": "P2"
          },
          {
            "ref": {
              "name": "PositionSolverManifold",
              "refId": "PositionSolverManifold"
            },
            "kind": "property",
            "name": "psolver",
            "id": "psolver"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "rA",
            "id": "rA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "rB",
            "id": "rB"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Constructs a new ContactSolver.\n",
            "name": "ContactSolver",
            "id": "ContactSolver0()"
          }
        ],
        "id": "ContactSolver"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactRegister",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ContactRegister",
            "id": "ContactRegister0()"
          },
          {
            "ref": {
              "name": "Queue",
              "refId": "Queue",
              "arguments": [
                {
                  "name": "Contact",
                  "refId": "Contact"
                }
              ]
            },
            "kind": "property",
            "name": "creator",
            "id": "creator"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "primary",
            "id": "primary"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ContactRegister",
            "id": "ContactRegister0()"
          }
        ],
        "id": "ContactRegister"
      },
      {
        "superclass": {
          "name": "Contact",
          "refId": "Contact"
        },
        "kind": "class",
        "name": "CircleContact",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "CircleContact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "CircleContact1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "init",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fA",
                "id": "fA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fB",
                "id": "fB"
              }
            ],
            "id": "init2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "evaluate",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "argManifold",
                "id": "argManifold"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              }
            ],
            "id": "evaluate3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "CircleContact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "CircleContact1()"
          }
        ],
        "id": "CircleContact"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactCreator",
        "children": [
          {
            "returnType": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "method",
            "name": "contactCreateFcn",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureA",
                "id": "fixtureA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureB",
                "id": "fixtureB"
              }
            ],
            "id": "contactCreateFcn3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "contactDestroyFcn",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              },
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "contact",
                "id": "contact"
              }
            ],
            "id": "contactDestroyFcn2()"
          }
        ],
        "id": "ContactCreator"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactEdge",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new ContactEdge with all fields set to null.\n\n",
            "name": "ContactEdge",
            "id": "ContactEdge0()"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "other",
            "id": "other"
          },
          {
            "ref": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "property",
            "name": "contact",
            "id": "contact"
          },
          {
            "ref": {
              "name": "ContactEdge",
              "refId": "ContactEdge"
            },
            "kind": "property",
            "name": "prev",
            "id": "prev"
          },
          {
            "ref": {
              "name": "ContactEdge",
              "refId": "ContactEdge"
            },
            "kind": "property",
            "name": "next",
            "id": "next"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new ContactEdge with all fields set to null.\n\n",
            "name": "ContactEdge",
            "id": "ContactEdge0()"
          }
        ],
        "id": "ContactEdge"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactConstraintPoint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Constructs a new ContactConstraintPoint.\n",
            "name": "ContactConstraintPoint",
            "id": "ContactConstraintPoint0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Sets this point equal to the given point.\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "ContactConstraintPoint",
                  "refId": "ContactConstraintPoint"
                },
                "kind": "param",
                "name": "cp",
                "id": "cp"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPoint",
            "id": "localPoint"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "rA",
            "id": "rA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "rB",
            "id": "rB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "normalImpulse",
            "id": "normalImpulse"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "tangentImpulse",
            "id": "tangentImpulse"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "normalMass",
            "id": "normalMass"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "tangentMass",
            "id": "tangentMass"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "velocityBias",
            "id": "velocityBias"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Constructs a new ContactConstraintPoint.\n",
            "name": "ContactConstraintPoint",
            "id": "ContactConstraintPoint0()"
          }
        ],
        "id": "ContactConstraintPoint"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactConstraint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ContactConstraint",
            "id": "ContactConstraint0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "ContactConstraint",
                  "refId": "ContactConstraint"
                },
                "kind": "param",
                "name": "cp",
                "id": "cp"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "ContactConstraintPoint",
                  "refId": "ContactConstraintPoint"
                }
              ]
            },
            "kind": "property",
            "name": "points",
            "id": "points"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localNormal",
            "id": "localNormal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPoint",
            "id": "localPoint"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "ref": {
              "name": "Matrix22",
              "refId": "Matrix22"
            },
            "kind": "property",
            "name": "normalMass",
            "id": "normalMass"
          },
          {
            "ref": {
              "name": "Matrix22",
              "refId": "Matrix22"
            },
            "kind": "property",
            "name": "K",
            "id": "K"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyA",
            "id": "bodyA"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "bodyB",
            "id": "bodyB"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "radius",
            "id": "radius"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "friction",
            "id": "friction"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "restitution",
            "id": "restitution"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "pointCount",
            "id": "pointCount"
          },
          {
            "ref": {
              "name": "Manifold",
              "refId": "Manifold"
            },
            "kind": "property",
            "name": "manifold",
            "id": "manifold"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ContactConstraint",
            "id": "ContactConstraint0()"
          }
        ],
        "id": "ContactConstraint"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Contact",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Contact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "pool",
                "id": "pool"
              }
            ],
            "id": "Contact1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nInitialization for pooling.\n\n",
            "name": "init",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixA",
                "id": "fixA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixB",
                "id": "fixB"
              }
            ],
            "id": "init2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nIntializes the given world manifold.\n\n",
            "name": "getWorldManifold",
            "children": [
              {
                "ref": {
                  "name": "WorldManifold",
                  "refId": "WorldManifold"
                },
                "kind": "param",
                "name": "worldManifold",
                "id": "worldManifold"
              }
            ],
            "id": "getWorldManifold1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nIs this contact touching\n\n",
            "name": "touching",
            "id": "touching0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nEnable/disable this contact. This can be used inside the pre-solve\ncontact listener. The contact is only disabled for the current time step\n(or sub-step in continuous collisions).\n\n",
            "name": "enabled=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "enabled=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "enabled",
            "id": "enabled0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Abstract method.\n",
            "name": "evaluate",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "argManifold",
                "id": "argManifold"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              }
            ],
            "id": "evaluate3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nFlag this contact for filtering. Filtering will occur the next time step.\n\n",
            "name": "flagForFiltering",
            "id": "flagForFiltering0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "update",
            "children": [
              {
                "ref": {
                  "name": "ContactListener",
                  "refId": "ContactListener"
                },
                "kind": "param",
                "name": "listener",
                "id": "listener"
              }
            ],
            "id": "update1()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nIs this contact touching\n\n",
            "name": "touching",
            "id": "touching"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "enabled",
            "id": "enabled"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ISLAND_FLAG",
            "id": "ISLAND_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TOUCHING_FLAG",
            "id": "TOUCHING_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ENABLED_FLAG",
            "id": "ENABLED_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FILTER_FLAG",
            "id": "FILTER_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BULLET_HIT_FLAG",
            "id": "BULLET_HIT_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "flags",
            "id": "flags"
          },
          {
            "ref": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "property",
            "name": "prev",
            "id": "prev"
          },
          {
            "ref": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "property",
            "name": "next",
            "id": "next"
          },
          {
            "ref": {
              "name": "ContactEdge",
              "refId": "ContactEdge"
            },
            "kind": "property",
            "name": "edge1",
            "id": "edge1"
          },
          {
            "ref": {
              "name": "ContactEdge",
              "refId": "ContactEdge"
            },
            "kind": "property",
            "name": "edge2",
            "id": "edge2"
          },
          {
            "ref": {
              "name": "Fixture",
              "refId": "Fixture"
            },
            "kind": "property",
            "name": "fixtureA",
            "id": "fixtureA"
          },
          {
            "ref": {
              "name": "Fixture",
              "refId": "Fixture"
            },
            "kind": "property",
            "name": "fixtureB",
            "id": "fixtureB"
          },
          {
            "ref": {
              "name": "Manifold",
              "refId": "Manifold"
            },
            "kind": "property",
            "name": "manifold",
            "id": "manifold"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "toiCount",
            "id": "toiCount"
          },
          {
            "ref": {
              "name": "DefaultWorldPool",
              "refId": "DefaultWorldPool"
            },
            "kind": "property",
            "name": "pool",
            "id": "pool"
          },
          {
            "ref": {
              "name": "Manifold",
              "refId": "Manifold"
            },
            "kind": "property",
            "name": "_oldManifold",
            "id": "_oldManifold"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Contact",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "pool",
                "id": "pool"
              }
            ],
            "id": "Contact1()"
          }
        ],
        "id": "Contact"
      },
      {
        "interfaces": [
          {
            "name": "TreeCallback",
            "refId": "TreeCallback"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "WorldQueryWrapper",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "WorldQueryWrapper",
            "id": "WorldQueryWrapper0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "treeCallback",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "node",
                "id": "node"
              }
            ],
            "id": "treeCallback1()"
          },
          {
            "ref": {
              "name": "BroadPhase",
              "refId": "BroadPhase"
            },
            "kind": "property",
            "name": "broadPhase",
            "id": "broadPhase"
          },
          {
            "ref": {
              "name": "QueryCallback",
              "refId": "QueryCallback"
            },
            "kind": "property",
            "name": "callback",
            "id": "callback"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "WorldQueryWrapper",
            "id": "WorldQueryWrapper0()"
          }
        ],
        "id": "WorldQueryWrapper"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "World",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a world object.\n\ngravity\n  the world gravity vector.\ndoSleep\n  improve performance by not simulating inactive bodies.\n\n",
            "name": "World",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "gravity",
                "id": "gravity"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "doSleep",
                "id": "doSleep"
              },
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "World3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_addType",
            "children": [
              {
                "ref": {
                  "name": "Queue",
                  "refId": "Queue",
                  "arguments": [
                    {
                      "name": "Contact",
                      "refId": "Contact"
                    }
                  ]
                },
                "kind": "param",
                "name": "creatorStack",
                "id": "creatorStack"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "type1",
                "id": "type1"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "type2",
                "id": "type2"
              }
            ],
            "id": "_addType3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_initializeRegisters",
            "id": "_initializeRegisters0()"
          },
          {
            "returnType": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "method",
            "name": "popContact",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureA",
                "id": "fixtureA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureB",
                "id": "fixtureB"
              }
            ],
            "id": "popContact2()"
          },
          {
            "returnType": {
              "name": "Queue",
              "refId": "Queue",
              "arguments": [
                {
                  "name": "Contact",
                  "refId": "Contact"
                }
              ]
            },
            "kind": "method",
            "comment": "Returns a newly stocked contact stack of the appropriate type.\n",
            "name": "_getFreshContactStack",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "type1",
                "id": "type1"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "type2",
                "id": "type2"
              }
            ],
            "id": "_getFreshContactStack2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "pushContact",
            "children": [
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "contact",
                "id": "contact"
              }
            ],
            "id": "pushContact1()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRegister a contact filter to provide specific control over collision.\nOtherwise the default filter is used (_defaultFilter). The listener is\nowned by you and must remain in scope.\n\n",
            "name": "contactFilter=",
            "children": [
              {
                "ref": {
                  "name": "ContactFilter",
                  "refId": "ContactFilter"
                },
                "kind": "param",
                "name": "filter",
                "id": "filter"
              }
            ],
            "id": "contactFilter=1()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRegister a contact event listener. The listener is owned by you and must\nremain in scope.\n\n",
            "name": "contactListener=",
            "children": [
              {
                "ref": {
                  "name": "ContactListener",
                  "refId": "ContactListener"
                },
                "kind": "param",
                "name": "listener",
                "id": "listener"
              }
            ],
            "id": "contactListener=1()"
          },
          {
            "returnType": {
              "name": "ContactListener",
              "refId": "ContactListener"
            },
            "kind": "method",
            "name": "contactListener",
            "id": "contactListener0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRegister a routine for debug drawing. The debug draw functions are called\ninside with World.DrawDebugData method. The debug draw object is owned\nby you and must remain in scope.\n\n",
            "name": "debugDraw=",
            "children": [
              {
                "ref": {
                  "name": "DebugDraw",
                  "refId": "DebugDraw"
                },
                "kind": "param",
                "name": "debugDraw",
                "id": "debugDraw"
              }
            ],
            "id": "debugDraw=1()"
          },
          {
            "returnType": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "method",
            "comment": "\nCreate a rigid body given a definition. No reference to the definition\nis retained.\n\n",
            "name": "createBody",
            "children": [
              {
                "ref": {
                  "name": "BodyDef",
                  "refId": "BodyDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "createBody1()"
          },
          {
            "returnType": {
              "name": "Joint",
              "refId": "Joint"
            },
            "kind": "method",
            "comment": "\nCreate a joint to constrain bodies together. No reference to the definition\nis retained. This may cause the connected bodies to cease colliding.\n\nWarning: This function is locked during callbacks.\n\n",
            "name": "createJoint",
            "children": [
              {
                "ref": {
                  "name": "JointDef",
                  "refId": "JointDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "createJoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDestroy a joint. This may cause the connected bodies to begin colliding.\n\nWarning: This function is locked during callbacks.\n\n",
            "name": "destroyJoint",
            "children": [
              {
                "ref": {
                  "name": "Joint",
                  "refId": "Joint"
                },
                "kind": "param",
                "name": "joint",
                "id": "joint"
              }
            ],
            "id": "destroyJoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDestroy a rigid body given a definition. No reference to the definition\nis retained. This function is locked during callbacks.\n\nwarning: This automatically deletes all associated shapes.\nwarning: This function is locked during callbacks.\n\n",
            "name": "destroyBody",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "body",
                "id": "body"
              }
            ],
            "id": "destroyBody1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nTake a time step. This performs collision detection, integration,\nand constraint solution.\n\nparam timeStep\n  the amount of time to simulate, this should not vary.\nparam velocityIterations\n  for the velocity constraint solver.\nparam positionIterations\n  for the position constraint solver.\n\n",
            "name": "step",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "dt",
                "id": "dt"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "velocityIterations",
                "id": "velocityIterations"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "positionIterations",
                "id": "positionIterations"
              }
            ],
            "id": "step3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCall this after you are done with time steps to clear the forces.\nYou normally call this after each call to Step, unless you are\nperforming sub-steps. By default, forces will be automatically cleared,\nso you don't need to call this function.\n\nsee setAutoClearForces\n\n",
            "name": "clearForces",
            "id": "clearForces0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCall this to draw shapes and other debug draw data.\n\n",
            "name": "drawDebugData",
            "id": "drawDebugData0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nQuery the world for all fixtures that potentially overlap the\nprovided AABB.\n\nparam callback\n  a user implemented callback class.\nparam aabb\n  the query box.\n\n",
            "name": "queryAABB",
            "children": [
              {
                "ref": {
                  "name": "QueryCallback",
                  "refId": "QueryCallback"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "aabb",
                "id": "aabb"
              }
            ],
            "id": "queryAABB2()"
          },
          {
            "returnType": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "method",
            "comment": "\nGet the world contact list. With the returned contact, use Contact.getNext\nto get the next contact in the world list. A null contact indicates the\nend of the list.\n\nreturn the head of the world contact list.\nwarning contacts are\n\n",
            "name": "contactList",
            "id": "contactList0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet the number of broad-phase proxies.\n\n",
            "name": "proxyCount",
            "id": "proxyCount0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet the number of contacts (each may have 0 or more contact points).\n\n",
            "name": "contactCount",
            "id": "contactCount0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nIs the world locked (in the middle of a time step).\n\n",
            "name": "locked",
            "id": "locked0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet flag to control automatic clearing of forces after each time step.\n\n",
            "name": "autoClearForces=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "autoClearForces=1()"
          },
          {
            "returnType": {
              "name": "Joint",
              "refId": "Joint"
            },
            "kind": "method",
            "name": "jointList",
            "id": "jointList0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "name": "jointCount",
            "id": "jointCount0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nGet the flag that controls automatic clearing of forces after each time\nstep.\n\n",
            "name": "autoClearForces",
            "id": "autoClearForces0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solve",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "timeStep",
                "id": "timeStep"
              }
            ],
            "id": "solve1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveTimeOfImpact",
            "id": "solveTimeOfImpact0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveTimeOfImpactGivenBody",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "body",
                "id": "body"
              }
            ],
            "id": "solveTimeOfImpactGivenBody1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "drawShape",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixture",
                "id": "fixture"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawShape3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draws a joint for debugging purposes.\n",
            "name": "drawJoint",
            "children": [
              {
                "ref": {
                  "name": "Joint",
                  "refId": "Joint"
                },
                "kind": "param",
                "name": "joint",
                "id": "joint"
              }
            ],
            "id": "drawJoint1()"
          },
          {
            "ref": {
              "name": "ContactListener",
              "refId": "ContactListener"
            },
            "kind": "property",
            "name": "contactListener",
            "id": "contactListener"
          },
          {
            "ref": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "property",
            "comment": "\nGet the world contact list. With the returned contact, use Contact.getNext\nto get the next contact in the world list. A null contact indicates the\nend of the list.\n\nreturn the head of the world contact list.\nwarning contacts are\n\n",
            "name": "contactList",
            "id": "contactList"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nGet the number of broad-phase proxies.\n\n",
            "name": "proxyCount",
            "id": "proxyCount"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nGet the number of contacts (each may have 0 or more contact points).\n\n",
            "name": "contactCount",
            "id": "contactCount"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nIs the world locked (in the middle of a time step).\n\n",
            "name": "locked",
            "id": "locked"
          },
          {
            "ref": {
              "name": "Joint",
              "refId": "Joint"
            },
            "kind": "property",
            "name": "jointList",
            "id": "jointList"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "jointCount",
            "id": "jointCount"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nGet the flag that controls automatic clearing of forces after each time\nstep.\n\n",
            "name": "autoClearForces",
            "id": "autoClearForces"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "WORLD_POOL_SIZE",
            "id": "WORLD_POOL_SIZE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "WORLD_POOL_CONTAINER_SIZE",
            "id": "WORLD_POOL_CONTAINER_SIZE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NEW_FIXTURE",
            "id": "NEW_FIXTURE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "LOCKED",
            "id": "LOCKED"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CLEAR_FORCES",
            "id": "CLEAR_FORCES"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_flags",
            "id": "_flags"
          },
          {
            "ref": {
              "name": "ContactManager",
              "refId": "ContactManager"
            },
            "kind": "property",
            "name": "_contactManager",
            "id": "_contactManager"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "_bodyList",
            "id": "_bodyList"
          },
          {
            "ref": {
              "name": "Joint",
              "refId": "Joint"
            },
            "kind": "property",
            "name": "_jointList",
            "id": "_jointList"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_bodyCount",
            "id": "_bodyCount"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_jointCount",
            "id": "_jointCount"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_gravity",
            "id": "_gravity"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_allowSleep",
            "id": "_allowSleep"
          },
          {
            "ref": {
              "name": "DebugDraw",
              "refId": "DebugDraw"
            },
            "kind": "property",
            "name": "_debugDraw",
            "id": "_debugDraw"
          },
          {
            "ref": {
              "name": "FixtureDestructionListener",
              "refId": "FixtureDestructionListener"
            },
            "kind": "property",
            "name": "_fixtureDestructionListener",
            "id": "_fixtureDestructionListener"
          },
          {
            "ref": {
              "name": "JointDestructionListener",
              "refId": "JointDestructionListener"
            },
            "kind": "property",
            "name": "_jointDestructionListener",
            "id": "_jointDestructionListener"
          },
          {
            "ref": {
              "name": "DefaultWorldPool",
              "refId": "DefaultWorldPool"
            },
            "kind": "property",
            "name": "_pool",
            "id": "_pool"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_inverseTimestep",
            "id": "_inverseTimestep"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_warmStarting",
            "id": "_warmStarting"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "_continuousPhysics",
            "id": "_continuousPhysics"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "ContactRegister",
                      "refId": "ContactRegister"
                    }
                  ]
                }
              ]
            },
            "kind": "property",
            "name": "_contactStacks",
            "id": "_contactStacks"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "center",
            "id": "center"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "axis",
            "id": "axis"
          },
          {
            "ref": {
              "name": "TimeStep",
              "refId": "TimeStep"
            },
            "kind": "property",
            "name": "timestep",
            "id": "timestep"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "cA",
            "id": "cA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "cB",
            "id": "cB"
          },
          {
            "ref": {
              "name": "WorldQueryWrapper",
              "refId": "WorldQueryWrapper"
            },
            "kind": "property",
            "name": "wqwrapper",
            "id": "wqwrapper"
          },
          {
            "ref": {
              "name": "TimeOfImpactInput",
              "refId": "TimeOfImpactInput"
            },
            "kind": "property",
            "name": "toiInput",
            "id": "toiInput"
          },
          {
            "ref": {
              "name": "TimeOfImpactOutput",
              "refId": "TimeOfImpactOutput"
            },
            "kind": "property",
            "name": "toiOutput",
            "id": "toiOutput"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "backup",
            "id": "backup"
          },
          {
            "ref": {
              "name": "TimeOfImpactSolver",
              "refId": "TimeOfImpactSolver"
            },
            "kind": "property",
            "name": "toiSolver",
            "id": "toiSolver"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Contact",
                  "refId": "Contact"
                }
              ]
            },
            "kind": "property",
            "name": "contacts",
            "id": "contacts"
          },
          {
            "ref": {
              "name": "Island",
              "refId": "Island"
            },
            "kind": "property",
            "name": "island",
            "id": "island"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Body",
                  "refId": "Body"
                }
              ]
            },
            "kind": "property",
            "name": "stack",
            "id": "stack"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a world object.\n\ngravity\n  the world gravity vector.\ndoSleep\n  improve performance by not simulating inactive bodies.\n\n",
            "name": "World",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "gravity",
                "id": "gravity"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "doSleep",
                "id": "doSleep"
              },
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "World3()"
          }
        ],
        "id": "World"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TimeStep",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TimeStep",
            "id": "TimeStep0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "dt",
            "id": "dt"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "inv_dt",
            "id": "inv_dt"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "dtRatio",
            "id": "dtRatio"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "velocityIterations",
            "id": "velocityIterations"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "positionIterations",
            "id": "positionIterations"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "warmStarting",
            "id": "warmStarting"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TimeStep",
            "id": "TimeStep0()"
          }
        ],
        "id": "TimeStep"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThis is an internal structure\n\n",
        "name": "Velocity",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Velocity",
            "id": "Velocity0()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "v",
            "id": "v"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "a",
            "id": "a"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Velocity",
            "id": "Velocity0()"
          }
        ],
        "id": "Velocity"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nThis is an internal structure\n\n",
        "name": "Position",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Position",
            "id": "Position0()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "x",
            "id": "x"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "a",
            "id": "a"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Position",
            "id": "Position0()"
          }
        ],
        "id": "Position"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Island",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Island",
            "id": "Island0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "init",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "argBodyCapacity",
                "id": "argBodyCapacity"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "argContactCapacity",
                "id": "argContactCapacity"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "argJointCapacity",
                "id": "argJointCapacity"
              },
              {
                "ref": {
                  "name": "ContactListener",
                  "refId": "ContactListener"
                },
                "kind": "param",
                "name": "argListener",
                "id": "argListener"
              }
            ],
            "id": "init4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clear",
            "id": "clear0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solve",
            "children": [
              {
                "ref": {
                  "name": "TimeStep",
                  "refId": "TimeStep"
                },
                "kind": "param",
                "name": "step",
                "id": "step"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "gravity",
                "id": "gravity"
              },
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "allowSleep",
                "id": "allowSleep"
              }
            ],
            "id": "solve3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Adds a body to the Island.\n",
            "name": "addBody",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "body",
                "id": "body"
              }
            ],
            "id": "addBody1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Add a contact to the Island.\n",
            "name": "addContact",
            "children": [
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "contact",
                "id": "contact"
              }
            ],
            "id": "addContact1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Add a joint to the Island.\n",
            "name": "addJoint",
            "children": [
              {
                "ref": {
                  "name": "Joint",
                  "refId": "Joint"
                },
                "kind": "param",
                "name": "joint",
                "id": "joint"
              }
            ],
            "id": "addJoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "report",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "ContactConstraint",
                      "refId": "ContactConstraint"
                    }
                  ]
                },
                "kind": "param",
                "name": "constraints",
                "id": "constraints"
              }
            ],
            "id": "report1()"
          },
          {
            "ref": {
              "name": "ContactListener",
              "refId": "ContactListener"
            },
            "kind": "property",
            "name": "listener",
            "id": "listener"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Body",
                  "refId": "Body"
                }
              ]
            },
            "kind": "property",
            "name": "bodies",
            "id": "bodies"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Contact",
                  "refId": "Contact"
                }
              ]
            },
            "kind": "property",
            "name": "contacts",
            "id": "contacts"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Joint",
                  "refId": "Joint"
                }
              ]
            },
            "kind": "property",
            "name": "joints",
            "id": "joints"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Position",
                  "refId": "Position"
                }
              ]
            },
            "kind": "property",
            "name": "positions",
            "id": "positions"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Velocity",
                  "refId": "Velocity"
                }
              ]
            },
            "kind": "property",
            "name": "velocities",
            "id": "velocities"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "bodyCount",
            "id": "bodyCount"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "jointCount",
            "id": "jointCount"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "contactCount",
            "id": "contactCount"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "bodyCapacity",
            "id": "bodyCapacity"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "contactCapacity",
            "id": "contactCapacity"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "jointCapacity",
            "id": "jointCapacity"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "positionIterationCount",
            "id": "positionIterationCount"
          },
          {
            "ref": {
              "name": "ContactSolver",
              "refId": "ContactSolver"
            },
            "kind": "property",
            "name": "_contactSolver",
            "id": "_contactSolver"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_translation",
            "id": "_translation"
          },
          {
            "ref": {
              "name": "ContactImpulse",
              "refId": "ContactImpulse"
            },
            "kind": "property",
            "name": "impulse",
            "id": "impulse"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Island",
            "id": "Island0()"
          }
        ],
        "id": "Island"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "FixtureDef",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new FixtureDef with default values.\n\n",
            "name": "FixtureDef",
            "id": "FixtureDef0()"
          },
          {
            "ref": {
              "name": "Shape",
              "refId": "Shape"
            },
            "kind": "property",
            "name": "shape",
            "id": "shape"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "userData",
            "id": "userData"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "friction",
            "id": "friction"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "restitution",
            "id": "restitution"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "density",
            "id": "density"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isSensor",
            "id": "isSensor"
          },
          {
            "ref": {
              "name": "Filter",
              "refId": "Filter"
            },
            "kind": "property",
            "name": "filter",
            "id": "filter"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new FixtureDef with default values.\n\n",
            "name": "FixtureDef",
            "id": "FixtureDef0()"
          }
        ],
        "id": "FixtureDef"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Fixture",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Constructs a new Fixture with default values.\n",
            "name": "Fixture",
            "id": "Fixture0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Sets this fixture according to the given body and definition.\n",
            "name": "create",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "FixtureDef",
                  "refId": "FixtureDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "create2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDestroys this fixture. Before being called, this shape's proxy must be\ndestroyed. After being called, this fixture's shape is null.\n\n",
            "name": "destroy",
            "id": "destroy0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "These support body activation/deactivation.\n",
            "name": "createProxy",
            "children": [
              {
                "ref": {
                  "name": "BroadPhase",
                  "refId": "BroadPhase"
                },
                "kind": "param",
                "name": "broadPhase",
                "id": "broadPhase"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              }
            ],
            "id": "createProxy2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Destroys this Fixture's proxy.\n",
            "name": "destroyProxy",
            "children": [
              {
                "ref": {
                  "name": "BroadPhase",
                  "refId": "BroadPhase"
                },
                "kind": "param",
                "name": "broadPhase",
                "id": "broadPhase"
              }
            ],
            "id": "destroyProxy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "synchronize",
            "children": [
              {
                "ref": {
                  "name": "BroadPhase",
                  "refId": "BroadPhase"
                },
                "kind": "param",
                "name": "broadPhase",
                "id": "broadPhase"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transformOne",
                "id": "transformOne"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transformTwo",
                "id": "transformTwo"
              }
            ],
            "id": "synchronize3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nGet the mass data for this fixture. The mass data is based on the density\nand the shape. The rotational inertia is about the shape's origin.\n\n",
            "name": "getMassData",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "massData",
                "id": "massData"
              }
            ],
            "id": "getMassData1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "Get the type of the child shape.\n",
            "name": "type",
            "id": "type0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "Get the type of the child shape.\n",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "AxisAlignedBox",
              "refId": "AxisAlignedBox"
            },
            "kind": "property",
            "name": "box",
            "id": "box"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "density",
            "id": "density"
          },
          {
            "ref": {
              "name": "Fixture",
              "refId": "Fixture"
            },
            "kind": "property",
            "name": "next",
            "id": "next"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "body",
            "id": "body"
          },
          {
            "ref": {
              "name": "Shape",
              "refId": "Shape"
            },
            "kind": "property",
            "name": "shape",
            "id": "shape"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "friction",
            "id": "friction"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "restitution",
            "id": "restitution"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "proxy",
            "id": "proxy"
          },
          {
            "ref": {
              "name": "Filter",
              "refId": "Filter"
            },
            "kind": "property",
            "name": "filter",
            "id": "filter"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isSensor",
            "id": "isSensor"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "userData",
            "id": "userData"
          },
          {
            "ref": {
              "name": "AxisAlignedBox",
              "refId": "AxisAlignedBox"
            },
            "kind": "property",
            "name": "_poolOne",
            "id": "_poolOne"
          },
          {
            "ref": {
              "name": "AxisAlignedBox",
              "refId": "AxisAlignedBox"
            },
            "kind": "property",
            "name": "_poolTwo",
            "id": "_poolTwo"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Constructs a new Fixture with default values.\n",
            "name": "Fixture",
            "id": "Fixture0()"
          }
        ],
        "id": "Fixture"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Filter",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new filter with everything set to 0.\n\n",
            "name": "Filter",
            "id": "Filter0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new Filter that is a copy of the other filter.\n\n",
            "name": "Filter.copy",
            "children": [
              {
                "ref": {
                  "name": "Filter",
                  "refId": "Filter"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Filter.copy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this filter equal to the given filter.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Filter",
                  "refId": "Filter"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "categoryBits",
            "id": "categoryBits"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "maskBits",
            "id": "maskBits"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "groupIndex",
            "id": "groupIndex"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new filter with everything set to 0.\n\n",
            "name": "Filter",
            "id": "Filter0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new Filter that is a copy of the other filter.\n\n",
            "name": "Filter.copy",
            "children": [
              {
                "ref": {
                  "name": "Filter",
                  "refId": "Filter"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Filter.copy1()"
          }
        ],
        "id": "Filter"
      },
      {
        "interfaces": [
          {
            "name": "PairCallback",
            "refId": "PairCallback"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactManager",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ContactManager",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "ContactManager1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nBroad-phase callback.\n\n",
            "name": "addPair",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureA",
                "id": "fixtureA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureB",
                "id": "fixtureB"
              }
            ],
            "id": "addPair2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "findNewContacts",
            "id": "findNewContacts0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "destroy",
            "children": [
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              }
            ],
            "id": "destroy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThis is the top level collision call for the time step. Here\nall the narrow phase collision is processed for the world\ncontact list.\n\n",
            "name": "collide",
            "id": "collide0()"
          },
          {
            "ref": {
              "name": "BroadPhase",
              "refId": "BroadPhase"
            },
            "kind": "property",
            "name": "broadPhase",
            "id": "broadPhase"
          },
          {
            "ref": {
              "name": "Contact",
              "refId": "Contact"
            },
            "kind": "property",
            "name": "contactList",
            "id": "contactList"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "contactCount",
            "id": "contactCount"
          },
          {
            "ref": {
              "name": "ContactFilter",
              "refId": "ContactFilter"
            },
            "kind": "property",
            "name": "contactFilter",
            "id": "contactFilter"
          },
          {
            "ref": {
              "name": "ContactListener",
              "refId": "ContactListener"
            },
            "kind": "property",
            "name": "contactListener",
            "id": "contactListener"
          },
          {
            "ref": {
              "name": "World",
              "refId": "World"
            },
            "kind": "property",
            "name": "pool",
            "id": "pool"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ContactManager",
            "children": [
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "ContactManager1()"
          }
        ],
        "id": "ContactManager"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "BodyType",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "BodyType",
            "id": "BodyType0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "STATIC",
            "id": "STATIC"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "KINEMATIC",
            "id": "KINEMATIC"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "DYNAMIC",
            "id": "DYNAMIC"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "BodyType",
            "id": "BodyType0()"
          }
        ],
        "id": "BodyType"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "BodyDef",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new BodyDef with default values.\n\n",
            "name": "BodyDef",
            "id": "BodyDef0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "angle",
            "id": "angle"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "userData",
            "id": "userData"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "position",
            "id": "position"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "linearVelocity",
            "id": "linearVelocity"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "angularVelocity",
            "id": "angularVelocity"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "fixedRotation",
            "id": "fixedRotation"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "isSleeping",
            "id": "isSleeping"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "bullet",
            "id": "bullet"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "allowSleep",
            "id": "allowSleep"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "linearDamping",
            "id": "linearDamping"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "angularDamping",
            "id": "angularDamping"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "awake",
            "id": "awake"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "active",
            "id": "active"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new BodyDef with default values.\n\n",
            "name": "BodyDef",
            "id": "BodyDef0()"
          }
        ],
        "id": "BodyDef"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Body",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Body",
            "children": [
              {
                "ref": {
                  "name": "BodyDef",
                  "refId": "BodyDef"
                },
                "kind": "param",
                "name": "bd",
                "id": "bd"
              },
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "world",
                "id": "world"
              }
            ],
            "id": "Body2()"
          },
          {
            "returnType": {
              "name": "Fixture",
              "refId": "Fixture"
            },
            "kind": "method",
            "comment": "\nCreates a fixture and attach it to this body. Use this function if you need\nto set some fixture parameters, like friction. Otherwise you can create the\nfixture directly from a shape.\nIf the density is non-zero, this function automatically updates the mass\nof the body.\nContacts are not created until the next time step.\n\n",
            "name": "createFixture",
            "children": [
              {
                "ref": {
                  "name": "FixtureDef",
                  "refId": "FixtureDef"
                },
                "kind": "param",
                "name": "def",
                "id": "def"
              }
            ],
            "id": "createFixture1()"
          },
          {
            "returnType": {
              "name": "Fixture",
              "refId": "Fixture"
            },
            "kind": "method",
            "comment": "\nCreates a fixture from a shape and attach it to this body.\nThis is a convenience function. Use FixtureDef if you need to set\nparameters like friction, restitution, user data, or filtering.\nIf the density is non-zero, this function automatically updates the mass\nof the body.\n\n",
            "name": "createFixtureFromShape",
            "children": [
              {
                "ref": {
                  "name": "Shape",
                  "refId": "Shape"
                },
                "kind": "param",
                "name": "shape",
                "id": "shape"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "density",
                "id": "density"
              }
            ],
            "id": "createFixtureFromShape2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDestroy a fixture. This removes the fixture from the broad-phase and\ndestroys all contacts associated with this fixture. This will\nautomatically adjust the mass of the body if the body is dynamic and the\nfixture has positive density.\nAll fixtures attached to a body are implicitly destroyed when the body is\ndestroyed.\n\n",
            "name": "destroyFixture",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixture",
                "id": "fixture"
              }
            ],
            "id": "destroyFixture1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet the position of the body's origin and rotation.\nThis breaks any contacts and wakes the other bodies.\nManipulating a body's transform may cause non-physical behavior.\n\n",
            "name": "setTransform",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argPosition",
                "id": "argPosition"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "argAngle",
                "id": "argAngle"
              }
            ],
            "id": "setTransform2()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the world body origin position. Do not modify.\n\n",
            "name": "position",
            "id": "position0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nGet the angle in radians.\n\n",
            "name": "angle",
            "id": "angle0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the world position of the center of mass. Do not modify.\n\n",
            "name": "worldCenter",
            "id": "worldCenter0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the local position of the center of mass. Do not modify.\n\n",
            "name": "localCenter",
            "id": "localCenter0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "linearVelocity",
            "id": "linearVelocity0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "linearVelocity=",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              }
            ],
            "id": "linearVelocity=1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "angularVelocity",
            "id": "angularVelocity0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "angularVelocity=",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "w",
                "id": "w"
              }
            ],
            "id": "angularVelocity=1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nApply a force at a world point. If the force is not\napplied at the center of mass, it will generate a torque and\naffect the angular velocity. This wakes up the body.\n\nforce\n  the world force vector, usually in Newtons (N).\npoint\n  the world position of the point of application.\n\n",
            "name": "applyForce",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "force",
                "id": "force"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "applyForce2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nApply a torque. This affects the angular velocity\nwithout affecting the linear velocity of the center of mass.\nThis wakes up the body.\n\ntorque\n  about the z-axis (out of the screen), usually in N-m.\n\n",
            "name": "applyTorque",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "torque",
                "id": "torque"
              }
            ],
            "id": "applyTorque1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nApply an impulse at a point. This immediately modifies the velocity.\nIt also modifies the angular velocity if the point of application\nis not at the center of mass. This wakes up the body.\n\nimpulse\n  the world impulse vector, usually in N-seconds or kg-m/s.\npoint\n  the world position of the point of application.\n\n",
            "name": "applyLinearImpulse",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "impulse",
                "id": "impulse"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "applyLinearImpulse2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nApply an angular impulse.\n\nimpulse\n  the angular impulse in units of kg*m*m/s\n\n",
            "name": "applyAngularImpulse",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "impulse",
                "id": "impulse"
              }
            ],
            "id": "applyAngularImpulse1()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nGet the central rotational inertia of the body.\n\nreturns the rotational inertia, usually in kg-m^2.\n\n",
            "name": "inertia",
            "id": "inertia0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nGet the mass data of the body. The rotational inertia is relative\nto the center of mass. Result is returned through the given out parameter\ndata.\n\n",
            "name": "getMassData",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "data",
                "id": "data"
              }
            ],
            "id": "getMassData1()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet the mass properties to override the mass properties of the fixtures.\nNote that this changes the center of mass position.\nNote that creating or destroying fixtures can also alter the mass.\nThis function has no effect if the body isn't dynamic.\n\ndata\n  the mass properties.\n\n",
            "name": "massData=",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "data",
                "id": "data"
              }
            ],
            "id": "massData=1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThis resets the mass properties to the sum of the mass properties of the\nfixtures.\nThis normally does not need to be called unless you called setMassData to\noverride the mass and you later want to reset the mass.\n\n",
            "name": "resetMassData",
            "id": "resetMassData0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the world coordinates of a point given the local coordinates.\n\nlocalPoint\n  a point on the body measured relative the the body's origin.\nreturns the same point expressed in world coordinates.\n\n",
            "name": "getWorldPoint",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "localPoint",
                "id": "localPoint"
              }
            ],
            "id": "getWorldPoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nGet the world coordinates of a point given the local coordinates to the\ngiven out parameter.\n\n",
            "name": "getWorldPointToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "localPoint",
                "id": "localPoint"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getWorldPointToOut2()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the world coordinates of a vector given the local coordinates.\n\nlocalVector: a vector fixed in the body.\nreturn the same vector expressed in world coordinates.\n\n",
            "name": "getWorldVector",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "localVector",
                "id": "localVector"
              }
            ],
            "id": "getWorldVector1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nGet the world coordinates of a vector given the local coordinates to the\ngiven out paramater.\n\n",
            "name": "getWorldVectorToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "localVector",
                "id": "localVector"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getWorldVectorToOut2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nGets a local point relative to the body's origin given a world point.\nReturns this through the given out parameter.\n\n",
            "name": "getLocalPointToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "worldPoint",
                "id": "worldPoint"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getLocalPointToOut2()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGets a local point relative to the body's origin given a world point.\n\nworldPoint: point in world coordinates.\nreturns the corresponding local point relative to the body's origin.\n\n",
            "name": "getLocalPoint",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "worldPoint",
                "id": "worldPoint"
              }
            ],
            "id": "getLocalPoint1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGets a local vector given a world vector.\n\nworldVector: vector in world coordinates.\nreturns the corresponding local vector.\n\n",
            "name": "getLocalVector",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "worldVector",
                "id": "worldVector"
              }
            ],
            "id": "getLocalVector1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nGets a local vector given a world vector and stores the result in the given\nout parameter.\n\n",
            "name": "getLocalVectorToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "worldVector",
                "id": "worldVector"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getLocalVectorToOut2()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the world linear velocity of a world point attached to this body.\n\nworldPoint: point in world coordinates.\nreturns the world velocity of a point.\n\n",
            "name": "getLinearVelocityFromWorldPoint",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "worldPoint",
                "id": "worldPoint"
              }
            ],
            "id": "getLinearVelocityFromWorldPoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getLinearVelocityFromWorldPointToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "worldPoint",
                "id": "worldPoint"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getLinearVelocityFromWorldPointToOut2()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the world velocity of a local point.\n\nlocalPoint: point in local coordinates.\nreturns the world velocity of a point.\n\n",
            "name": "getLinearVelocityFromLocalPoint",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "localPoint",
                "id": "localPoint"
              }
            ],
            "id": "getLinearVelocityFromLocalPoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nGet the world velocity of a local point and store the result in the given\nout parameter.\n\n",
            "name": "getLinearVelocityFromLocalPointToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "localPoint",
                "id": "localPoint"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getLinearVelocityFromLocalPointToOut2()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nThe type of this body. Either dynamic, static, or kinematic.\n\n",
            "name": "type",
            "id": "type0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThe type of this body. This may alter the mass and velocity.\n\n",
            "name": "type=",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "otherType",
                "id": "otherType"
              }
            ],
            "id": "type=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Is this body treated like a bullet for continuous collision detection?\n",
            "name": "bullet",
            "id": "bullet0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nShould this body be treated like a bullet for continuous collision\ndetection?\n\n",
            "name": "bullet=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "bullet=1()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nYou can disable sleeping on this body. If you disable sleeping, the\nbody will be woken.\n\n",
            "name": "sleepingAllowed=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "sleepingAllowed=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nIs this body allowed to sleep?\n\n",
            "name": "sleepingAllowed",
            "id": "sleepingAllowed0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThe sleep state of the body. A sleeping body has very\nlow CPU cost.\n\n",
            "name": "awake=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "awake=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "awake",
            "id": "awake0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet the active state of the body. An inactive body is not\nsimulated and cannot be collided with or woken up.\nIf you pass a flag of true, all fixtures will be added to the\nbroad-phase.\nIf you pass a flag of false, all fixtures will be removed from\nthe broad-phase and all contacts will be destroyed.\nFixtures and joints are otherwise unaffected. You may continue\nto create/destroy fixtures and joints on inactive bodies.\nFixtures on an inactive body are implicitly inactive and will\nnot participate in collisions, ray-casts, or queries.\nJoints connected to an inactive body are implicitly inactive.\nAn inactive body is still owned by a World object and remains\nin the body list.\n\n",
            "name": "active=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "active=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nGet the active state of the body.\n\n",
            "name": "active",
            "id": "active0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet this body to have fixed rotation. This causes the mass\nto be reset.\n\n",
            "name": "fixedRotation=",
            "children": [
              {
                "ref": {
                  "name": "bool",
                  "refId": "bool"
                },
                "kind": "param",
                "name": "flag",
                "id": "flag"
              }
            ],
            "id": "fixedRotation=1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nDoes this body have fixed rotation?\n\n",
            "name": "fixedRotation",
            "id": "fixedRotation0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "synchronizeFixtures",
            "id": "synchronizeFixtures0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "synchronizeTransform",
            "id": "synchronizeTransform0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nThis is used to prevent connected bodies from colliding.\nIt may lie, depending on the collideConnected flag.\n\n",
            "name": "shouldCollide",
            "children": [
              {
                "ref": {
                  "name": "Body",
                  "refId": "Body"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "shouldCollide1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "advance",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "advance1()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "comment": "\nGet the world body origin position. Do not modify.\n\n",
            "name": "position",
            "id": "position"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nGet the angle in radians.\n\n",
            "name": "angle",
            "id": "angle"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "comment": "\nGet the world position of the center of mass. Do not modify.\n\n",
            "name": "worldCenter",
            "id": "worldCenter"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "comment": "\nGet the local position of the center of mass. Do not modify.\n\n",
            "name": "localCenter",
            "id": "localCenter"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "linearVelocity",
            "id": "linearVelocity"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "angularVelocity",
            "id": "angularVelocity"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nGet the central rotational inertia of the body.\n\nreturns the rotational inertia, usually in kg-m^2.\n\n",
            "name": "inertia",
            "id": "inertia"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "comment": "\nThe type of this body. Either dynamic, static, or kinematic.\n\n",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "Is this body treated like a bullet for continuous collision detection?\n",
            "name": "bullet",
            "id": "bullet"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nIs this body allowed to sleep?\n\n",
            "name": "sleepingAllowed",
            "id": "sleepingAllowed"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "awake",
            "id": "awake"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nGet the active state of the body.\n\n",
            "name": "active",
            "id": "active"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "\nDoes this body have fixed rotation?\n\n",
            "name": "fixedRotation",
            "id": "fixedRotation"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ISLAND_FLAG",
            "id": "ISLAND_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "AWAKE_FLAG",
            "id": "AWAKE_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "AUTO_SLEEP_FLAG",
            "id": "AUTO_SLEEP_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BULLET_FLAG",
            "id": "BULLET_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FIXED_ROTATION_FLAG",
            "id": "FIXED_ROTATION_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ACTIVE_FLAG",
            "id": "ACTIVE_FLAG"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TO_I_FLAG",
            "id": "TO_I_FLAG"
          },
          {
            "ref": {
              "name": "World",
              "refId": "World"
            },
            "kind": "property",
            "name": "world",
            "id": "world"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "flags",
            "id": "flags"
          },
          {
            "ref": {
              "name": "ContactEdge",
              "refId": "ContactEdge"
            },
            "kind": "property",
            "name": "contactList",
            "id": "contactList"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "sleepTime",
            "id": "sleepTime"
          },
          {
            "ref": {
              "name": "Object",
              "refId": "Object"
            },
            "kind": "property",
            "name": "userData",
            "id": "userData"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_linearVelocity",
            "id": "_linearVelocity"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_angularVelocity",
            "id": "_angularVelocity"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "mass",
            "id": "mass"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "invMass",
            "id": "invMass"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "next",
            "id": "next"
          },
          {
            "ref": {
              "name": "Body",
              "refId": "Body"
            },
            "kind": "property",
            "name": "prev",
            "id": "prev"
          },
          {
            "ref": {
              "name": "Fixture",
              "refId": "Fixture"
            },
            "kind": "property",
            "name": "fixtureList",
            "id": "fixtureList"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "fixtureCount",
            "id": "fixtureCount"
          },
          {
            "ref": {
              "name": "JointEdge",
              "refId": "JointEdge"
            },
            "kind": "property",
            "name": "jointList",
            "id": "jointList"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_force",
            "id": "_force"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_torque",
            "id": "_torque"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "_inertia",
            "id": "_inertia"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "invInertia",
            "id": "invInertia"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "linearDamping",
            "id": "linearDamping"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "angularDamping",
            "id": "angularDamping"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_type",
            "id": "_type"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "islandIndex",
            "id": "islandIndex"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "originTransform",
            "id": "originTransform"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "sweep",
            "id": "sweep"
          },
          {
            "ref": {
              "name": "FixtureDef",
              "refId": "FixtureDef"
            },
            "kind": "property",
            "name": "_fixDef",
            "id": "_fixDef"
          },
          {
            "ref": {
              "name": "MassData",
              "refId": "MassData"
            },
            "kind": "property",
            "name": "_pmd",
            "id": "_pmd"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "_pxf",
            "id": "_pxf"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "oldCenter",
            "id": "oldCenter"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "tempCenter",
            "id": "tempCenter"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Body",
            "children": [
              {
                "ref": {
                  "name": "BodyDef",
                  "refId": "BodyDef"
                },
                "kind": "param",
                "name": "bd",
                "id": "bd"
              },
              {
                "ref": {
                  "name": "World",
                  "refId": "World"
                },
                "kind": "param",
                "name": "world",
                "id": "world"
              }
            ],
            "id": "Body2()"
          }
        ],
        "id": "Body"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Vector3",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Vector3",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "z",
                "id": "z"
              }
            ],
            "id": "Vector33()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Vector3.copy",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCopy",
                "id": "argCopy"
              }
            ],
            "id": "Vector3.copy1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "comment": "Sets this vector equal to the given vector.\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argVec",
                "id": "argVec"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "comment": "Sets the vectors coordinate values to those given.\n",
            "name": "setCoords",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "argX",
                "id": "argX"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "argY",
                "id": "argY"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "argZ",
                "id": "argZ"
              }
            ],
            "id": "setCoords3()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "addLocal",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argVec",
                "id": "argVec"
              }
            ],
            "id": "addLocal1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "add",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argVec",
                "id": "argVec"
              }
            ],
            "id": "add1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "subLocal",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argVec",
                "id": "argVec"
              }
            ],
            "id": "subLocal1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "sub",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argVec",
                "id": "argVec"
              }
            ],
            "id": "sub1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "mulLocal",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "argScalar",
                "id": "argScalar"
              }
            ],
            "id": "mulLocal1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "mul",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "argScalar",
                "id": "argScalar"
              }
            ],
            "id": "mul1()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "negateLocal",
            "id": "negateLocal0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setZero",
            "id": "setZero0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "dot",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "dot2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "cross",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "cross2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "crossToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "crossToOut3()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "x",
            "id": "x"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "y",
            "id": "y"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "z",
            "id": "z"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Vector3",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "z",
                "id": "z"
              }
            ],
            "id": "Vector33()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Vector3.copy",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCopy",
                "id": "argCopy"
              }
            ],
            "id": "Vector3.copy1()"
          }
        ],
        "id": "Vector3"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Vector",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Vector",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "Vector2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new vector with the same coordinates as the given vector.\n\n",
            "name": "Vector.copy",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Vector.copy1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if given object is a Vector with the same x and y values as\nthis vector. Returns false otherwise.\n\n",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nUpdate the current vector by adding v.\n\n",
            "name": "addLocal",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              }
            ],
            "id": "addLocal1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nSubtracts the given vector from this vector.\n\n",
            "name": "subLocal",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "subLocal1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "setCoords",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "xCoord",
                "id": "xCoord"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "yCoord",
                "id": "yCoord"
              }
            ],
            "id": "setCoords2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "Return the cross product of the twe given vectors.\n",
            "name": "crossVectors",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v1",
                "id": "v1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v2",
                "id": "v2"
              }
            ],
            "id": "crossVectors2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "Return the dot product of the two given vectors.\n",
            "name": "dot",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "one",
                "id": "one"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "two",
                "id": "two"
              }
            ],
            "id": "dot2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nHas the effect of swapping the x and y coordinates of the vector,\nmultiplying both by the given number, and then flipping the sign of the new\nx coordinate. Returns the result through the out parameter.\n\n",
            "name": "crossNumAndVectorToOut",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "crossNumAndVectorToOut3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nHas the effect of swapping the x and y coordinates of the vector,\nmultiplying both by the given number, and then flipping the sign of the new\ny coordinate. Returns the result through the out parameter.\n\n",
            "name": "crossVectorAndNumToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "crossVectorAndNumToOut3()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nSets this vector to be a copy of the given vector.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nMultiplies this vector by the given number.\n\n",
            "name": "mulLocal",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "d",
                "id": "d"
              }
            ],
            "id": "mulLocal1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "name": "setZero",
            "id": "setZero0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "length",
            "id": "length0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nTake the minimum of each coordinate from the two given vectors and store\nthe result in the given out vector.\n\n",
            "name": "minToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "minToOut3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nTake the maximum of each coordinate from the two given vectors and store\nthe result in the given out vector.\n\n",
            "name": "maxToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "maxToOut3()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturns the length of this vector, squared.\n\n",
            "name": "lengthSquared",
            "id": "lengthSquared0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet the x and y coordinates of this vector to absolute values.\n\n",
            "name": "absLocal",
            "id": "absLocal0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nNormalizes this vector and returns the length before normalization.\n\n",
            "name": "normalize",
            "id": "normalize0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturns the distance between the point defined by this vector and the given\nvector.\n\n",
            "name": "distanceBetween",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              }
            ],
            "id": "distanceBetween1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nReturns a vector that is the result of rotating the original vector by\nangle degrees counter-clockwise.\n\n",
            "name": "rotate",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angle",
                "id": "angle"
              }
            ],
            "id": "rotate1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "Flips this vector such that the +/- of each x and y are reversed.\n",
            "name": "negateLocal",
            "id": "negateLocal0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Returns if the values of coordinates within the MAX_INTEGER.\n",
            "name": "isValid",
            "id": "isValid0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "Returns a String representation of the given vector.\n",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "length",
            "id": "length"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "comment": "\nReturns the length of this vector, squared.\n\n",
            "name": "lengthSquared",
            "id": "lengthSquared"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "x",
            "id": "x"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "y",
            "id": "y"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Vector",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "y",
                "id": "y"
              }
            ],
            "id": "Vector2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new vector with the same coordinates as the given vector.\n\n",
            "name": "Vector.copy",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Vector.copy1()"
          }
        ],
        "id": "Vector"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Transform",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new transform with a vector at the origin and no rotation.\n\n",
            "name": "Transform",
            "id": "Transform0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new transform equal to the given transform.\n\n",
            "name": "Transform.copy",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Transform.copy1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this transform with the given position and rotation.\n\n",
            "name": "setFromPositionAndRotation",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argPosition",
                "id": "argPosition"
              },
              {
                "ref": {
                  "name": "Matrix22",
                  "refId": "Matrix22"
                },
                "kind": "param",
                "name": "argRotation",
                "id": "argRotation"
              }
            ],
            "id": "setFromPositionAndRotation2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this transform equal to the given transform.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nMultiply the given transform and given vector and return a new Vector with\nthe result.\n\n",
            "name": "mul",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "T",
                "id": "T"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              }
            ],
            "id": "mul2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nMultiplies the given transform and the given vector and places the result\nin the given out parameter.\n\n",
            "name": "mulToOut",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transform",
                "id": "transform"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "vector",
                "id": "vector"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "mulToOut3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "mulTransToOut",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "T",
                "id": "T"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "mulTransToOut3()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "position",
            "id": "position"
          },
          {
            "ref": {
              "name": "Matrix22",
              "refId": "Matrix22"
            },
            "kind": "property",
            "name": "rotation",
            "id": "rotation"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new transform with a vector at the origin and no rotation.\n\n",
            "name": "Transform",
            "id": "Transform0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new transform equal to the given transform.\n\n",
            "name": "Transform.copy",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Transform.copy1()"
          }
        ],
        "id": "Transform"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Sweep",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new Sweep with centers initialized to the origin and angles\nset to zero.\n\n",
            "name": "Sweep",
            "id": "Sweep0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new sweep that is a copy of the given Sweep.\n\n",
            "name": "Sweep.copy",
            "children": [
              {
                "ref": {
                  "name": "Sweep",
                  "refId": "Sweep"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Sweep.copy1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if given object is equal to this sweep. Two sweeps are equal\nif their fields are equal.\n\n",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this Sweep equal to the given Sweep.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Sweep",
                  "refId": "Sweep"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "normalize",
            "id": "normalize0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nComputes the interpolated transform at a specific time.\nTime is the normalized time in [0,1].\n\n",
            "name": "getTransform",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "alpha",
                "id": "alpha"
              }
            ],
            "id": "getTransform2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdvances the sweep forward, resulting in a new initial state.\nTime is the new initial time.\n\n",
            "name": "advance",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "time",
                "id": "time"
              }
            ],
            "id": "advance1()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localCenter",
            "id": "localCenter"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "centerZero",
            "id": "centerZero"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "center",
            "id": "center"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "angleZero",
            "id": "angleZero"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "angle",
            "id": "angle"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new Sweep with centers initialized to the origin and angles\nset to zero.\n\n",
            "name": "Sweep",
            "id": "Sweep0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new sweep that is a copy of the given Sweep.\n\n",
            "name": "Sweep.copy",
            "children": [
              {
                "ref": {
                  "name": "Sweep",
                  "refId": "Sweep"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Sweep.copy1()"
          }
        ],
        "id": "Sweep"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Settings",
        "children": [
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nFriction mixing law.\n\n",
            "name": "mixFriction",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "friction1",
                "id": "friction1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "friction2",
                "id": "friction2"
              }
            ],
            "id": "mixFriction2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nRestitution mixing law.\n\n",
            "name": "mixRestitution",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "restitution1",
                "id": "restitution1"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "restitution2",
                "id": "restitution2"
              }
            ],
            "id": "mixRestitution2()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CONTACT_STACK_INIT_SIZE",
            "id": "CONTACT_STACK_INIT_SIZE"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "EPSILON",
            "id": "EPSILON"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_TIME_OF_IMPACT_CONTACTS",
            "id": "MAX_TIME_OF_IMPACT_CONTACTS"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "LINEAR_SLEEP_TOLERANCE",
            "id": "LINEAR_SLEEP_TOLERANCE"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_LINEAR_CORRECTION",
            "id": "MAX_LINEAR_CORRECTION"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ANGULAR_SLEEP_TOLERANCE",
            "id": "ANGULAR_SLEEP_TOLERANCE"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TIME_TO_SLEEP",
            "id": "TIME_TO_SLEEP"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TREE_REBALANCE_STEPS",
            "id": "TREE_REBALANCE_STEPS"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_INTEGER",
            "id": "MAX_INTEGER"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SMALL_NUMBER",
            "id": "SMALL_NUMBER"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BIG_NUMBER",
            "id": "BIG_NUMBER"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "LINEAR_SLOP",
            "id": "LINEAR_SLOP"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "POLYGON_RADIUS",
            "id": "POLYGON_RADIUS"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "VELOCITY_THRESHOLD",
            "id": "VELOCITY_THRESHOLD"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BOUNDING_BOX_EXTENSION",
            "id": "BOUNDING_BOX_EXTENSION"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "BOUNDING_BOX_MULTIPLIER",
            "id": "BOUNDING_BOX_MULTIPLIER"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CONTACT_BAUMGARTE",
            "id": "CONTACT_BAUMGARTE"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_TRANSLATION",
            "id": "MAX_TRANSLATION"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_TRANSLATION_SQUARED",
            "id": "MAX_TRANSLATION_SQUARED"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_ROTATION",
            "id": "MAX_ROTATION"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_ROTATION_SQUARED",
            "id": "MAX_ROTATION_SQUARED"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_MANIFOLD_POINTS",
            "id": "MAX_MANIFOLD_POINTS"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ANGULAR_SLOP",
            "id": "ANGULAR_SLOP"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_ANGULAR_CORRECTION",
            "id": "MAX_ANGULAR_CORRECTION"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_POLYGON_VERTICES",
            "id": "MAX_POLYGON_VERTICES"
          }
        ],
        "id": "Settings"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Matrix33",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Matrix33",
            "id": "Matrix330()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Matrix33.setCols",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCol1",
                "id": "argCol1"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCol2",
                "id": "argCol2"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCol3",
                "id": "argCol3"
              }
            ],
            "id": "Matrix33.setCols3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setZero",
            "id": "setZero0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "name": "mul",
            "children": [
              {
                "ref": {
                  "name": "Matrix33",
                  "refId": "Matrix33"
                },
                "kind": "param",
                "name": "A",
                "id": "A"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              }
            ],
            "id": "mul2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "mulToOut",
            "children": [
              {
                "ref": {
                  "name": "Matrix33",
                  "refId": "Matrix33"
                },
                "kind": "param",
                "name": "A",
                "id": "A"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "mulToOut3()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nSolve A * x = b, where b is a column vector. This is more efficient\nthan computing the inverse in one-shot cases.\n\n",
            "name": "solve22",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "solve221()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSolve A * x = b, where b is a column vector. This is more efficient\nthan computing the inverse in one-shot cases.\n\n",
            "name": "solve22ToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "solve22ToOut2()"
          },
          {
            "returnType": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "method",
            "comment": "\nSolve A * x = b, where b is a column vector. This is more efficient\nthan computing the inverse in one-shot cases.\n\n",
            "name": "solve33",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "solve331()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSolve A * x = b, where b is a column vector. This is more efficient\nthan computing the inverse in one-shot cases.\nout: the result\n\n",
            "name": "solve33ToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "solve33ToOut2()"
          },
          {
            "ref": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "property",
            "name": "col1",
            "id": "col1"
          },
          {
            "ref": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "property",
            "name": "col2",
            "id": "col2"
          },
          {
            "ref": {
              "name": "Vector3",
              "refId": "Vector3"
            },
            "kind": "property",
            "name": "col3",
            "id": "col3"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Matrix33",
            "id": "Matrix330()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Matrix33.setCols",
            "children": [
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCol1",
                "id": "argCol1"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCol2",
                "id": "argCol2"
              },
              {
                "ref": {
                  "name": "Vector3",
                  "refId": "Vector3"
                },
                "kind": "param",
                "name": "argCol3",
                "id": "argCol3"
              }
            ],
            "id": "Matrix33.setCols3()"
          }
        ],
        "id": "Matrix33"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Matrix22",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new Matrix. Defaults to both columns being default vectors.\n\n",
            "name": "Matrix22",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "c1",
                "id": "c1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "c2",
                "id": "c2"
              }
            ],
            "id": "Matrix222()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Constructs a new Matrix22 representing an angle.\n",
            "name": "Matrix22.fromAngle",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angle",
                "id": "angle"
              }
            ],
            "id": "Matrix22.fromAngle1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Create a new Matrix equal to the given Matrix.\n",
            "name": "Matrix22.copy",
            "children": [
              {
                "ref": {
                  "name": "Matrix22",
                  "refId": "Matrix22"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Matrix22.copy1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if given object is a Matrix22 and its col1 and col2 are equal\nto the col1 and col2 of this Matrix22.\n\n",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Set as a matrix representing a rotation.\n",
            "name": "setAngle",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angle",
                "id": "angle"
              }
            ],
            "id": "setAngle1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Set as the identity matrix.\n",
            "name": "setIdentity",
            "id": "setIdentity0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this matrix's columns equal to the given vectors, respectively.\n\n",
            "name": "setFromColumns",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v1",
                "id": "v1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v2",
                "id": "v2"
              }
            ],
            "id": "setFromColumns2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nMultiply this matrix by a vector. Return the result through the given out\nparameter.\n\n",
            "name": "multiplyVectorToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v",
                "id": "v"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "multiplyVectorToOut2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Sets this matrix to be equal to the given matrix.\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Matrix22",
                  "refId": "Matrix22"
                },
                "kind": "param",
                "name": "matrix",
                "id": "matrix"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nMultiply the given vector by the transpose of the given matrix and store\nthe result in the given parameter out.\n\n",
            "name": "mulTransMatrixAndVectorToOut",
            "children": [
              {
                "ref": {
                  "name": "Matrix22",
                  "refId": "Matrix22"
                },
                "kind": "param",
                "name": "matrix",
                "id": "matrix"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "vector",
                "id": "vector"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "mulTransMatrixAndVectorToOut3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nMultiply the given vector by the given matrix and store\nthe result in the given parameter out.\n\n",
            "name": "mulMatrixAndVectorToOut",
            "children": [
              {
                "ref": {
                  "name": "Matrix22",
                  "refId": "Matrix22"
                },
                "kind": "param",
                "name": "matrix",
                "id": "matrix"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "vector",
                "id": "vector"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "mulMatrixAndVectorToOut3()"
          },
          {
            "returnType": {
              "name": "Matrix22",
              "refId": "Matrix22"
            },
            "kind": "method",
            "comment": "Inverts this Matrix.\n",
            "name": "invertLocal",
            "id": "invertLocal0()"
          },
          {
            "returnType": {
              "name": "Matrix22",
              "refId": "Matrix22"
            },
            "kind": "method",
            "comment": "Adds the given matrix to this matrix. Returns this matrix.\n",
            "name": "addLocal",
            "children": [
              {
                "ref": {
                  "name": "Matrix22",
                  "refId": "Matrix22"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "addLocal1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "solveToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "solveToOut2()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "Returns a String showing this matrix values.\n",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "col1",
            "id": "col1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "col2",
            "id": "col2"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new Matrix. Defaults to both columns being default vectors.\n\n",
            "name": "Matrix22",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "c1",
                "id": "c1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "c2",
                "id": "c2"
              }
            ],
            "id": "Matrix222()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Constructs a new Matrix22 representing an angle.\n",
            "name": "Matrix22.fromAngle",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angle",
                "id": "angle"
              }
            ],
            "id": "Matrix22.fromAngle1()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Create a new Matrix equal to the given Matrix.\n",
            "name": "Matrix22.copy",
            "children": [
              {
                "ref": {
                  "name": "Matrix22",
                  "refId": "Matrix22"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Matrix22.copy1()"
          }
        ],
        "id": "Matrix22"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "MathBox",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "MathBox",
            "id": "MathBox0()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturn the distance between the two given vectors, but squared.\n\n",
            "name": "distanceSquared",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v1",
                "id": "v1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v2",
                "id": "v2"
              }
            ],
            "id": "distanceSquared2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nReturn the distance between the two given vectors.\n\n",
            "name": "distance",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v1",
                "id": "v1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v2",
                "id": "v2"
              }
            ],
            "id": "distance2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "Returns the closest value to [a] that is in between [low] and [high]\n",
            "name": "clamp",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "low",
                "id": "low"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "high",
                "id": "high"
              }
            ],
            "id": "clamp3()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nGiven a value within the range specified by [fromMin] and [fromMax],\nreturns a value with the same relative position in the range specified\nfrom [toMin] and [toMax]. For example, given a [val] of 2 in the\n\"from range\" of 0-4, and a \"to range\" of 10-20, would return 15.\n\n",
            "name": "translateAndScale",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "val",
                "id": "val"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "fromMin",
                "id": "fromMin"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "fromMax",
                "id": "fromMax"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "toMin",
                "id": "toMin"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "toMax",
                "id": "toMax"
              }
            ],
            "id": "translateAndScale5()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "Convert from [deg] degrees to radians.\n",
            "name": "degToRad",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "deg",
                "id": "deg"
              }
            ],
            "id": "degToRad1()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "Convert from [rad] radians to degrees.\n",
            "name": "radToDeg",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "rad",
                "id": "rad"
              }
            ],
            "id": "radToDeg1()"
          },
          {
            "ref": {
              "name": "double",
              "refId": "double"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TWO_PI",
            "id": "TWO_PI"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "MathBox",
            "id": "MathBox0()"
          }
        ],
        "id": "MathBox"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "IViewportTransform",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "IViewportTransform",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              }
            ],
            "id": "IViewportTransform3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets the transform's center to the given x and y coordinates,\nand using the given scale.\n\n",
            "name": "setCamera",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              }
            ],
            "id": "setCamera3()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nThe current translation is the difference in canvas units between the\nactual center of the canvas and the currently specified center. For\nexample, if the actual canvas center is (5, 5) but the current center is\n(6, 6), the translation is (1, 1).\n\n",
            "name": "translation",
            "id": "translation0()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "translation=",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "translation",
                "id": "translation"
              }
            ],
            "id": "translation=1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nTakes the world coordinate (argWorld) puts the corresponding\nscreen coordinate in argScreen.  It should be safe to give the\nsame object as both parameters.\n\n",
            "name": "getWorldToScreen",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argWorld",
                "id": "argWorld"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argScreen",
                "id": "argScreen"
              }
            ],
            "id": "getWorldToScreen2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nTakes the screen coordinates (argScreen) and puts the\ncorresponding world coordinates in argWorld. It should be safe\nto give the same object as both parameters.\n\n",
            "name": "getScreenToWorld",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argScreen",
                "id": "argScreen"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argWorld",
                "id": "argWorld"
              }
            ],
            "id": "getScreenToWorld2()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "comment": "\nThe current translation is the difference in canvas units between the\nactual center of the canvas and the currently specified center. For\nexample, if the actual canvas center is (5, 5) but the current center is\n(6, 6), the translation is (1, 1).\n\n",
            "name": "translation",
            "id": "translation"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "yFlip",
            "id": "yFlip"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "extents",
            "id": "extents"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "scale",
            "id": "scale"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "center",
            "id": "center"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "IViewportTransform",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "e",
                "id": "e"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              }
            ],
            "id": "IViewportTransform3()"
          }
        ],
        "id": "IViewportTransform"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Color3",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Color3",
            "id": "Color30()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Color3.fromRGB",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "Color3.fromRGB3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Color3.fromRGBF",
            "children": [
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "Color3.fromRGBF3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Color3.fromColor3",
            "children": [
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "Color3.fromColor31()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFromRGB",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "setFromRGB3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFromRGBF",
            "children": [
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "setFromRGBF3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFromColor3",
            "children": [
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "setFromColor31()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "x",
            "id": "x"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "y",
            "id": "y"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "z",
            "id": "z"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Color3",
            "id": "Color30()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Color3.fromRGB",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "Color3.fromRGB3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Color3.fromRGBF",
            "children": [
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "r",
                "id": "r"
              },
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "g",
                "id": "g"
              },
              {
                "ref": {
                  "name": "double",
                  "refId": "double"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "Color3.fromRGBF3()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Color3.fromColor3",
            "children": [
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "Color3.fromColor31()"
          }
        ],
        "id": "Color3"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ShapeType",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TYPE_COUNT",
            "id": "TYPE_COUNT"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "UNKNOWN",
            "id": "UNKNOWN"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CIRCLE",
            "id": "CIRCLE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "POLYGON",
            "id": "POLYGON"
          }
        ],
        "id": "ShapeType"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Shape",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new shape of unknown type.\n\n",
            "name": "Shape",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "type",
                "id": "type"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "radius",
                "id": "radius"
              }
            ],
            "id": "Shape2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nTest a point for containment in this shape. This only works for convex\nshapes.\ntransform:  the shape world transform.\npoint: a point in world coordinates.\n\n",
            "name": "testPoint",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transform",
                "id": "transform"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "testPoint2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nComputes the associated axis aligned bounding box for a child shape\ngiven a transform. Returns through the given out paramater.\n\n",
            "name": "computeAxisAlignedBox",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "box",
                "id": "box"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transform",
                "id": "transform"
              }
            ],
            "id": "computeAxisAlignedBox2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nComputes (and returns through the given out parameter massData) the mass\nproperties of this shape using its dimensions and the\ngiven density. The inertia tensor is computed about the local origin.\n\n",
            "name": "computeMass",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "massData",
                "id": "massData"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "density",
                "id": "density"
              }
            ],
            "id": "computeMass2()"
          },
          {
            "returnType": {
              "name": "Shape",
              "refId": "Shape"
            },
            "kind": "method",
            "comment": "Returns a clone of this shape.\n",
            "name": "clone",
            "id": "clone0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "radius",
            "id": "radius"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new shape of unknown type.\n\n",
            "name": "Shape",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "isOptional": true,
                "kind": "param",
                "name": "type",
                "id": "type"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "isOptional": true,
                "kind": "param",
                "name": "radius",
                "id": "radius"
              }
            ],
            "id": "Shape2()"
          }
        ],
        "id": "Shape"
      },
      {
        "superclass": {
          "name": "Shape",
          "refId": "Shape"
        },
        "kind": "class",
        "name": "PolygonShape",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new PolygonShape.\n\n",
            "name": "PolygonShape",
            "id": "PolygonShape0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new PolygonShape equal to the given shape.\n\n",
            "name": "PolygonShape.copy",
            "children": [
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "PolygonShape.copy1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet the supporting vertex index in the given direction.\n\n",
            "name": "getSupport",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "d",
                "id": "d"
              }
            ],
            "id": "getSupport1()"
          },
          {
            "returnType": {
              "name": "Shape",
              "refId": "Shape"
            },
            "kind": "method",
            "name": "clone",
            "id": "clone0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the supporting vertex in the given direction.\n\n",
            "name": "getSupportVertex",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "d",
                "id": "d"
              }
            ],
            "id": "getSupportVertex1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCopy vertices. This assumes the vertices define a convex polygon.\nIt is assumed that the exterior is the the right of each edge.\nTODO(dominich): Consider removing [count].\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Vector",
                      "refId": "Vector"
                    }
                  ]
                },
                "kind": "param",
                "name": "otherVertices",
                "id": "otherVertices"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "setFrom2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nBuild vertices to represent an axis-aligned box.\nhx is the half-width of the body and hy is the half height.\n\n",
            "name": "setAsBox",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "hx",
                "id": "hx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "hy",
                "id": "hy"
              }
            ],
            "id": "setAsBox2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nBuild vertices to represent an oriented box. hx is the halfwidth, hy the\nhalf-height, center is the center of the box in local coordinates and angle\nis the rotation of the box in local coordinates.\n\n",
            "name": "setAsBoxWithCenterAndAngle",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "hx",
                "id": "hx"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "hy",
                "id": "hy"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "center",
                "id": "center"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "angle",
                "id": "angle"
              }
            ],
            "id": "setAsBoxWithCenterAndAngle4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSet this as a single edge.\n\n",
            "name": "setAsEdge",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v1",
                "id": "v1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "v2",
                "id": "v2"
              }
            ],
            "id": "setAsEdge2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nSee Shape.testPoint(Transform, Vector).\n\n",
            "name": "testPoint",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "p",
                "id": "p"
              }
            ],
            "id": "testPoint2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSee Shape.computeAxisAlignedBox(AABB, Transform).\n\n",
            "name": "computeAxisAlignedBox",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "argAabb",
                "id": "argAabb"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "argXf",
                "id": "argXf"
              }
            ],
            "id": "computeAxisAlignedBox2()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet a vertex by index.\n\n",
            "name": "getVertex",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "index",
                "id": "index"
              }
            ],
            "id": "getVertex1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the centroid and store the value in the given out parameter.\n\n",
            "name": "computeCentroidToOut",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Vector",
                      "refId": "Vector"
                    }
                  ]
                },
                "kind": "param",
                "name": "vs",
                "id": "vs"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "computeCentroidToOut3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSee Shape.computeMass(MassData)\n\n",
            "name": "computeMass",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "massData",
                "id": "massData"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "density",
                "id": "density"
              }
            ],
            "id": "computeMass2()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the centroid and apply the supplied transform.\n\n",
            "name": "applyTransformToCentroid",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              }
            ],
            "id": "applyTransformToCentroid1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the centroid and apply the supplied transform. Return the result\nthrough the return parameter out.\n\n",
            "name": "centroidToOut",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "centroidToOut2()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "centroid",
            "id": "centroid"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "vertices",
            "id": "vertices"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "normals",
            "id": "normals"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "vertexCount",
            "id": "vertexCount"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new PolygonShape.\n\n",
            "name": "PolygonShape",
            "id": "PolygonShape0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new PolygonShape equal to the given shape.\n\n",
            "name": "PolygonShape.copy",
            "children": [
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "PolygonShape.copy1()"
          }
        ],
        "id": "PolygonShape"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "MassData",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a blank mass data.\n\n",
            "name": "MassData",
            "id": "MassData0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCopies from the given mass data.\n\n",
            "name": "MassData.copy",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "md",
                "id": "md"
              }
            ],
            "id": "MassData.copy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this mass data equal to the given mass data.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "md",
                "id": "md"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "mass",
            "id": "mass"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "center",
            "id": "center"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "inertia",
            "id": "inertia"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a blank mass data.\n\n",
            "name": "MassData",
            "id": "MassData0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nCopies from the given mass data.\n\n",
            "name": "MassData.copy",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "md",
                "id": "md"
              }
            ],
            "id": "MassData.copy1()"
          }
        ],
        "id": "MassData"
      },
      {
        "superclass": {
          "name": "Shape",
          "refId": "Shape"
        },
        "kind": "class",
        "name": "CircleShape",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nA constructor for internal use only. Instead use Body.createShape with a\nCircleDef.\n\n",
            "name": "CircleShape",
            "id": "CircleShape0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new CircleShape equal to the given CircleShape.\n\n",
            "name": "CircleShape.copy",
            "children": [
              {
                "ref": {
                  "name": "CircleShape",
                  "refId": "CircleShape"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "CircleShape.copy1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if the point is contained in the given shape when the given\nrotation transform is applied. Implements superclass abstract method of\nthe same name.\n\n",
            "name": "testPoint",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transform",
                "id": "transform"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              }
            ],
            "id": "testPoint2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the axis aligned box for this Shape when the given transform is\napplied. Stores the result in the given box.\n\n",
            "name": "computeAxisAlignedBox",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "argBox",
                "id": "argBox"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "argTransform",
                "id": "argTransform"
              }
            ],
            "id": "computeAxisAlignedBox2()"
          },
          {
            "returnType": {
              "name": "Shape",
              "refId": "Shape"
            },
            "kind": "method",
            "comment": "Returns a clone of this circle.\n",
            "name": "clone",
            "id": "clone0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nComputes the mass properties of this Circle at the given density and stores\nthe result in the given MassData object.\n\n",
            "name": "computeMass",
            "children": [
              {
                "ref": {
                  "name": "MassData",
                  "refId": "MassData"
                },
                "kind": "param",
                "name": "massData",
                "id": "massData"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "density",
                "id": "density"
              }
            ],
            "id": "computeMass2()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "position",
            "id": "position"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nA constructor for internal use only. Instead use Body.createShape with a\nCircleDef.\n\n",
            "name": "CircleShape",
            "id": "CircleShape0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new CircleShape equal to the given CircleShape.\n\n",
            "name": "CircleShape.copy",
            "children": [
              {
                "ref": {
                  "name": "CircleShape",
                  "refId": "CircleShape"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "CircleShape.copy1()"
          }
        ],
        "id": "CircleShape"
      },
      {
        "interfaces": [
          {
            "name": "Comparable",
            "refId": "Comparable"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Pair",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new pair.\n\n",
            "name": "Pair",
            "id": "Pair0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nCompares this pair to the other pair. Returns a negative number if this\npair is less, 0 if the pairs are equal, and a positive number if this pair\nis greater. Compared first on which proxyA is less and, in the case of a\ntie, on which proxyB is less.\n\n",
            "name": "compareTo",
            "children": [
              {
                "ref": {
                  "name": "Pair",
                  "refId": "Pair"
                },
                "kind": "param",
                "name": "pair2",
                "id": "pair2"
              }
            ],
            "id": "compareTo1()"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "proxyA",
            "id": "proxyA"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "proxyB",
            "id": "proxyB"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new pair.\n\n",
            "name": "Pair",
            "id": "Pair0()"
          }
        ],
        "id": "Pair"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DynamicTreeNode",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "Should never be constructed outside the engine.\n",
            "name": "DynamicTreeNode._construct",
            "id": "DynamicTreeNode._construct0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Returns true if this node is a leaf.\n",
            "name": "isLeaf",
            "id": "isLeaf0()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "comment": "Returns true if this node is a leaf.\n",
            "name": "isLeaf",
            "id": "isLeaf"
          },
          {
            "ref": {
              "name": "AxisAlignedBox",
              "refId": "AxisAlignedBox"
            },
            "kind": "property",
            "name": "box",
            "id": "box"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "parent",
            "id": "parent"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "next",
            "id": "next"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "childOne",
            "id": "childOne"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "childTwo",
            "id": "childTwo"
          },
          {
            "ref": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "property",
            "name": "userData",
            "id": "userData"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "key",
            "id": "key"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "Should never be constructed outside the engine.\n",
            "name": "DynamicTreeNode._construct",
            "id": "DynamicTreeNode._construct0()"
          }
        ],
        "id": "DynamicTreeNode"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DynamicTree",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new DynamicTree.\n\n",
            "name": "DynamicTree",
            "id": "DynamicTree0()"
          },
          {
            "returnType": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "method",
            "comment": "\nCreate a proxy. Provides a tight fitting axis aligned box\nand a userData pointer.\n\n",
            "name": "createProxy",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "box",
                "id": "box"
              },
              {
                "ref": {
                  "name": "Object",
                  "refId": "Object"
                },
                "kind": "param",
                "name": "userData",
                "id": "userData"
              }
            ],
            "id": "createProxy2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Destroys the given proxy.\n",
            "name": "destroyProxy",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "toDestroy",
                "id": "toDestroy"
              }
            ],
            "id": "destroyProxy1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nMove a proxy with a swept AABB. If the proxy has moved outside of its\nfattened AABB, then the proxy is removed from the tree and re-inserted.\nOtherwise, the function returns immediately.\n\nReturns true if the given proxy was re-inserted.\n\n",
            "name": "moveProxy",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "argProxy",
                "id": "argProxy"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "argBox",
                "id": "argBox"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "displacement",
                "id": "displacement"
              }
            ],
            "id": "moveProxy3()"
          },
          {
            "returnType": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "method",
            "comment": "Allocates a new node and increases the node count.\n",
            "name": "_allocateNode",
            "id": "_allocateNode0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nQueries a bounding box for overlapping proxies. The callback class is\ncalled for each proxy that overlaps the given bounding box.\n\n",
            "name": "query",
            "children": [
              {
                "ref": {
                  "name": "TreeCallback",
                  "refId": "TreeCallback"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "argBox",
                "id": "argBox"
              }
            ],
            "id": "query2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "_query",
            "children": [
              {
                "ref": {
                  "name": "TreeCallback",
                  "refId": "TreeCallback"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "argBox",
                "id": "argBox"
              },
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "node",
                "id": "node"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "count",
                "id": "count"
              }
            ],
            "id": "_query4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Inserts a leaf into the tree.\n",
            "name": "_insertLeaf",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "node",
                "id": "node"
              }
            ],
            "id": "_insertLeaf1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Removes the given leaf from the tree.\n",
            "name": "_removeLeaf",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "argNode",
                "id": "argNode"
              }
            ],
            "id": "_removeLeaf1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "Computes the height of the overall tree.\n",
            "name": "computeHeightFromRoot",
            "id": "computeHeightFromRoot0()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "Computes the height of the given tree.\n",
            "name": "_computeHeight",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "node",
                "id": "node"
              }
            ],
            "id": "_computeHeight1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nRebalances the tree for the given number of iterations. Does a post-order\ntraversal of the tree. If given enough iterations it will hit all nodes of\nthe tree. Starts at the last reinserted leaf.\n\n",
            "name": "rebalance",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "iterations",
                "id": "iterations"
              }
            ],
            "id": "rebalance1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Returns a node to the node pool.\n",
            "name": "_freeNode",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "node",
                "id": "node"
              }
            ],
            "id": "_freeNode1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_STACK_SIZE",
            "id": "MAX_STACK_SIZE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "_DEFAULT_NODE_ADDITION",
            "id": "_DEFAULT_NODE_ADDITION"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "_root",
            "id": "_root"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_nodeCount",
            "id": "_nodeCount"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "_lastLeaf",
            "id": "_lastLeaf"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_insertionCount",
            "id": "_insertionCount"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_path",
            "id": "_path"
          },
          {
            "ref": {
              "name": "Queue",
              "refId": "Queue",
              "arguments": [
                {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                }
              ]
            },
            "kind": "property",
            "name": "_nodeStack",
            "id": "_nodeStack"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "_drawVectors",
            "id": "_drawVectors"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_nodeCounter",
            "id": "_nodeCounter"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "_tempVector",
            "id": "_tempVector"
          },
          {
            "ref": {
              "name": "AxisAlignedBox",
              "refId": "AxisAlignedBox"
            },
            "kind": "property",
            "name": "_tempBox",
            "id": "_tempBox"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "center",
            "id": "center"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "deltaOne",
            "id": "deltaOne"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "deltaTwo",
            "id": "deltaTwo"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new DynamicTree.\n\n",
            "name": "DynamicTree",
            "id": "DynamicTree0()"
          }
        ],
        "id": "DynamicTree"
      },
      {
        "interfaces": [
          {
            "name": "TreeCallback",
            "refId": "TreeCallback"
          }
        ],
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "BroadPhase",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new BroadPhase.\n\n",
            "name": "BroadPhase",
            "id": "BroadPhase0()"
          },
          {
            "returnType": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "method",
            "comment": "\nCreates a proxy with an initial bounding box. Pairs are not reported until\nupdatePairs is called.\n\n",
            "name": "createProxy",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "box",
                "id": "box"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "userData",
                "id": "userData"
              }
            ],
            "id": "createProxy2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDestroys a proxy. It is up to the client to remove any pairs.\n\n",
            "name": "destroyProxy",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "proxy",
                "id": "proxy"
              }
            ],
            "id": "destroyProxy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCall MoveProxy as many times as you like, then when you are done\ncall UpdatePairs to constize the proxy pairs (for your time step).\n\n",
            "name": "moveProxy",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "proxy",
                "id": "proxy"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "box",
                "id": "box"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "displacement",
                "id": "displacement"
              }
            ],
            "id": "moveProxy3()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if the bounding boxes of the given proxies overlap.\n\n",
            "name": "testOverlap",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "proxyA",
                "id": "proxyA"
              },
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "proxyB",
                "id": "proxyB"
              }
            ],
            "id": "testOverlap2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nAdd pairs according to whether we need to keep track of\ntheir relationship. Pairs are added by calling the addPair method on the\ngiven callback.\n\n",
            "name": "updatePairs",
            "children": [
              {
                "ref": {
                  "name": "PairCallback",
                  "refId": "PairCallback"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              }
            ],
            "id": "updatePairs1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nThe callback function to use for this tree. Is called from\nDynamicTree.query when we are gathering pairs.\n\n",
            "name": "treeCallback",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "proxy",
                "id": "proxy"
              }
            ],
            "id": "treeCallback1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nQuery an axis aligned box for overlapping proxies. The callback funciton is\ncalled for each proxy that overlaps the supplied box.\n\n",
            "name": "query",
            "children": [
              {
                "ref": {
                  "name": "TreeCallback",
                  "refId": "TreeCallback"
                },
                "kind": "param",
                "name": "callback",
                "id": "callback"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "box",
                "id": "box"
              }
            ],
            "id": "query2()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nReturns the height of embedded tree.\n\n",
            "name": "computeHeight",
            "id": "computeHeight0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_bufferMove",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "node",
                "id": "node"
              }
            ],
            "id": "_bufferMove1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_unbufferMove",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "proxy",
                "id": "proxy"
              }
            ],
            "id": "_unbufferMove1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NULL_PROXY",
            "id": "NULL_PROXY"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "PAIR_CAPACITY",
            "id": "PAIR_CAPACITY"
          },
          {
            "ref": {
              "name": "DynamicTree",
              "refId": "DynamicTree"
            },
            "kind": "property",
            "name": "_tree",
            "id": "_tree"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "proxyCount",
            "id": "proxyCount"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                }
              ]
            },
            "kind": "property",
            "name": "moveBuffer",
            "id": "moveBuffer"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Pair",
                  "refId": "Pair"
                }
              ]
            },
            "kind": "property",
            "name": "_pairBuffer",
            "id": "_pairBuffer"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_pairCapacity",
            "id": "_pairCapacity"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "_pairCount",
            "id": "_pairCount"
          },
          {
            "ref": {
              "name": "DynamicTreeNode",
              "refId": "DynamicTreeNode"
            },
            "kind": "property",
            "name": "queryProxy",
            "id": "queryProxy"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new BroadPhase.\n\n",
            "name": "BroadPhase",
            "id": "BroadPhase0()"
          }
        ],
        "id": "BroadPhase"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "WorldManifold",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new WorldManifold.\n\n",
            "name": "WorldManifold",
            "id": "WorldManifold0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "manifold",
                "id": "manifold"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radiusA",
                "id": "radiusA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radiusB",
                "id": "radiusB"
              }
            ],
            "id": "initialize5()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "points",
            "id": "points"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pool3",
            "id": "pool3"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pool4",
            "id": "pool4"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new WorldManifold.\n\n",
            "name": "WorldManifold",
            "id": "WorldManifold0()"
          }
        ],
        "id": "WorldManifold"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "SeparationType",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "POINTS",
            "id": "POINTS"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FACE_A",
            "id": "FACE_A"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FACE_B",
            "id": "FACE_B"
          }
        ],
        "id": "SeparationType"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nOutput parameters for TimeOfImpact\n\n",
        "name": "TimeOfImpactOutput",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TimeOfImpactOutput",
            "id": "TimeOfImpactOutput0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "state",
            "id": "state"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "t",
            "id": "t"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TimeOfImpactOutput",
            "id": "TimeOfImpactOutput0()"
          }
        ],
        "id": "TimeOfImpactOutput"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "Enum for TimeOfImpact output.\n",
        "name": "TimeOfImpactOutputState",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "UNKNOWN",
            "id": "UNKNOWN"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FAILED",
            "id": "FAILED"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "OVERLAPPED",
            "id": "OVERLAPPED"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "TOUCHING",
            "id": "TOUCHING"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "SEPARATED",
            "id": "SEPARATED"
          }
        ],
        "id": "TimeOfImpactOutputState"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nInput parameters for TimeOfImpact.\n\n",
        "name": "TimeOfImpactInput",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TimeOfImpactInput",
            "id": "TimeOfImpactInput0()"
          },
          {
            "ref": {
              "name": "DistanceProxy",
              "refId": "DistanceProxy"
            },
            "kind": "property",
            "name": "proxyA",
            "id": "proxyA"
          },
          {
            "ref": {
              "name": "DistanceProxy",
              "refId": "DistanceProxy"
            },
            "kind": "property",
            "name": "proxyB",
            "id": "proxyB"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "sweepA",
            "id": "sweepA"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "sweepB",
            "id": "sweepB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "tMax",
            "id": "tMax"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TimeOfImpactInput",
            "id": "TimeOfImpactInput0()"
          }
        ],
        "id": "TimeOfImpactInput"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "SeparationFunction",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SeparationFunction",
            "id": "SeparationFunction0()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "initialize",
            "children": [
              {
                "ref": {
                  "name": "SimplexCache",
                  "refId": "SimplexCache"
                },
                "kind": "param",
                "name": "cache",
                "id": "cache"
              },
              {
                "ref": {
                  "name": "DistanceProxy",
                  "refId": "DistanceProxy"
                },
                "kind": "param",
                "name": "argProxyA",
                "id": "argProxyA"
              },
              {
                "ref": {
                  "name": "Sweep",
                  "refId": "Sweep"
                },
                "kind": "param",
                "name": "argSweepA",
                "id": "argSweepA"
              },
              {
                "ref": {
                  "name": "DistanceProxy",
                  "refId": "DistanceProxy"
                },
                "kind": "param",
                "name": "argProxyB",
                "id": "argProxyB"
              },
              {
                "ref": {
                  "name": "Sweep",
                  "refId": "Sweep"
                },
                "kind": "param",
                "name": "argSweepB",
                "id": "argSweepB"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t1",
                "id": "t1"
              }
            ],
            "id": "initialize6()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "findMinSeparation",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "int",
                      "refId": "int"
                    }
                  ]
                },
                "kind": "param",
                "name": "indexes",
                "id": "indexes"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "findMinSeparation2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "evaluate",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "indexA",
                "id": "indexA"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "indexB",
                "id": "indexB"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "t",
                "id": "t"
              }
            ],
            "id": "evaluate3()"
          },
          {
            "ref": {
              "name": "DistanceProxy",
              "refId": "DistanceProxy"
            },
            "kind": "property",
            "name": "proxyA",
            "id": "proxyA"
          },
          {
            "ref": {
              "name": "DistanceProxy",
              "refId": "DistanceProxy"
            },
            "kind": "property",
            "name": "proxyB",
            "id": "proxyB"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPoint",
            "id": "localPoint"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "axis",
            "id": "axis"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "sweepA",
            "id": "sweepA"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "sweepB",
            "id": "sweepB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPointA",
            "id": "localPointA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPointB",
            "id": "localPointB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointA",
            "id": "pointA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointB",
            "id": "pointB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPointA1",
            "id": "localPointA1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPointA2",
            "id": "localPointA2"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPointB1",
            "id": "localPointB1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPointB2",
            "id": "localPointB2"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "axisA",
            "id": "axisA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "axisB",
            "id": "axisB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "temp",
            "id": "temp"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "xfa",
            "id": "xfa"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "xfb",
            "id": "xfb"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SeparationFunction",
            "id": "SeparationFunction0()"
          }
        ],
        "id": "SeparationFunction"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TimeOfImpact",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "TimeOfImpact._construct",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "TimeOfImpact._construct1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the upper bound on time before two shapes penetrate. Time is\nrepresented as a fraction between [0,tMax]. This uses a swept separating\naxis and may miss some intermediate, non-tunneling collision. If you\nchange the time interval, you should call this function again.\nNote: use Distance to compute the contact point and normal at the time\nof impact.\n\n",
            "name": "timeOfImpact",
            "children": [
              {
                "ref": {
                  "name": "TimeOfImpactOutput",
                  "refId": "TimeOfImpactOutput"
                },
                "kind": "param",
                "name": "output",
                "id": "output"
              },
              {
                "ref": {
                  "name": "TimeOfImpactInput",
                  "refId": "TimeOfImpactInput"
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "timeOfImpact2()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "MAX_ITERATIONS",
            "id": "MAX_ITERATIONS"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "toiCalls",
            "id": "toiCalls"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "toiIters",
            "id": "toiIters"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "toiMaxIters",
            "id": "toiMaxIters"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "toiRootIters",
            "id": "toiRootIters"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "toiMaxRootIters",
            "id": "toiMaxRootIters"
          },
          {
            "ref": {
              "name": "SimplexCache",
              "refId": "SimplexCache"
            },
            "kind": "property",
            "name": "cache",
            "id": "cache"
          },
          {
            "ref": {
              "name": "DistanceInput",
              "refId": "DistanceInput"
            },
            "kind": "property",
            "name": "distanceInput",
            "id": "distanceInput"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "xfA",
            "id": "xfA"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "xfB",
            "id": "xfB"
          },
          {
            "ref": {
              "name": "DistanceOutput",
              "refId": "DistanceOutput"
            },
            "kind": "property",
            "name": "distanceOutput",
            "id": "distanceOutput"
          },
          {
            "ref": {
              "name": "SeparationFunction",
              "refId": "SeparationFunction"
            },
            "kind": "property",
            "name": "fcn",
            "id": "fcn"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "property",
            "name": "indexes",
            "id": "indexes"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "sweepA",
            "id": "sweepA"
          },
          {
            "ref": {
              "name": "Sweep",
              "refId": "Sweep"
            },
            "kind": "property",
            "name": "sweepB",
            "id": "sweepB"
          },
          {
            "ref": {
              "name": "DefaultWorldPool",
              "refId": "DefaultWorldPool"
            },
            "kind": "property",
            "name": "pool",
            "id": "pool"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "TimeOfImpact._construct",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "argPool",
                "id": "argPool"
              }
            ],
            "id": "TimeOfImpact._construct1()"
          }
        ],
        "id": "TimeOfImpact"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "SimplexVertex",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "SimplexVertex",
            "id": "SimplexVertex0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "SimplexVertex",
                  "refId": "SimplexVertex"
                },
                "kind": "param",
                "name": "sv",
                "id": "sv"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "wA",
            "id": "wA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "wB",
            "id": "wB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "w",
            "id": "w"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "a",
            "id": "a"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "indexA",
            "id": "indexA"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "indexB",
            "id": "indexB"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "SimplexVertex",
            "id": "SimplexVertex0()"
          }
        ],
        "id": "SimplexVertex"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "SimplexCache",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new SimplexCache.\n\n",
            "name": "SimplexCache",
            "id": "SimplexCache0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this cache equal to the given cache.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "SimplexCache",
                  "refId": "SimplexCache"
                },
                "kind": "param",
                "name": "sc",
                "id": "sc"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "metric",
            "id": "metric"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "count",
            "id": "count"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "property",
            "name": "indexA",
            "id": "indexA"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "property",
            "name": "indexB",
            "id": "indexB"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new SimplexCache.\n\n",
            "name": "SimplexCache",
            "id": "SimplexCache0()"
          }
        ],
        "id": "SimplexCache"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Simplex",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Simplex",
            "id": "Simplex0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "readCache",
            "children": [
              {
                "ref": {
                  "name": "SimplexCache",
                  "refId": "SimplexCache"
                },
                "kind": "param",
                "name": "cache",
                "id": "cache"
              },
              {
                "ref": {
                  "name": "DistanceProxy",
                  "refId": "DistanceProxy"
                },
                "kind": "param",
                "name": "proxyA",
                "id": "proxyA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transformA",
                "id": "transformA"
              },
              {
                "ref": {
                  "name": "DistanceProxy",
                  "refId": "DistanceProxy"
                },
                "kind": "param",
                "name": "proxyB",
                "id": "proxyB"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transformB",
                "id": "transformB"
              }
            ],
            "id": "readCache5()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "writeCache",
            "children": [
              {
                "ref": {
                  "name": "SimplexCache",
                  "refId": "SimplexCache"
                },
                "kind": "param",
                "name": "cache",
                "id": "cache"
              }
            ],
            "id": "writeCache1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getSearchDirection",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getSearchDirection1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nthis returns pooled objects. don't keep or modify them\n\n",
            "name": "getClosestPoint",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "out",
                "id": "out"
              }
            ],
            "id": "getClosestPoint1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "getWitnessPoints",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "pA",
                "id": "pA"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "pB",
                "id": "pB"
              }
            ],
            "id": "getWitnessPoints2()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "name": "getMetric",
            "id": "getMetric0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSolve a line segment using barycentric coordinates.\n\n",
            "name": "solve2",
            "id": "solve20()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSolve a line segment using barycentric coordinates.<br/>\nPossible regions:<br/>\n- points[2]<br/>\n- edge points[0]-points[2]<br/>\n- edge points[1]-points[2]<br/>\n- inside the triangle\n\n",
            "name": "solve3",
            "id": "solve30()"
          },
          {
            "ref": {
              "name": "SimplexVertex",
              "refId": "SimplexVertex"
            },
            "kind": "property",
            "name": "v1",
            "id": "v1"
          },
          {
            "ref": {
              "name": "SimplexVertex",
              "refId": "SimplexVertex"
            },
            "kind": "property",
            "name": "v2",
            "id": "v2"
          },
          {
            "ref": {
              "name": "SimplexVertex",
              "refId": "SimplexVertex"
            },
            "kind": "property",
            "name": "v3",
            "id": "v3"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "SimplexVertex",
                  "refId": "SimplexVertex"
                }
              ]
            },
            "kind": "property",
            "name": "vertices",
            "id": "vertices"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "count",
            "id": "count"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "e13",
            "id": "e13"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "e23",
            "id": "e23"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "e12",
            "id": "e12"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "case2",
            "id": "case2"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "case22",
            "id": "case22"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "case3",
            "id": "case3"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "case33",
            "id": "case33"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Simplex",
            "id": "Simplex0()"
          }
        ],
        "id": "Simplex"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "PointState",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NULL_STATE",
            "id": "NULL_STATE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "ADD_STATE",
            "id": "ADD_STATE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "PERSIST_STATE",
            "id": "PERSIST_STATE"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "REMOVE_STATE",
            "id": "REMOVE_STATE"
          }
        ],
        "id": "PointState"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ManifoldType",
        "children": [
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "CIRCLES",
            "id": "CIRCLES"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FACE_A",
            "id": "FACE_A"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "FACE_B",
            "id": "FACE_B"
          }
        ],
        "id": "ManifoldType"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ManifoldPoint",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new ManifoldPoint.\n\n",
            "name": "ManifoldPoint",
            "id": "ManifoldPoint0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new ManifoldPoint that is a copy of the given point.\n\n",
            "name": "ManifoldPoint.copy",
            "children": [
              {
                "ref": {
                  "name": "ManifoldPoint",
                  "refId": "ManifoldPoint"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "ManifoldPoint.copy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this ManifoldPoint to be equal to the given point.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "ManifoldPoint",
                  "refId": "ManifoldPoint"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPoint",
            "id": "localPoint"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "normalImpulse",
            "id": "normalImpulse"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "tangentImpulse",
            "id": "tangentImpulse"
          },
          {
            "ref": {
              "name": "ContactID",
              "refId": "ContactID"
            },
            "kind": "property",
            "name": "id",
            "id": "id"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new ManifoldPoint.\n\n",
            "name": "ManifoldPoint",
            "id": "ManifoldPoint0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new ManifoldPoint that is a copy of the given point.\n\n",
            "name": "ManifoldPoint.copy",
            "children": [
              {
                "ref": {
                  "name": "ManifoldPoint",
                  "refId": "ManifoldPoint"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "ManifoldPoint.copy1()"
          }
        ],
        "id": "ManifoldPoint"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Manifold",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCreates a manifold with 0 points. It's point array should be full of\nalready instantiated ManifoldPoints.\n\n",
            "name": "Manifold",
            "id": "Manifold0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nCreates a new manifold that is a copy of the given manifold.\n\n",
            "name": "Manifold.copy",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Manifold.copy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this manifold to be a copy of the given manifold.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "ManifoldPoint",
                  "refId": "ManifoldPoint"
                }
              ]
            },
            "kind": "property",
            "name": "points",
            "id": "points"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localNormal",
            "id": "localNormal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localPoint",
            "id": "localPoint"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "type",
            "id": "type"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "pointCount",
            "id": "pointCount"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nCreates a manifold with 0 points. It's point array should be full of\nalready instantiated ManifoldPoints.\n\n",
            "name": "Manifold",
            "id": "Manifold0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nCreates a new manifold that is a copy of the given manifold.\n\n",
            "name": "Manifold.copy",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "Manifold.copy1()"
          }
        ],
        "id": "Manifold"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Features",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new features with zero values for all fields.\n\n",
            "name": "Features",
            "id": "Features0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "Features.copy",
            "children": [
              {
                "ref": {
                  "name": "Features",
                  "refId": "Features"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "Features.copy1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "Features",
                  "refId": "Features"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if this Features object is equal to the given object.\n\n",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "comment": "\nReturns a String representation of this Features.\n\n",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nSets all features to 0.\n\n",
            "name": "zero",
            "id": "zero0()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "referenceEdge",
            "id": "referenceEdge"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "incidentEdge",
            "id": "incidentEdge"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "incidentVertex",
            "id": "incidentVertex"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "flip",
            "id": "flip"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new features with zero values for all fields.\n\n",
            "name": "Features",
            "id": "Features0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "Features.copy",
            "children": [
              {
                "ref": {
                  "name": "Features",
                  "refId": "Features"
                },
                "kind": "param",
                "name": "f",
                "id": "f"
              }
            ],
            "id": "Features.copy1()"
          }
        ],
        "id": "Features"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DistanceProxy",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new DistanceProxy.\n\n",
            "name": "DistanceProxy",
            "id": "DistanceProxy0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nInitialize the proxy using the given shape. The shape\nmust remain in scope while the proxy is in use.\n\n",
            "name": "setFromShape",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "shape",
                "id": "shape"
              }
            ],
            "id": "setFromShape1()"
          },
          {
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nGet the supporting vertex index in the given direction.\n\n",
            "name": "getSupport",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "direction",
                "id": "direction"
              }
            ],
            "id": "getSupport1()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "\nGet the supporting vertex in the given direction.\n\n",
            "name": "getSupportVertex",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "direction",
                "id": "direction"
              }
            ],
            "id": "getSupportVertex1()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "Vector",
                  "refId": "Vector"
                }
              ]
            },
            "kind": "property",
            "name": "vertices",
            "id": "vertices"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "count",
            "id": "count"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "radius",
            "id": "radius"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new DistanceProxy.\n\n",
            "name": "DistanceProxy",
            "id": "DistanceProxy0()"
          }
        ],
        "id": "DistanceProxy"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DistanceOutput",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DistanceOutput",
            "id": "DistanceOutput0()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointA",
            "id": "pointA"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "pointB",
            "id": "pointB"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "distance",
            "id": "distance"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "iterations",
            "id": "iterations"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DistanceOutput",
            "id": "DistanceOutput0()"
          }
        ],
        "id": "DistanceOutput"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DistanceInput",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DistanceInput",
            "id": "DistanceInput0()"
          },
          {
            "ref": {
              "name": "DistanceProxy",
              "refId": "DistanceProxy"
            },
            "kind": "property",
            "name": "proxyA",
            "id": "proxyA"
          },
          {
            "ref": {
              "name": "DistanceProxy",
              "refId": "DistanceProxy"
            },
            "kind": "property",
            "name": "proxyB",
            "id": "proxyB"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "transformA",
            "id": "transformA"
          },
          {
            "ref": {
              "name": "Transform",
              "refId": "Transform"
            },
            "kind": "property",
            "name": "transformB",
            "id": "transformB"
          },
          {
            "ref": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "property",
            "name": "useRadii",
            "id": "useRadii"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DistanceInput",
            "id": "DistanceInput0()"
          }
        ],
        "id": "DistanceInput"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Distance",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstruct a new Distance object. For internal use only. Don't directly\ninvoke.\n\n",
            "name": "Distance._construct",
            "id": "Distance._construct0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the closest points between two shapes. Supports any combination of:\nCircleShape and PolygonShape. The simplex cache is input/output.\nOn the first call set SimplexCache.count to zero.\n\n",
            "name": "distance",
            "children": [
              {
                "ref": {
                  "name": "DistanceOutput",
                  "refId": "DistanceOutput"
                },
                "kind": "param",
                "name": "output",
                "id": "output"
              },
              {
                "ref": {
                  "name": "SimplexCache",
                  "refId": "SimplexCache"
                },
                "kind": "param",
                "name": "cache",
                "id": "cache"
              },
              {
                "ref": {
                  "name": "DistanceInput",
                  "refId": "DistanceInput"
                },
                "kind": "param",
                "name": "input",
                "id": "input"
              }
            ],
            "id": "distance3()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "calls",
            "id": "calls"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "iters",
            "id": "iters"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "maxIters",
            "id": "maxIters"
          },
          {
            "ref": {
              "name": "Simplex",
              "refId": "Simplex"
            },
            "kind": "property",
            "name": "simplex",
            "id": "simplex"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "property",
            "name": "saveA",
            "id": "saveA"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "int",
                  "refId": "int"
                }
              ]
            },
            "kind": "property",
            "name": "saveB",
            "id": "saveB"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "closestPoint",
            "id": "closestPoint"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "searchDirection",
            "id": "searchDirection"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "temp",
            "id": "temp"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstruct a new Distance object. For internal use only. Don't directly\ninvoke.\n\n",
            "name": "Distance._construct",
            "id": "Distance._construct0()"
          }
        ],
        "id": "Distance"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactID",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new ContactID.\n",
            "name": "ContactID",
            "id": "ContactID0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a ContactID that is a copy of the given ContactID.\n\n",
            "name": "ContactID.copy",
            "children": [
              {
                "ref": {
                  "name": "ContactID",
                  "refId": "ContactID"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "ContactID.copy1()"
          },
          {
            "isOperator": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if this ContactID equals the given ContactID.\n\n",
            "name": "==",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "==1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this contactID to be equal to the given ContactID.\n\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "ContactID",
                  "refId": "ContactID"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if this ContactID equals the given ContactID.\n\n",
            "name": "isEqual",
            "children": [
              {
                "ref": {
                  "name": "ContactID",
                  "refId": "ContactID"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "isEqual1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nZeroes out the data.\n\n",
            "name": "zero",
            "id": "zero0()"
          },
          {
            "ref": {
              "name": "Features",
              "refId": "Features"
            },
            "kind": "property",
            "name": "features",
            "id": "features"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new ContactID.\n",
            "name": "ContactID",
            "id": "ContactID0()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a ContactID that is a copy of the given ContactID.\n\n",
            "name": "ContactID.copy",
            "children": [
              {
                "ref": {
                  "name": "ContactID",
                  "refId": "ContactID"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "ContactID.copy1()"
          }
        ],
        "id": "ContactID"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nClass for returning edge results\n\n",
        "name": "EdgeResults",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "EdgeResults",
            "id": "EdgeResults0()"
          },
          {
            "ref": {
              "name": "num",
              "refId": "num"
            },
            "kind": "property",
            "name": "separation",
            "id": "separation"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "edgeIndex",
            "id": "edgeIndex"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "EdgeResults",
            "id": "EdgeResults0()"
          }
        ],
        "id": "EdgeResults"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "comment": "\nUsed for computing contact manifolds.\n\n",
        "name": "ClipVertex",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ClipVertex",
            "id": "ClipVertex0()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "ClipVertex",
                  "refId": "ClipVertex"
                },
                "kind": "param",
                "name": "cv",
                "id": "cv"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "v",
            "id": "v"
          },
          {
            "ref": {
              "name": "ContactID",
              "refId": "ContactID"
            },
            "kind": "property",
            "name": "id",
            "id": "id"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ClipVertex",
            "id": "ClipVertex0()"
          }
        ],
        "id": "ClipVertex"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "Collision",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new Collision object. Should only be constructed once (in the\npool). Retrieve from the pool to use.\n\n",
            "name": "Collision._construct",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "pool",
                "id": "pool"
              }
            ],
            "id": "Collision._construct1()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if the two given shapes overlap.\n\n",
            "name": "testOverlap",
            "children": [
              {
                "ref": {
                  "name": "Shape",
                  "refId": "Shape"
                },
                "kind": "param",
                "name": "shapeA",
                "id": "shapeA"
              },
              {
                "ref": {
                  "name": "Shape",
                  "refId": "Shape"
                },
                "kind": "param",
                "name": "shapeB",
                "id": "shapeB"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transformA",
                "id": "transformA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "transformB",
                "id": "transformB"
              }
            ],
            "id": "testOverlap4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the point states given two manifolds. The states pertain to the\ntransition from manifold1 to manifold2. So state1 is either persist or\nremove while state2 is either add or persist.\n\n",
            "name": "getPointStates",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "int",
                      "refId": "int"
                    }
                  ]
                },
                "kind": "param",
                "name": "state1",
                "id": "state1"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "int",
                      "refId": "int"
                    }
                  ]
                },
                "kind": "param",
                "name": "state2",
                "id": "state2"
              },
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "manifold1",
                "id": "manifold1"
              },
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "manifold2",
                "id": "manifold2"
              }
            ],
            "id": "getPointStates4()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "int",
              "refId": "int"
            },
            "kind": "method",
            "comment": "\nClipping for contact manifolds.\nSutherland-Hodgman clipping.\n\n",
            "name": "clipSegmentToLine",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "ClipVertex",
                      "refId": "ClipVertex"
                    }
                  ]
                },
                "kind": "param",
                "name": "vOut",
                "id": "vOut"
              },
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "ClipVertex",
                      "refId": "ClipVertex"
                    }
                  ]
                },
                "kind": "param",
                "name": "vIn",
                "id": "vIn"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "norm",
                "id": "norm"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "offset",
                "id": "offset"
              }
            ],
            "id": "clipSegmentToLine4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the collision manifold between two circles.\n\n\n",
            "name": "collideCircles",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "manifold",
                "id": "manifold"
              },
              {
                "ref": {
                  "name": "CircleShape",
                  "refId": "CircleShape"
                },
                "kind": "param",
                "name": "circle1",
                "id": "circle1"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "CircleShape",
                  "refId": "CircleShape"
                },
                "kind": "param",
                "name": "circle2",
                "id": "circle2"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              }
            ],
            "id": "collideCircles5()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the collision manifold between a polygon and a circle.\n\n",
            "name": "collidePolygonAndCircle",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "manifold",
                "id": "manifold"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "polygon",
                "id": "polygon"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "CircleShape",
                  "refId": "CircleShape"
                },
                "kind": "param",
                "name": "circle",
                "id": "circle"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              }
            ],
            "id": "collidePolygonAndCircle5()"
          },
          {
            "returnType": {
              "name": "num",
              "refId": "num"
            },
            "kind": "method",
            "comment": "\nFind the separation between poly1 and poly2 for a given edge normal on\npoly1.\n\n",
            "name": "edgeSeparation",
            "children": [
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "poly1",
                "id": "poly1"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf1",
                "id": "xf1"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "edge1",
                "id": "edge1"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "poly2",
                "id": "poly2"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf2",
                "id": "xf2"
              }
            ],
            "id": "edgeSeparation5()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nFind the max separation between poly1 and poly2 using edge normals from\npoly1.\n\n",
            "name": "findMaxSeparation",
            "children": [
              {
                "ref": {
                  "name": "EdgeResults",
                  "refId": "EdgeResults"
                },
                "kind": "param",
                "name": "results",
                "id": "results"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "poly1",
                "id": "poly1"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf1",
                "id": "xf1"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "poly2",
                "id": "poly2"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf2",
                "id": "xf2"
              }
            ],
            "id": "findMaxSeparation5()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "findIncidentEdge",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "ClipVertex",
                      "refId": "ClipVertex"
                    }
                  ]
                },
                "kind": "param",
                "name": "c",
                "id": "c"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "poly1",
                "id": "poly1"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf1",
                "id": "xf1"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "edge1",
                "id": "edge1"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "poly2",
                "id": "poly2"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf2",
                "id": "xf2"
              }
            ],
            "id": "findIncidentEdge6()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCompute the collision manifold between two polygons.\n\n",
            "name": "collidePolygons",
            "children": [
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "manifold",
                "id": "manifold"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "polyA",
                "id": "polyA"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfA",
                "id": "xfA"
              },
              {
                "ref": {
                  "name": "PolygonShape",
                  "refId": "PolygonShape"
                },
                "kind": "param",
                "name": "polyB",
                "id": "polyB"
              },
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xfB",
                "id": "xfB"
              }
            ],
            "id": "collidePolygons5()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "NULL_FEATURE",
            "id": "NULL_FEATURE"
          },
          {
            "ref": {
              "name": "DefaultWorldPool",
              "refId": "DefaultWorldPool"
            },
            "kind": "property",
            "name": "_pool",
            "id": "_pool"
          },
          {
            "ref": {
              "name": "SimplexCache",
              "refId": "SimplexCache"
            },
            "kind": "property",
            "name": "cache",
            "id": "cache"
          },
          {
            "ref": {
              "name": "DistanceInput",
              "refId": "DistanceInput"
            },
            "kind": "property",
            "name": "input",
            "id": "input"
          },
          {
            "ref": {
              "name": "DistanceOutput",
              "refId": "DistanceOutput"
            },
            "kind": "property",
            "name": "output",
            "id": "output"
          },
          {
            "ref": {
              "name": "EdgeResults",
              "refId": "EdgeResults"
            },
            "kind": "property",
            "name": "results1",
            "id": "results1"
          },
          {
            "ref": {
              "name": "EdgeResults",
              "refId": "EdgeResults"
            },
            "kind": "property",
            "name": "results2",
            "id": "results2"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "ClipVertex",
                  "refId": "ClipVertex"
                }
              ]
            },
            "kind": "property",
            "name": "incidentEdge",
            "id": "incidentEdge"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localTangent",
            "id": "localTangent"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "localNormal",
            "id": "localNormal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "planePoint",
            "id": "planePoint"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "tangent",
            "id": "tangent"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal",
            "id": "normal"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "normal1",
            "id": "normal1"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "v11",
            "id": "v11"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "v12",
            "id": "v12"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "ClipVertex",
                  "refId": "ClipVertex"
                }
              ]
            },
            "kind": "property",
            "name": "clipPoints1",
            "id": "clipPoints1"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "ClipVertex",
                  "refId": "ClipVertex"
                }
              ]
            },
            "kind": "property",
            "name": "clipPoints2",
            "id": "clipPoints2"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new Collision object. Should only be constructed once (in the\npool). Retrieve from the pool to use.\n\n",
            "name": "Collision._construct",
            "children": [
              {
                "ref": {
                  "name": "DefaultWorldPool",
                  "refId": "DefaultWorldPool"
                },
                "kind": "param",
                "name": "pool",
                "id": "pool"
              }
            ],
            "id": "Collision._construct1()"
          }
        ],
        "id": "Collision"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "AxisAlignedBox",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new box with the given lower and upper bounds. If no bounds\nare specified, constructs the box with both bounds at the origin.\n\n",
            "name": "AxisAlignedBox",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "lowerBound",
                "id": "lowerBound"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "upperBound",
                "id": "upperBound"
              }
            ],
            "id": "AxisAlignedBox2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets this box to be a combination of the two given boxes.\nThe combination is determined by picking and choosing the lowest x and y\nvalues from the lowerBounds to form a new lower bound and picking and\nchoosing the largest x and y values from the upperBounds to form a new\nupperBound.\n\n",
            "name": "setFromCombination",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "boxOne",
                "id": "boxOne"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "boxTwo",
                "id": "boxTwo"
              }
            ],
            "id": "setFromCombination2()"
          },
          {
            "returnType": {
              "name": "AxisAlignedBox",
              "refId": "AxisAlignedBox"
            },
            "kind": "method",
            "comment": "Sets the bounds to the given values.\n",
            "name": "setBounds",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "lower",
                "id": "lower"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "upper",
                "id": "upper"
              }
            ],
            "id": "setBounds2()"
          },
          {
            "isStatic": true,
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Returns true if the given box overlaps with this box.\n",
            "name": "testOverlap",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "a",
                "id": "a"
              },
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "b",
                "id": "b"
              }
            ],
            "id": "testOverlap2()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturns true if the lower bound is strictly less than the upper bound and\nboth bounds are themselves valid (Vector.isValid() returns true).\n\n",
            "name": "isValid",
            "id": "isValid0()"
          },
          {
            "returnType": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "method",
            "comment": "Returns the center of this box.\n",
            "name": "center",
            "id": "center0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "Returns true if this box contains the given box.\n",
            "name": "contains",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "aabb",
                "id": "aabb"
              }
            ],
            "id": "contains1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Sets this box to be a copy of the given box.\n",
            "name": "setFrom",
            "children": [
              {
                "ref": {
                  "name": "AxisAlignedBox",
                  "refId": "AxisAlignedBox"
                },
                "kind": "param",
                "name": "other",
                "id": "other"
              }
            ],
            "id": "setFrom1()"
          },
          {
            "returnType": {
              "name": "String",
              "refId": "String"
            },
            "kind": "method",
            "name": "toString",
            "id": "toString0()"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "comment": "Returns the center of this box.\n",
            "name": "center",
            "id": "center"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "lowerBound",
            "id": "lowerBound"
          },
          {
            "ref": {
              "name": "Vector",
              "refId": "Vector"
            },
            "kind": "property",
            "name": "upperBound",
            "id": "upperBound"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new box with the given lower and upper bounds. If no bounds\nare specified, constructs the box with both bounds at the origin.\n\n",
            "name": "AxisAlignedBox",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "lowerBound",
                "id": "lowerBound"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "upperBound",
                "id": "upperBound"
              }
            ],
            "id": "AxisAlignedBox2()"
          }
        ],
        "id": "AxisAlignedBox"
      },
      {
        "kind": "typedef",
        "name": "JointDestructionListener",
        "id": "JointDestructionListener"
      },
      {
        "kind": "typedef",
        "name": "FixtureDestructionListener",
        "id": "FixtureDestructionListener"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "DebugDraw",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "DebugDraw",
            "children": [
              {
                "ref": {
                  "name": "IViewportTransform",
                  "refId": "IViewportTransform"
                },
                "kind": "param",
                "name": "viewport",
                "id": "viewport"
              }
            ],
            "id": "DebugDraw1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "appendFlags",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "appendFlags1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "clearFlags",
            "children": [
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "value",
                "id": "value"
              }
            ],
            "id": "clearFlags1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a closed polygon provided in CCW order.\n",
            "name": "drawPolygon",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Vector",
                      "refId": "Vector"
                    }
                  ]
                },
                "kind": "param",
                "name": "vertices",
                "id": "vertices"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "vertexCount",
                "id": "vertexCount"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawPolygon3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draws the given point with the given radius and color.\n",
            "name": "drawPoint",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radiusOnScreen",
                "id": "radiusOnScreen"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawPoint3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a solid closed polygon provided in CCW order.\n",
            "name": "drawSolidPolygon",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Vector",
                      "refId": "Vector"
                    }
                  ]
                },
                "kind": "param",
                "name": "vertices",
                "id": "vertices"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "vertexCount",
                "id": "vertexCount"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawSolidPolygon3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a circle.\n",
            "name": "drawCircle",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "center",
                "id": "center"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius",
                "id": "radius"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "axis",
                "id": "axis"
              }
            ],
            "id": "drawCircle4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a solid circle.\n",
            "name": "drawSolidCircle",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "center",
                "id": "center"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius",
                "id": "radius"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "axis",
                "id": "axis"
              }
            ],
            "id": "drawSolidCircle4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a line segment.\n",
            "name": "drawSegment",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "p1",
                "id": "p1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "p2",
                "id": "p2"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawSegment3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a transform.  Choose your own length scale.\n",
            "name": "drawTransform",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawTransform2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a string.\n",
            "name": "drawString",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawString4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets the center of the viewport to the given x and y values and the\nviewport scale to the given scale.\n\n",
            "name": "setCamera",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "scale",
                "id": "scale"
              }
            ],
            "id": "setCamera3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nScreen coordinates are specified in argScreen. These coordinates are\nconverted to World coordinates and placed in the argWorld return vector.\n\n",
            "name": "getScreenToWorldToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argScreen",
                "id": "argScreen"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argWorld",
                "id": "argWorld"
              }
            ],
            "id": "getScreenToWorldToOut2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nWorld coordinates are specified in argWorld. These coordinates are\nconverted to screen coordinates and placed in the argScreen return vector.\n\n",
            "name": "getWorldToScreenToOut",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argWorld",
                "id": "argWorld"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "argScreen",
                "id": "argScreen"
              }
            ],
            "id": "getWorldToScreenToOut2()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "e_shapeBit",
            "id": "e_shapeBit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "e_jointBit",
            "id": "e_jointBit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "e_aabbBit",
            "id": "e_aabbBit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "e_pairBit",
            "id": "e_pairBit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "e_centerOfMassBit",
            "id": "e_centerOfMassBit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "e_dynamicTreeBit",
            "id": "e_dynamicTreeBit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "e_lineDrawingBit",
            "id": "e_lineDrawingBit"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "kind": "property",
            "name": "flags",
            "id": "flags"
          },
          {
            "ref": {
              "name": "IViewportTransform",
              "refId": "IViewportTransform"
            },
            "kind": "property",
            "name": "viewportTransform",
            "id": "viewportTransform"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "DebugDraw",
            "children": [
              {
                "ref": {
                  "name": "IViewportTransform",
                  "refId": "IViewportTransform"
                },
                "kind": "param",
                "name": "viewport",
                "id": "viewport"
              }
            ],
            "id": "DebugDraw1()"
          }
        ],
        "id": "DebugDraw"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "QueryCallback",
        "children": [
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nCalled for each fixture found in the query AABB.\nreturn false to terminate the query.\n\n",
            "name": "reportFixture",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixture",
                "id": "fixture"
              }
            ],
            "id": "reportFixture1()"
          }
        ],
        "id": "QueryCallback"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactImpulse",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ContactImpulse",
            "id": "ContactImpulse0()"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "property",
            "name": "normalImpulses",
            "id": "normalImpulses"
          },
          {
            "ref": {
              "name": "List",
              "refId": "List",
              "arguments": [
                {
                  "name": "num",
                  "refId": "num"
                }
              ]
            },
            "kind": "property",
            "name": "tangentImpulses",
            "id": "tangentImpulses"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ContactImpulse",
            "id": "ContactImpulse0()"
          }
        ],
        "id": "ContactImpulse"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactFilter",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "ContactFilter",
            "id": "ContactFilter0()"
          },
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "comment": "\nReturn true if contact calculations should be performed between these two\nshapes.\n\n",
            "name": "shouldCollide",
            "children": [
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureA",
                "id": "fixtureA"
              },
              {
                "ref": {
                  "name": "Fixture",
                  "refId": "Fixture"
                },
                "kind": "param",
                "name": "fixtureB",
                "id": "fixtureB"
              }
            ],
            "id": "shouldCollide2()"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "ContactFilter",
            "id": "ContactFilter0()"
          }
        ],
        "id": "ContactFilter"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "ContactListener",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled when two fixtures begin to touch.\n\n",
            "name": "beginContact",
            "children": [
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "contact",
                "id": "contact"
              }
            ],
            "id": "beginContact1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nCalled when two fixtures cease to touch.\n\n",
            "name": "endContact",
            "children": [
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "contact",
                "id": "contact"
              }
            ],
            "id": "endContact1()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThis is called after a contact is updated. This allows you to inspect a\ncontact before it goes to the solver. If you are careful, you can modify\nthe contact manifold (e.g. disable contact).\nA copy of the old manifold is provided so that you can detect changes.\nNote: this is called only for awake bodies.\nNote: this is called even when the number of contact points is zero.\nNote: this is not called for sensors.\nNote: if you set the number of contact points to zero, you will not\nget an EndContact callback. However, you may get a BeginContact callback\nthe next step.\nNote: the oldManifold parameter is pooled, so it will be the same object\nfor every callback for each thread.\n\n",
            "name": "preSolve",
            "children": [
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "contact",
                "id": "contact"
              },
              {
                "ref": {
                  "name": "Manifold",
                  "refId": "Manifold"
                },
                "kind": "param",
                "name": "oldManifold",
                "id": "oldManifold"
              }
            ],
            "id": "preSolve2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nThis lets you inspect a contact after the solver is finished. This is\nuseful for inspecting impulses.\nNote: the contact manifold does not include time of impact impulses,\nwhich can be arbitrarily large if the sub-step is small. Hence the impulse\nis provided explicitly in a separate data structure.\nNote: this is only called for contacts that are touching, solid, and awake.\n\n",
            "name": "postSolve",
            "children": [
              {
                "ref": {
                  "name": "Contact",
                  "refId": "Contact"
                },
                "kind": "param",
                "name": "contact",
                "id": "contact"
              },
              {
                "ref": {
                  "name": "ContactImpulse",
                  "refId": "ContactImpulse"
                },
                "kind": "param",
                "name": "impulse",
                "id": "impulse"
              }
            ],
            "id": "postSolve2()"
          }
        ],
        "id": "ContactListener"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "TreeCallback",
        "children": [
          {
            "returnType": {
              "name": "bool",
              "refId": "bool"
            },
            "kind": "method",
            "name": "treeCallback",
            "children": [
              {
                "ref": {
                  "name": "DynamicTreeNode",
                  "refId": "DynamicTreeNode"
                },
                "kind": "param",
                "name": "node",
                "id": "node"
              }
            ],
            "id": "treeCallback1()"
          }
        ],
        "id": "TreeCallback"
      },
      {
        "superclass": {
          "name": "Object",
          "refId": "Object"
        },
        "kind": "class",
        "name": "PairCallback",
        "children": [
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "addPair",
            "children": [
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "userDataA",
                "id": "userDataA"
              },
              {
                "ref": {
                  "name": "dynamic",
                  "refId": "dynamic"
                },
                "kind": "param",
                "name": "userDataB",
                "id": "userDataB"
              }
            ],
            "id": "addPair2()"
          }
        ],
        "id": "PairCallback"
      }
    ],
    "id": "package:box2d/box2d.dart"
  },
  {
    "kind": "library",
    "name": "box2d_browser",
    "children": [
      {
        "superclass": {
          "name": "IViewportTransform",
          "refId": "IViewportTransform"
        },
        "kind": "class",
        "name": "CanvasViewportTransform",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "comment": "\nConstructs a new viewport transform with the default scale.\n\n",
            "name": "CanvasViewportTransform",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "_extents",
                "id": "_extents"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "_center",
                "id": "_center"
              }
            ],
            "id": "CanvasViewportTransform2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nSets the rendering context such that all drawing commands given in terms\nof the world coordinate system will display correctly on the canvas screen.\n\n",
            "name": "updateTransformation",
            "children": [
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "updateTransformation1()"
          },
          {
            "ref": {
              "name": "int",
              "refId": "int"
            },
            "isStatic": true,
            "kind": "property",
            "name": "DEFAULT_DRAWING_SCALE",
            "id": "DEFAULT_DRAWING_SCALE"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "comment": "\nConstructs a new viewport transform with the default scale.\n\n",
            "name": "CanvasViewportTransform",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "_extents",
                "id": "_extents"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "_center",
                "id": "_center"
              }
            ],
            "id": "CanvasViewportTransform2()"
          }
        ],
        "id": "CanvasViewportTransform"
      },
      {
        "superclass": {
          "name": "DebugDraw",
          "refId": "DebugDraw"
        },
        "kind": "class",
        "name": "CanvasDraw",
        "children": [
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "method",
            "name": "CanvasDraw",
            "children": [
              {
                "ref": {
                  "name": "IViewportTransform",
                  "refId": "IViewportTransform"
                },
                "kind": "param",
                "name": "viewport",
                "id": "viewport"
              },
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "CanvasDraw2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDraw a closed polygon provided in CCW order. WARNING: This mutates\n[vertices].\n\n",
            "name": "drawPolygon",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Vector",
                      "refId": "Vector"
                    }
                  ]
                },
                "kind": "param",
                "name": "vertices",
                "id": "vertices"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "vertexCount",
                "id": "vertexCount"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawPolygon3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDraw a solid closed polygon provided in CCW order. WARNING: This mutates\n[vertices].\n\n",
            "name": "drawSolidPolygon",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Vector",
                      "refId": "Vector"
                    }
                  ]
                },
                "kind": "param",
                "name": "vertices",
                "id": "vertices"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "vertexCount",
                "id": "vertexCount"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawSolidPolygon3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_pathPolygon",
            "children": [
              {
                "ref": {
                  "name": "List",
                  "refId": "List",
                  "arguments": [
                    {
                      "name": "Vector",
                      "refId": "Vector"
                    }
                  ]
                },
                "kind": "param",
                "name": "vertices",
                "id": "vertices"
              },
              {
                "ref": {
                  "name": "int",
                  "refId": "int"
                },
                "kind": "param",
                "name": "vertexCount",
                "id": "vertexCount"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "_pathPolygon3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a line segment. WARNING: This mutates [p1] and [p2].\n",
            "name": "drawSegment",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "p1",
                "id": "p1"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "p2",
                "id": "p2"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawSegment3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a circle. WARNING: This mutates [center].\n",
            "name": "drawCircle",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "center",
                "id": "center"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius",
                "id": "radius"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "axis",
                "id": "axis"
              }
            ],
            "id": "drawCircle4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a solid circle. WARNING: This mutates [center].\n",
            "name": "drawSolidCircle",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "center",
                "id": "center"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius",
                "id": "radius"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              },
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "isOptional": true,
                "kind": "param",
                "name": "axis",
                "id": "axis"
              }
            ],
            "id": "drawSolidCircle4()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDraws the given point with the given *unscaled* radius, in the given color.\nWARNING: This mutates [center].\n\n",
            "name": "drawPoint",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "point",
                "id": "point"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radiusOnScreen",
                "id": "radiusOnScreen"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawPoint3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "name": "_pathCircle",
            "children": [
              {
                "ref": {
                  "name": "Vector",
                  "refId": "Vector"
                },
                "kind": "param",
                "name": "center",
                "id": "center"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "radius",
                "id": "radius"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "_pathCircle3()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "\nDraw a transform. Choose your own length scale. WARNING: This mutates\n[xf.position].\n\n",
            "name": "drawTransform",
            "children": [
              {
                "ref": {
                  "name": "Transform",
                  "refId": "Transform"
                },
                "kind": "param",
                "name": "xf",
                "id": "xf"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawTransform2()"
          },
          {
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Draw a string.\n",
            "name": "drawString",
            "children": [
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "x",
                "id": "x"
              },
              {
                "ref": {
                  "name": "num",
                  "refId": "num"
                },
                "kind": "param",
                "name": "y",
                "id": "y"
              },
              {
                "ref": {
                  "name": "String",
                  "refId": "String"
                },
                "kind": "param",
                "name": "s",
                "id": "s"
              },
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "drawString4()"
          },
          {
            "isSetter": true,
            "returnType": {
              "name": "void",
              "refId": "void"
            },
            "kind": "method",
            "comment": "Sets the rendering context stroke and fill color to [color].\n",
            "name": "_color=",
            "children": [
              {
                "ref": {
                  "name": "Color3",
                  "refId": "Color3"
                },
                "kind": "param",
                "name": "color",
                "id": "color"
              }
            ],
            "id": "_color=1()"
          },
          {
            "ref": {
              "name": "CanvasRenderingContext2D",
              "refId": "CanvasRenderingContext2D"
            },
            "kind": "property",
            "name": "ctx",
            "id": "ctx"
          },
          {
            "returnType": {
              "name": "dynamic",
              "refId": "dynamic"
            },
            "kind": "constructor",
            "name": "CanvasDraw",
            "children": [
              {
                "ref": {
                  "name": "IViewportTransform",
                  "refId": "IViewportTransform"
                },
                "kind": "param",
                "name": "viewport",
                "id": "viewport"
              },
              {
                "ref": {
                  "name": "CanvasRenderingContext2D",
                  "refId": "CanvasRenderingContext2D"
                },
                "kind": "param",
                "name": "ctx",
                "id": "ctx"
              }
            ],
            "id": "CanvasDraw2()"
          }
        ],
        "id": "CanvasDraw"
      }
    ],
    "id": "file:///home/dominich/git/dartbox2d/lib/box2d_browser.dart"
  }
]